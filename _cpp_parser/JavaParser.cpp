
// Generated from antlr/java/JavaParser.g4 by ANTLR 4.13.2


#include "JavaParserVisitor.h"

#include "JavaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct JavaParserStaticData final {
  JavaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  JavaParserStaticData(const JavaParserStaticData&) = delete;
  JavaParserStaticData(JavaParserStaticData&&) = delete;
  JavaParserStaticData& operator=(const JavaParserStaticData&) = delete;
  JavaParserStaticData& operator=(JavaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag javaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<JavaParserStaticData> javaparserParserStaticData = nullptr;

void javaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (javaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(javaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<JavaParserStaticData>(
    std::vector<std::string>{
      "compilationUnit", "declarationStart", "statementStart", "expressionStart", 
      "directiveStart", "ordinaryCompilationUnit", "modularCompilationUnit", 
      "packageDeclaration", "importDeclaration", "typeDeclaration", "modifier", 
      "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
      "classExtends", "classImplements", "classPermits", "typeParameters", 
      "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
      "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "classBody", 
      "interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
      "dims", "dim", "throws_", "methodBody", "typeTypeOrVoid", "constructorDeclaration", 
      "compactConstructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
      "interfaceMemberDeclaration", "constDeclaration", "interfaceMethodModifier", 
      "interfaceMethodDeclaration", "variableDeclarators", "variableDeclarator", 
      "variableDeclaratorId", "variableInitializer", "arrayInitializer", 
      "classOrInterfaceType", "coit", "typeArgument", "qualifiedNameList", 
      "formalParameters", "receiverParameter", "formalParameterList", "formalParameter", 
      "lastFormalParameter", "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
      "literal", "integerLiteral", "floatLiteral", "annotation", "elementValuePairs", 
      "elementValuePair", "elementValue", "elementValueArrayInitializer", 
      "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
      "annotationTypeElementRest", "annotationConstantDeclaration", "annotationMethodDeclaration", 
      "defaultValue", "moduleDeclaration", "moduleBody", "moduleDirective", 
      "requiresModifier", "recordDeclaration", "recordComponentList", "recordComponent", 
      "recordBody", "recordBodyDeclaration", "block", "blockStatement", 
      "localVariableDeclaration", "identifier", "typeIdentifier", "localTypeDeclaration", 
      "statement", "switchBlock", "catchClause", "catchType", "finallyBlock", 
      "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
      "switchLabel", "forInit", "parExpression", "expressionList", "methodCall", 
      "postfixExpression", "prefixExpression", "typeExpression", "multiplicativeExpression", 
      "additiveExpression", "shiftExpression", "relationalExpression", "equalityExpression", 
      "bitwiseAndExpression", "bitwiseXorExpression", "bitwiseOrExpression", 
      "logicalAndExpression", "logicalOrExpression", "ternaryExpression", 
      "assignmentExpression", "expression", "pattern", "lambdaExpression", 
      "lambdaParameters", "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
      "guardedPattern", "switchRuleOutcome", "classType", "creator", "objectCreator", 
      "createdName", "coitDiamond", "innerCreator", "dimExpr", "arrayCreator", 
      "explicitGenericInvocation", "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
      "nonWildcardTypeArguments", "typeList", "typeType", "primitiveType", 
      "typeArguments", "superSuffix", "explicitGenericInvocationSuffix", 
      "arguments"
    },
    std::vector<std::string>{
      "", "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
      "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
      "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
      "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
      "'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
      "'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", 
      "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", 
      "'this'", "'throw'", "'throws'", "'transient'", "'try'", "'void'", 
      "'volatile'", "'while'", "'module'", "'open'", "'requires'", "'exports'", 
      "'opens'", "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
      "'var'", "'yield'", "'record'", "'sealed'", "'permits'", "'non-sealed'", 
      "", "", "", "", "", "", "", "", "", "", "'null'", "'('", "')'", "'{'", 
      "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
      "'~'", "'\\u003F'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", 
      "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", 
      "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
      "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", "'...'"
    },
    std::vector<std::string>{
      "", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
      "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
      "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", 
      "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
      "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", 
      "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", 
      "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", 
      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
      "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
      "IDENTIFIER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,128,1976,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,1,0,1,0,1,0,1,0,1,0,1,0,3,0,303,8,0,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,5,1,315,8,1,10,1,12,1,318,9,1,1,1,1,1,1,1,1,1,
  	5,1,324,8,1,10,1,12,1,327,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,336,8,1,
  	1,1,1,1,1,1,1,1,5,1,342,8,1,10,1,12,1,345,9,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,5,1,354,8,1,10,1,12,1,357,9,1,1,1,1,1,1,1,1,1,5,1,363,8,1,10,1,12,
  	1,366,9,1,1,1,1,1,1,1,1,1,5,1,372,8,1,10,1,12,1,375,9,1,1,1,1,1,1,1,1,
  	1,5,1,381,8,1,10,1,12,1,384,9,1,1,1,1,1,1,1,1,1,5,1,390,8,1,10,1,12,1,
  	393,9,1,1,1,1,1,1,1,1,1,5,1,399,8,1,10,1,12,1,402,9,1,1,1,1,1,1,1,1,1,
  	1,1,3,1,409,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,3,5,421,8,5,1,
  	5,1,5,5,5,425,8,5,10,5,12,5,428,9,5,1,5,1,5,5,5,432,8,5,10,5,12,5,435,
  	9,5,1,6,1,6,5,6,439,8,6,10,6,12,6,442,9,6,1,6,1,6,1,7,5,7,447,8,7,10,
  	7,12,7,450,9,7,1,7,1,7,1,7,1,7,1,8,1,8,3,8,458,8,8,1,8,1,8,1,8,3,8,463,
  	8,8,1,8,1,8,1,9,5,9,468,8,9,10,9,12,9,471,9,9,1,9,1,9,1,9,1,9,1,9,3,9,
  	478,8,9,1,10,1,10,1,10,1,10,1,10,3,10,485,8,10,1,11,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,11,3,11,497,8,11,1,12,1,12,3,12,501,8,12,1,13,
  	1,13,1,13,3,13,506,8,13,1,13,3,13,509,8,13,1,13,3,13,512,8,13,1,13,3,
  	13,515,8,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
  	17,1,17,1,17,1,17,5,17,532,8,17,10,17,12,17,535,9,17,1,17,1,17,1,18,5,
  	18,540,8,18,10,18,12,18,543,9,18,1,18,1,18,1,18,3,18,548,8,18,1,19,5,
  	19,551,8,19,10,19,12,19,554,9,19,1,19,1,19,1,19,5,19,559,8,19,10,19,12,
  	19,562,9,19,1,20,1,20,1,20,3,20,567,8,20,1,20,1,20,3,20,571,8,20,1,20,
  	3,20,574,8,20,1,20,3,20,577,8,20,1,20,1,20,1,21,1,21,1,21,5,21,584,8,
  	21,10,21,12,21,587,9,21,1,22,5,22,590,8,22,10,22,12,22,593,9,22,1,22,
  	1,22,3,22,597,8,22,1,22,3,22,600,8,22,1,23,1,23,5,23,604,8,23,10,23,12,
  	23,607,9,23,1,24,1,24,1,24,3,24,612,8,24,1,24,3,24,615,8,24,1,24,3,24,
  	618,8,24,1,24,1,24,1,25,1,25,5,25,624,8,25,10,25,12,25,627,9,25,1,25,
  	1,25,1,26,1,26,5,26,633,8,26,10,26,12,26,636,9,26,1,26,1,26,1,27,1,27,
  	3,27,642,8,27,1,27,1,27,5,27,646,8,27,10,27,12,27,649,9,27,1,27,3,27,
  	652,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,662,8,28,1,29,3,
  	29,665,8,29,1,29,1,29,1,29,1,29,3,29,671,8,29,1,29,3,29,674,8,29,1,29,
  	1,29,1,30,1,30,5,30,680,8,30,10,30,12,30,683,9,30,1,31,5,31,686,8,31,
  	10,31,12,31,689,9,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,3,33,699,
  	8,33,1,34,1,34,3,34,703,8,34,1,35,3,35,706,8,35,1,35,1,35,1,35,3,35,711,
  	8,35,1,35,1,35,1,36,5,36,716,8,36,10,36,12,36,719,9,36,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,38,5,38,729,8,38,10,38,12,38,732,9,38,1,38,1,38,
  	3,38,736,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,745,8,39,1,40,1,
  	40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,757,8,41,1,42,5,42,760,
  	8,42,10,42,12,42,763,9,42,1,42,3,42,766,8,42,1,42,5,42,769,8,42,10,42,
  	12,42,772,9,42,1,42,1,42,1,42,1,42,3,42,778,8,42,1,42,3,42,781,8,42,1,
  	42,1,42,1,43,1,43,1,43,5,43,788,8,43,10,43,12,43,791,9,43,1,44,1,44,1,
  	44,3,44,796,8,44,1,45,1,45,3,45,800,8,45,1,46,1,46,3,46,804,8,46,1,47,
  	1,47,1,47,1,47,5,47,810,8,47,10,47,12,47,813,9,47,1,47,3,47,816,8,47,
  	3,47,818,8,47,1,47,1,47,1,48,1,48,1,48,5,48,825,8,48,10,48,12,48,828,
  	9,48,1,48,1,48,1,49,1,49,3,49,834,8,49,1,50,1,50,5,50,838,8,50,10,50,
  	12,50,841,9,50,1,50,1,50,1,50,3,50,846,8,50,3,50,848,8,50,1,51,1,51,1,
  	51,5,51,853,8,51,10,51,12,51,856,9,51,1,52,1,52,3,52,860,8,52,1,52,1,
  	52,1,52,3,52,865,8,52,1,52,3,52,868,8,52,3,52,870,8,52,1,52,1,52,1,53,
  	1,53,1,53,1,53,5,53,878,8,53,10,53,12,53,881,9,53,1,53,1,53,1,54,1,54,
  	1,54,5,54,888,8,54,10,54,12,54,891,9,54,1,54,1,54,3,54,895,8,54,1,54,
  	3,54,898,8,54,1,55,5,55,901,8,55,10,55,12,55,904,9,55,1,55,1,55,1,55,
  	1,56,5,56,910,8,56,10,56,12,56,913,9,56,1,56,1,56,5,56,917,8,56,10,56,
  	12,56,920,9,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,928,8,57,10,57,12,57,
  	931,9,57,1,58,5,58,934,8,58,10,58,12,58,937,9,58,1,58,1,58,1,58,1,59,
  	1,59,1,59,5,59,945,8,59,10,59,12,59,948,9,59,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,3,60,957,8,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,
  	3,63,968,8,63,1,63,3,63,971,8,63,1,64,1,64,1,64,5,64,976,8,64,10,64,12,
  	64,979,9,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,3,66,988,8,66,1,67,1,67,
  	1,67,1,67,5,67,994,8,67,10,67,12,67,997,9,67,3,67,999,8,67,1,67,3,67,
  	1002,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,5,69,1013,8,69,
  	10,69,12,69,1016,9,69,1,69,1,69,1,70,5,70,1021,8,70,10,70,12,70,1024,
  	9,70,1,70,1,70,3,70,1028,8,70,1,71,1,71,1,71,1,71,3,71,1034,8,71,1,71,
  	1,71,3,71,1038,8,71,1,71,1,71,3,71,1042,8,71,1,71,1,71,3,71,1046,8,71,
  	1,71,1,71,3,71,1050,8,71,3,71,1052,8,71,1,72,1,72,1,72,1,72,1,73,1,73,
  	1,73,1,73,1,73,3,73,1063,8,73,1,73,1,73,1,74,1,74,1,74,1,75,3,75,1071,
  	8,75,1,75,1,75,1,75,1,75,1,76,1,76,5,76,1079,8,76,10,76,12,76,1082,9,
  	76,1,76,1,76,1,77,1,77,5,77,1088,8,77,10,77,12,77,1091,9,77,1,77,1,77,
  	1,77,1,77,1,77,1,77,1,77,3,77,1100,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
  	3,77,1108,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,77,3,77,1122,8,77,1,78,1,78,1,79,1,79,1,79,3,79,1129,8,79,1,79,1,79,
  	3,79,1133,8,79,1,79,1,79,3,79,1137,8,79,1,79,1,79,1,80,1,80,1,80,5,80,
  	1144,8,80,10,80,12,80,1147,9,80,1,81,1,81,1,81,1,82,1,82,5,82,1154,8,
  	82,10,82,12,82,1157,9,82,1,82,1,82,1,83,1,83,3,83,1163,8,83,1,84,1,84,
  	5,84,1167,8,84,10,84,12,84,1170,9,84,1,84,1,84,1,85,1,85,1,85,1,85,1,
  	85,3,85,1179,8,85,1,86,5,86,1182,8,86,10,86,12,86,1185,9,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,3,86,1195,8,86,1,87,1,87,1,88,1,88,1,89,
  	5,89,1202,8,89,10,89,12,89,1205,9,89,1,89,1,89,1,89,3,89,1210,8,89,1,
  	90,1,90,1,90,1,90,1,90,3,90,1217,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,3,90,1226,8,90,1,90,1,90,1,90,3,90,1231,8,90,1,90,1,90,3,90,1235,8,
  	90,1,90,1,90,3,90,1239,8,90,1,90,1,90,1,90,1,90,1,90,5,90,1246,8,90,10,
  	90,12,90,1249,9,90,1,90,1,90,3,90,1253,8,90,1,90,1,90,1,90,1,90,1,90,
  	1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	4,90,1274,8,90,11,90,12,90,1275,1,90,3,90,1279,8,90,1,90,3,90,1282,8,
  	90,1,90,1,90,1,90,1,90,5,90,1288,8,90,10,90,12,90,1291,9,90,1,90,3,90,
  	1294,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1306,
  	8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1315,8,90,1,90,1,90,1,90,
  	3,90,1320,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	1,90,1,90,3,90,1335,8,90,1,91,1,91,5,91,1339,8,91,10,91,12,91,1342,9,
  	91,1,91,5,91,1345,8,91,10,91,12,91,1348,9,91,1,91,1,91,1,92,1,92,1,92,
  	5,92,1355,8,92,10,92,12,92,1358,9,92,1,92,1,92,1,92,1,92,1,92,1,93,1,
  	93,1,93,5,93,1368,8,93,10,93,12,93,1371,9,93,1,94,1,94,1,94,1,95,1,95,
  	1,95,3,95,1379,8,95,1,95,1,95,1,96,1,96,1,96,5,96,1386,8,96,10,96,12,
  	96,1389,9,96,1,97,5,97,1392,8,97,10,97,12,97,1395,9,97,1,97,1,97,1,97,
  	1,97,1,97,3,97,1402,8,97,1,97,1,97,1,97,1,97,3,97,1408,8,97,1,98,4,98,
  	1411,8,98,11,98,12,98,1412,1,98,4,98,1416,8,98,11,98,12,98,1417,1,99,
  	1,99,1,99,1,99,1,99,3,99,1425,8,99,1,99,1,99,1,99,1,99,3,99,1431,8,99,
  	1,100,1,100,3,100,1435,8,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,
  	5,102,1444,8,102,10,102,12,102,1447,9,102,1,103,1,103,1,103,3,103,1452,
  	8,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,5,104,1461,8,104,10,104,
  	12,104,1464,9,104,1,105,1,105,1,105,3,105,1469,8,105,1,106,1,106,5,106,
  	1473,8,106,10,106,12,106,1476,9,106,1,106,1,106,1,106,5,106,1481,8,106,
  	10,106,12,106,1484,9,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1492,
  	8,106,1,107,1,107,1,107,1,107,1,107,1,107,5,107,1500,8,107,10,107,12,
  	107,1503,9,107,1,108,1,108,1,108,1,108,1,108,1,108,5,108,1511,8,108,10,
  	108,12,108,1514,9,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
  	1,109,1,109,1,109,3,109,1527,8,109,1,109,5,109,1530,8,109,10,109,12,109,
  	1533,9,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
  	3,110,1545,8,110,5,110,1547,8,110,10,110,12,110,1550,9,110,1,111,1,111,
  	1,111,1,111,1,111,1,111,5,111,1558,8,111,10,111,12,111,1561,9,111,1,112,
  	1,112,1,112,1,112,1,112,1,112,5,112,1569,8,112,10,112,12,112,1572,9,112,
  	1,113,1,113,1,113,1,113,1,113,1,113,5,113,1580,8,113,10,113,12,113,1583,
  	9,113,1,114,1,114,1,114,1,114,1,114,1,114,5,114,1591,8,114,10,114,12,
  	114,1594,9,114,1,115,1,115,1,115,1,115,1,115,1,115,5,115,1602,8,115,10,
  	115,12,115,1605,9,115,1,116,1,116,1,116,1,116,1,116,1,116,5,116,1613,
  	8,116,10,116,12,116,1616,9,116,1,117,1,117,1,117,1,117,1,117,1,117,1,
  	117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1631,8,117,1,118,1,118,
  	1,118,1,118,1,118,3,118,1638,8,118,1,119,1,119,3,119,1642,8,119,1,120,
  	5,120,1645,8,120,10,120,12,120,1648,9,120,1,120,1,120,5,120,1652,8,120,
  	10,120,12,120,1655,9,120,1,120,1,120,1,121,1,121,1,121,1,121,1,122,1,
  	122,1,122,3,122,1666,8,122,1,122,1,122,1,122,1,122,1,122,5,122,1673,8,
  	122,10,122,12,122,1676,9,122,1,122,1,122,1,122,1,122,3,122,1682,8,122,
  	1,122,3,122,1685,8,122,1,123,1,123,3,123,1689,8,123,1,124,1,124,1,124,
  	1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	1,124,1,124,3,124,1708,8,124,1,124,1,124,1,124,1,124,3,124,1714,8,124,
  	1,124,1,124,3,124,1718,8,124,1,124,1,124,1,124,3,124,1723,8,124,1,124,
  	1,124,3,124,1727,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	1,124,1,124,1,124,1,124,3,124,1741,8,124,1,124,1,124,1,124,3,124,1746,
  	8,124,1,124,1,124,1,124,3,124,1751,8,124,1,124,5,124,1754,8,124,10,124,
  	12,124,1757,9,124,1,125,1,125,1,125,1,125,5,125,1763,8,125,10,125,12,
  	125,1766,9,125,1,125,1,125,1,125,3,125,1771,8,125,1,126,1,126,1,126,3,
  	126,1776,8,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1784,8,126,1,
  	127,1,127,1,127,1,127,1,127,1,127,5,127,1792,8,127,10,127,12,127,1795,
  	9,127,1,127,1,127,5,127,1799,8,127,10,127,12,127,1802,9,127,1,127,1,127,
  	1,127,5,127,1807,8,127,10,127,12,127,1810,9,127,3,127,1812,8,127,1,127,
  	1,127,1,127,5,127,1817,8,127,10,127,12,127,1820,9,127,1,128,1,128,5,128,
  	1824,8,128,10,128,12,128,1827,9,128,3,128,1829,8,128,1,129,1,129,1,129,
  	3,129,1834,8,129,1,129,5,129,1837,8,129,10,129,12,129,1840,9,129,1,129,
  	1,129,3,129,1844,8,129,1,130,1,130,3,130,1848,8,130,1,131,3,131,1851,
  	8,131,1,131,1,131,1,131,3,131,1856,8,131,1,132,1,132,1,132,5,132,1861,
  	8,132,10,132,12,132,1864,9,132,1,132,3,132,1867,8,132,1,133,1,133,3,133,
  	1871,8,133,1,134,1,134,3,134,1875,8,134,1,134,1,134,3,134,1879,8,134,
  	1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,4,136,1891,
  	8,136,11,136,12,136,1892,1,136,3,136,1896,8,136,3,136,1898,8,136,1,137,
  	1,137,1,137,1,138,1,138,1,138,3,138,1906,8,138,1,139,1,139,1,139,3,139,
  	1911,8,139,1,140,1,140,1,140,1,140,1,141,1,141,1,141,5,141,1920,8,141,
  	10,141,12,141,1923,9,141,1,142,5,142,1926,8,142,10,142,12,142,1929,9,
  	142,1,142,1,142,3,142,1933,8,142,1,142,3,142,1936,8,142,1,143,1,143,1,
  	144,1,144,1,144,1,144,5,144,1944,8,144,10,144,12,144,1947,9,144,1,144,
  	1,144,1,145,1,145,1,145,1,145,1,145,3,145,1956,8,145,1,145,1,145,3,145,
  	1960,8,145,3,145,1962,8,145,1,146,1,146,1,146,1,146,3,146,1968,8,146,
  	1,147,1,147,3,147,1972,8,147,1,147,1,147,1,147,0,13,208,214,216,218,220,
  	222,224,226,228,230,232,248,254,148,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
  	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
  	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
  	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
  	294,0,15,2,0,17,17,40,40,1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,
  	128,128,3,0,51,60,63,65,128,128,1,0,100,101,2,0,90,91,100,103,2,0,104,
  	105,109,109,1,0,102,103,2,0,88,89,95,96,2,0,94,94,97,97,2,0,87,87,110,
  	120,2,0,93,93,121,121,8,0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,2168,
  	0,302,1,0,0,0,2,408,1,0,0,0,4,410,1,0,0,0,6,413,1,0,0,0,8,416,1,0,0,0,
  	10,420,1,0,0,0,12,440,1,0,0,0,14,448,1,0,0,0,16,455,1,0,0,0,18,469,1,
  	0,0,0,20,484,1,0,0,0,22,496,1,0,0,0,24,500,1,0,0,0,26,502,1,0,0,0,28,
  	518,1,0,0,0,30,521,1,0,0,0,32,524,1,0,0,0,34,527,1,0,0,0,36,541,1,0,0,
  	0,38,552,1,0,0,0,40,563,1,0,0,0,42,580,1,0,0,0,44,591,1,0,0,0,46,601,
  	1,0,0,0,48,608,1,0,0,0,50,621,1,0,0,0,52,630,1,0,0,0,54,651,1,0,0,0,56,
  	661,1,0,0,0,58,664,1,0,0,0,60,677,1,0,0,0,62,687,1,0,0,0,64,693,1,0,0,
  	0,66,698,1,0,0,0,68,702,1,0,0,0,70,705,1,0,0,0,72,717,1,0,0,0,74,723,
  	1,0,0,0,76,735,1,0,0,0,78,744,1,0,0,0,80,746,1,0,0,0,82,756,1,0,0,0,84,
  	761,1,0,0,0,86,784,1,0,0,0,88,792,1,0,0,0,90,797,1,0,0,0,92,803,1,0,0,
  	0,94,805,1,0,0,0,96,826,1,0,0,0,98,831,1,0,0,0,100,847,1,0,0,0,102,849,
  	1,0,0,0,104,857,1,0,0,0,106,873,1,0,0,0,108,897,1,0,0,0,110,902,1,0,0,
  	0,112,911,1,0,0,0,114,924,1,0,0,0,116,935,1,0,0,0,118,941,1,0,0,0,120,
  	956,1,0,0,0,122,958,1,0,0,0,124,960,1,0,0,0,126,962,1,0,0,0,128,972,1,
  	0,0,0,130,980,1,0,0,0,132,987,1,0,0,0,134,989,1,0,0,0,136,1005,1,0,0,
  	0,138,1010,1,0,0,0,140,1027,1,0,0,0,142,1051,1,0,0,0,144,1053,1,0,0,0,
  	146,1057,1,0,0,0,148,1066,1,0,0,0,150,1070,1,0,0,0,152,1076,1,0,0,0,154,
  	1121,1,0,0,0,156,1123,1,0,0,0,158,1125,1,0,0,0,160,1140,1,0,0,0,162,1148,
  	1,0,0,0,164,1151,1,0,0,0,166,1162,1,0,0,0,168,1164,1,0,0,0,170,1178,1,
  	0,0,0,172,1183,1,0,0,0,174,1196,1,0,0,0,176,1198,1,0,0,0,178,1203,1,0,
  	0,0,180,1334,1,0,0,0,182,1336,1,0,0,0,184,1351,1,0,0,0,186,1364,1,0,0,
  	0,188,1372,1,0,0,0,190,1375,1,0,0,0,192,1382,1,0,0,0,194,1407,1,0,0,0,
  	196,1410,1,0,0,0,198,1430,1,0,0,0,200,1434,1,0,0,0,202,1436,1,0,0,0,204,
  	1440,1,0,0,0,206,1451,1,0,0,0,208,1455,1,0,0,0,210,1468,1,0,0,0,212,1491,
  	1,0,0,0,214,1493,1,0,0,0,216,1504,1,0,0,0,218,1515,1,0,0,0,220,1534,1,
  	0,0,0,222,1551,1,0,0,0,224,1562,1,0,0,0,226,1573,1,0,0,0,228,1584,1,0,
  	0,0,230,1595,1,0,0,0,232,1606,1,0,0,0,234,1630,1,0,0,0,236,1637,1,0,0,
  	0,238,1641,1,0,0,0,240,1646,1,0,0,0,242,1658,1,0,0,0,244,1684,1,0,0,0,
  	246,1688,1,0,0,0,248,1726,1,0,0,0,250,1770,1,0,0,0,252,1783,1,0,0,0,254,
  	1811,1,0,0,0,256,1828,1,0,0,0,258,1833,1,0,0,0,260,1847,1,0,0,0,262,1850,
  	1,0,0,0,264,1866,1,0,0,0,266,1868,1,0,0,0,268,1872,1,0,0,0,270,1880,1,
  	0,0,0,272,1897,1,0,0,0,274,1899,1,0,0,0,276,1905,1,0,0,0,278,1910,1,0,
  	0,0,280,1912,1,0,0,0,282,1916,1,0,0,0,284,1927,1,0,0,0,286,1937,1,0,0,
  	0,288,1939,1,0,0,0,290,1961,1,0,0,0,292,1967,1,0,0,0,294,1969,1,0,0,0,
  	296,297,3,10,5,0,297,298,5,0,0,1,298,303,1,0,0,0,299,300,3,12,6,0,300,
  	301,5,0,0,1,301,303,1,0,0,0,302,296,1,0,0,0,302,299,1,0,0,0,303,1,1,0,
  	0,0,304,305,3,14,7,0,305,306,5,0,0,1,306,409,1,0,0,0,307,308,3,16,8,0,
  	308,309,5,0,0,1,309,409,1,0,0,0,310,311,3,150,75,0,311,312,5,0,0,1,312,
  	409,1,0,0,0,313,315,3,20,10,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,
  	1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,3,74,
  	37,0,320,321,5,0,0,1,321,409,1,0,0,0,322,324,3,20,10,0,323,322,1,0,0,
  	0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,
  	325,1,0,0,0,328,329,3,58,29,0,329,330,5,0,0,1,330,409,1,0,0,0,331,332,
  	3,84,42,0,332,333,5,0,0,1,333,409,1,0,0,0,334,336,5,38,0,0,335,334,1,
  	0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,3,168,84,0,338,339,5,0,
  	0,1,339,409,1,0,0,0,340,342,3,20,10,0,341,340,1,0,0,0,342,345,1,0,0,0,
  	343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,347,
  	3,70,35,0,347,348,5,0,0,1,348,409,1,0,0,0,349,350,3,72,36,0,350,351,5,
  	0,0,1,351,409,1,0,0,0,352,354,3,20,10,0,353,352,1,0,0,0,354,357,1,0,0,
  	0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,
  	359,3,146,73,0,359,360,5,0,0,1,360,409,1,0,0,0,361,363,3,20,10,0,362,
  	361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,
  	0,0,0,366,364,1,0,0,0,367,368,3,48,24,0,368,369,5,0,0,1,369,409,1,0,0,
  	0,370,372,3,20,10,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,
  	374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,377,3,136,68,0,377,378,
  	5,0,0,1,378,409,1,0,0,0,379,381,3,20,10,0,380,379,1,0,0,0,381,384,1,0,
  	0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,385,
  	386,3,26,13,0,386,387,5,0,0,1,387,409,1,0,0,0,388,390,3,20,10,0,389,388,
  	1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,
  	0,393,391,1,0,0,0,394,395,3,40,20,0,395,396,5,0,0,1,396,409,1,0,0,0,397,
  	399,3,20,10,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,
  	1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,3,158,79,0,404,405,5,
  	0,0,1,405,409,1,0,0,0,406,407,5,84,0,0,407,409,5,0,0,1,408,304,1,0,0,
  	0,408,307,1,0,0,0,408,310,1,0,0,0,408,316,1,0,0,0,408,325,1,0,0,0,408,
  	331,1,0,0,0,408,335,1,0,0,0,408,343,1,0,0,0,408,349,1,0,0,0,408,355,1,
  	0,0,0,408,364,1,0,0,0,408,373,1,0,0,0,408,382,1,0,0,0,408,391,1,0,0,0,
  	408,400,1,0,0,0,408,406,1,0,0,0,409,3,1,0,0,0,410,411,3,170,85,0,411,
  	412,5,0,0,1,412,5,1,0,0,0,413,414,3,238,119,0,414,415,5,0,0,1,415,7,1,
  	0,0,0,416,417,3,154,77,0,417,418,5,0,0,1,418,9,1,0,0,0,419,421,3,14,7,
  	0,420,419,1,0,0,0,420,421,1,0,0,0,421,426,1,0,0,0,422,425,3,16,8,0,423,
  	425,5,84,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,
  	1,0,0,0,426,427,1,0,0,0,427,433,1,0,0,0,428,426,1,0,0,0,429,432,3,18,
  	9,0,430,432,5,84,0,0,431,429,1,0,0,0,431,430,1,0,0,0,432,435,1,0,0,0,
  	433,431,1,0,0,0,433,434,1,0,0,0,434,11,1,0,0,0,435,433,1,0,0,0,436,439,
  	3,16,8,0,437,439,5,84,0,0,438,436,1,0,0,0,438,437,1,0,0,0,439,442,1,0,
  	0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,
  	444,3,150,75,0,444,13,1,0,0,0,445,447,3,126,63,0,446,445,1,0,0,0,447,
  	450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,448,1,
  	0,0,0,451,452,5,32,0,0,452,453,3,118,59,0,453,454,5,84,0,0,454,15,1,0,
  	0,0,455,457,5,25,0,0,456,458,5,38,0,0,457,456,1,0,0,0,457,458,1,0,0,0,
  	458,459,1,0,0,0,459,462,3,118,59,0,460,461,5,86,0,0,461,463,5,104,0,0,
  	462,460,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,5,84,0,0,465,
  	17,1,0,0,0,466,468,3,22,11,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,
  	1,0,0,0,469,470,1,0,0,0,470,477,1,0,0,0,471,469,1,0,0,0,472,478,3,26,
  	13,0,473,478,3,40,20,0,474,478,3,48,24,0,475,478,3,136,68,0,476,478,3,
  	158,79,0,477,472,1,0,0,0,477,473,1,0,0,0,477,474,1,0,0,0,477,475,1,0,
  	0,0,477,476,1,0,0,0,478,19,1,0,0,0,479,485,3,22,11,0,480,485,5,30,0,0,
  	481,485,5,42,0,0,482,485,5,46,0,0,483,485,5,49,0,0,484,479,1,0,0,0,484,
  	480,1,0,0,0,484,481,1,0,0,0,484,482,1,0,0,0,484,483,1,0,0,0,485,21,1,
  	0,0,0,486,497,3,126,63,0,487,497,5,35,0,0,488,497,5,34,0,0,489,497,5,
  	33,0,0,490,497,5,38,0,0,491,497,5,1,0,0,492,497,5,18,0,0,493,497,5,39,
  	0,0,494,497,5,64,0,0,495,497,5,66,0,0,496,486,1,0,0,0,496,487,1,0,0,0,
  	496,488,1,0,0,0,496,489,1,0,0,0,496,490,1,0,0,0,496,491,1,0,0,0,496,492,
  	1,0,0,0,496,493,1,0,0,0,496,494,1,0,0,0,496,495,1,0,0,0,497,23,1,0,0,
  	0,498,501,5,18,0,0,499,501,3,126,63,0,500,498,1,0,0,0,500,499,1,0,0,0,
  	501,25,1,0,0,0,502,503,5,9,0,0,503,505,3,174,87,0,504,506,3,34,17,0,505,
  	504,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,509,3,28,14,0,508,507,
  	1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,512,3,30,15,0,511,510,1,0,
  	0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,515,3,32,16,0,514,513,1,0,0,0,
  	514,515,1,0,0,0,515,516,1,0,0,0,516,517,3,50,25,0,517,27,1,0,0,0,518,
  	519,5,17,0,0,519,520,3,284,142,0,520,29,1,0,0,0,521,522,5,24,0,0,522,
  	523,3,282,141,0,523,31,1,0,0,0,524,525,5,65,0,0,525,526,3,282,141,0,526,
  	33,1,0,0,0,527,528,5,89,0,0,528,533,3,36,18,0,529,530,5,85,0,0,530,532,
  	3,36,18,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,
  	0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,88,0,0,537,35,1,0,0,0,538,
  	540,3,126,63,0,539,538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,
  	1,0,0,0,542,544,1,0,0,0,543,541,1,0,0,0,544,547,3,174,87,0,545,546,5,
  	17,0,0,546,548,3,38,19,0,547,545,1,0,0,0,547,548,1,0,0,0,548,37,1,0,0,
  	0,549,551,3,126,63,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,
  	552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,560,3,284,142,0,556,
  	557,5,106,0,0,557,559,3,284,142,0,558,556,1,0,0,0,559,562,1,0,0,0,560,
  	558,1,0,0,0,560,561,1,0,0,0,561,39,1,0,0,0,562,560,1,0,0,0,563,564,5,
  	16,0,0,564,566,3,174,87,0,565,567,3,30,15,0,566,565,1,0,0,0,566,567,1,
  	0,0,0,567,568,1,0,0,0,568,570,5,80,0,0,569,571,3,42,21,0,570,569,1,0,
  	0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,574,5,85,0,0,573,572,1,0,0,0,
  	573,574,1,0,0,0,574,576,1,0,0,0,575,577,3,46,23,0,576,575,1,0,0,0,576,
  	577,1,0,0,0,577,578,1,0,0,0,578,579,5,81,0,0,579,41,1,0,0,0,580,585,3,
  	44,22,0,581,582,5,85,0,0,582,584,3,44,22,0,583,581,1,0,0,0,584,587,1,
  	0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,43,1,0,0,0,587,585,1,0,0,0,
  	588,590,3,126,63,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
  	592,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,596,3,174,87,0,595,597,
  	3,294,147,0,596,595,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,600,3,
  	50,25,0,599,598,1,0,0,0,599,600,1,0,0,0,600,45,1,0,0,0,601,605,5,84,0,
  	0,602,604,3,54,27,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,
  	606,1,0,0,0,606,47,1,0,0,0,607,605,1,0,0,0,608,609,5,28,0,0,609,611,3,
  	174,87,0,610,612,3,34,17,0,611,610,1,0,0,0,611,612,1,0,0,0,612,614,1,
  	0,0,0,613,615,3,28,14,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,
  	0,616,618,3,30,15,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,
  	620,3,52,26,0,620,49,1,0,0,0,621,625,5,80,0,0,622,624,3,54,27,0,623,622,
  	1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,
  	0,627,625,1,0,0,0,628,629,5,81,0,0,629,51,1,0,0,0,630,634,5,80,0,0,631,
  	633,3,76,38,0,632,631,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,
  	1,0,0,0,635,637,1,0,0,0,636,634,1,0,0,0,637,638,5,81,0,0,638,53,1,0,0,
  	0,639,652,5,84,0,0,640,642,5,38,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,
  	643,1,0,0,0,643,652,3,168,84,0,644,646,3,20,10,0,645,644,1,0,0,0,646,
  	649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,647,1,
  	0,0,0,650,652,3,56,28,0,651,639,1,0,0,0,651,641,1,0,0,0,651,647,1,0,0,
  	0,652,55,1,0,0,0,653,662,3,158,79,0,654,662,3,58,29,0,655,662,3,74,37,
  	0,656,662,3,70,35,0,657,662,3,48,24,0,658,662,3,136,68,0,659,662,3,26,
  	13,0,660,662,3,40,20,0,661,653,1,0,0,0,661,654,1,0,0,0,661,655,1,0,0,
  	0,661,656,1,0,0,0,661,657,1,0,0,0,661,658,1,0,0,0,661,659,1,0,0,0,661,
  	660,1,0,0,0,662,57,1,0,0,0,663,665,3,34,17,0,664,663,1,0,0,0,664,665,
  	1,0,0,0,665,666,1,0,0,0,666,667,3,68,34,0,667,668,3,174,87,0,668,670,
  	3,104,52,0,669,671,3,60,30,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,
  	1,0,0,0,672,674,3,64,32,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,
  	0,0,675,676,3,66,33,0,676,59,1,0,0,0,677,681,3,62,31,0,678,680,3,62,31,
  	0,679,678,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,
  	61,1,0,0,0,683,681,1,0,0,0,684,686,3,126,63,0,685,684,1,0,0,0,686,689,
  	1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,687,1,0,0,
  	0,690,691,5,82,0,0,691,692,5,83,0,0,692,63,1,0,0,0,693,694,5,45,0,0,694,
  	695,3,102,51,0,695,65,1,0,0,0,696,699,3,168,84,0,697,699,5,84,0,0,698,
  	696,1,0,0,0,698,697,1,0,0,0,699,67,1,0,0,0,700,703,3,284,142,0,701,703,
  	5,48,0,0,702,700,1,0,0,0,702,701,1,0,0,0,703,69,1,0,0,0,704,706,3,34,
  	17,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,3,174,87,
  	0,708,710,3,104,52,0,709,711,3,64,32,0,710,709,1,0,0,0,710,711,1,0,0,
  	0,711,712,1,0,0,0,712,713,3,168,84,0,713,71,1,0,0,0,714,716,3,20,10,0,
  	715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,720,
  	1,0,0,0,719,717,1,0,0,0,720,721,3,174,87,0,721,722,3,168,84,0,722,73,
  	1,0,0,0,723,724,3,284,142,0,724,725,3,86,43,0,725,726,5,84,0,0,726,75,
  	1,0,0,0,727,729,3,20,10,0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,
  	0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,730,1,0,0,0,733,736,3,78,39,0,
  	734,736,5,84,0,0,735,730,1,0,0,0,735,734,1,0,0,0,736,77,1,0,0,0,737,745,
  	3,158,79,0,738,745,3,80,40,0,739,745,3,84,42,0,740,745,3,48,24,0,741,
  	745,3,136,68,0,742,745,3,26,13,0,743,745,3,40,20,0,744,737,1,0,0,0,744,
  	738,1,0,0,0,744,739,1,0,0,0,744,740,1,0,0,0,744,741,1,0,0,0,744,742,1,
  	0,0,0,744,743,1,0,0,0,745,79,1,0,0,0,746,747,3,284,142,0,747,748,3,86,
  	43,0,748,749,5,84,0,0,749,81,1,0,0,0,750,757,3,126,63,0,751,757,5,35,
  	0,0,752,757,5,1,0,0,753,757,5,12,0,0,754,757,5,38,0,0,755,757,5,39,0,
  	0,756,750,1,0,0,0,756,751,1,0,0,0,756,752,1,0,0,0,756,753,1,0,0,0,756,
  	754,1,0,0,0,756,755,1,0,0,0,757,83,1,0,0,0,758,760,3,82,41,0,759,758,
  	1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,765,1,0,0,
  	0,763,761,1,0,0,0,764,766,3,34,17,0,765,764,1,0,0,0,765,766,1,0,0,0,766,
  	770,1,0,0,0,767,769,3,126,63,0,768,767,1,0,0,0,769,772,1,0,0,0,770,768,
  	1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,770,1,0,0,0,773,774,3,68,
  	34,0,774,775,3,174,87,0,775,777,3,104,52,0,776,778,3,60,30,0,777,776,
  	1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,781,3,64,32,0,780,779,1,0,
  	0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,3,66,33,0,783,85,1,0,0,0,
  	784,789,3,88,44,0,785,786,5,85,0,0,786,788,3,88,44,0,787,785,1,0,0,0,
  	788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,87,1,0,0,0,791,789,
  	1,0,0,0,792,795,3,90,45,0,793,794,5,87,0,0,794,796,3,92,46,0,795,793,
  	1,0,0,0,795,796,1,0,0,0,796,89,1,0,0,0,797,799,3,174,87,0,798,800,3,60,
  	30,0,799,798,1,0,0,0,799,800,1,0,0,0,800,91,1,0,0,0,801,804,3,94,47,0,
  	802,804,3,238,119,0,803,801,1,0,0,0,803,802,1,0,0,0,804,93,1,0,0,0,805,
  	817,5,80,0,0,806,811,3,92,46,0,807,808,5,85,0,0,808,810,3,92,46,0,809,
  	807,1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,815,1,
  	0,0,0,813,811,1,0,0,0,814,816,5,85,0,0,815,814,1,0,0,0,815,816,1,0,0,
  	0,816,818,1,0,0,0,817,806,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,
  	820,5,81,0,0,820,95,1,0,0,0,821,822,3,98,49,0,822,823,5,86,0,0,823,825,
  	1,0,0,0,824,821,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,
  	0,827,829,1,0,0,0,828,826,1,0,0,0,829,830,3,98,49,0,830,97,1,0,0,0,831,
  	833,3,176,88,0,832,834,3,288,144,0,833,832,1,0,0,0,833,834,1,0,0,0,834,
  	99,1,0,0,0,835,848,3,284,142,0,836,838,3,126,63,0,837,836,1,0,0,0,838,
  	841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,839,1,
  	0,0,0,842,845,5,92,0,0,843,844,7,0,0,0,844,846,3,284,142,0,845,843,1,
  	0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,835,1,0,0,0,847,839,1,0,0,0,
  	848,101,1,0,0,0,849,854,3,118,59,0,850,851,5,85,0,0,851,853,3,118,59,
  	0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,
  	103,1,0,0,0,856,854,1,0,0,0,857,869,5,78,0,0,858,860,3,106,53,0,859,858,
  	1,0,0,0,859,860,1,0,0,0,860,870,1,0,0,0,861,864,3,106,53,0,862,863,5,
  	85,0,0,863,865,3,108,54,0,864,862,1,0,0,0,864,865,1,0,0,0,865,870,1,0,
  	0,0,866,868,3,108,54,0,867,866,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,
  	0,869,859,1,0,0,0,869,861,1,0,0,0,869,867,1,0,0,0,870,871,1,0,0,0,871,
  	872,5,79,0,0,872,105,1,0,0,0,873,879,3,284,142,0,874,875,3,174,87,0,875,
  	876,5,86,0,0,876,878,1,0,0,0,877,874,1,0,0,0,878,881,1,0,0,0,879,877,
  	1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,879,1,0,0,0,882,883,5,43,
  	0,0,883,107,1,0,0,0,884,889,3,110,55,0,885,886,5,85,0,0,886,888,3,110,
  	55,0,887,885,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,
  	890,894,1,0,0,0,891,889,1,0,0,0,892,893,5,85,0,0,893,895,3,112,56,0,894,
  	892,1,0,0,0,894,895,1,0,0,0,895,898,1,0,0,0,896,898,3,112,56,0,897,884,
  	1,0,0,0,897,896,1,0,0,0,898,109,1,0,0,0,899,901,3,24,12,0,900,899,1,0,
  	0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,
  	902,1,0,0,0,905,906,3,284,142,0,906,907,3,90,45,0,907,111,1,0,0,0,908,
  	910,3,24,12,0,909,908,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,
  	1,0,0,0,912,914,1,0,0,0,913,911,1,0,0,0,914,918,3,284,142,0,915,917,3,
  	126,63,0,916,915,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,
  	0,0,919,921,1,0,0,0,920,918,1,0,0,0,921,922,5,124,0,0,922,923,3,90,45,
  	0,923,113,1,0,0,0,924,929,3,116,58,0,925,926,5,85,0,0,926,928,3,116,58,
  	0,927,925,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,
  	115,1,0,0,0,931,929,1,0,0,0,932,934,3,24,12,0,933,932,1,0,0,0,934,937,
  	1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,935,1,0,0,
  	0,938,939,5,61,0,0,939,940,3,174,87,0,940,117,1,0,0,0,941,946,3,174,87,
  	0,942,943,5,86,0,0,943,945,3,174,87,0,944,942,1,0,0,0,945,948,1,0,0,0,
  	946,944,1,0,0,0,946,947,1,0,0,0,947,119,1,0,0,0,948,946,1,0,0,0,949,957,
  	3,122,61,0,950,957,3,124,62,0,951,957,5,74,0,0,952,957,5,75,0,0,953,957,
  	5,73,0,0,954,957,5,77,0,0,955,957,5,76,0,0,956,949,1,0,0,0,956,950,1,
  	0,0,0,956,951,1,0,0,0,956,952,1,0,0,0,956,953,1,0,0,0,956,954,1,0,0,0,
  	956,955,1,0,0,0,957,121,1,0,0,0,958,959,7,1,0,0,959,123,1,0,0,0,960,961,
  	7,2,0,0,961,125,1,0,0,0,962,963,5,123,0,0,963,970,3,118,59,0,964,967,
  	5,78,0,0,965,968,3,128,64,0,966,968,3,132,66,0,967,965,1,0,0,0,967,966,
  	1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,971,5,79,0,0,970,964,1,0,
  	0,0,970,971,1,0,0,0,971,127,1,0,0,0,972,977,3,130,65,0,973,974,5,85,0,
  	0,974,976,3,130,65,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,
  	977,978,1,0,0,0,978,129,1,0,0,0,979,977,1,0,0,0,980,981,3,174,87,0,981,
  	982,5,87,0,0,982,983,3,132,66,0,983,131,1,0,0,0,984,988,3,238,119,0,985,
  	988,3,126,63,0,986,988,3,134,67,0,987,984,1,0,0,0,987,985,1,0,0,0,987,
  	986,1,0,0,0,988,133,1,0,0,0,989,998,5,80,0,0,990,995,3,132,66,0,991,992,
  	5,85,0,0,992,994,3,132,66,0,993,991,1,0,0,0,994,997,1,0,0,0,995,993,1,
  	0,0,0,995,996,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,998,990,1,0,0,0,
  	998,999,1,0,0,0,999,1001,1,0,0,0,1000,1002,5,85,0,0,1001,1000,1,0,0,0,
  	1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1004,5,81,0,0,1004,135,1,0,0,
  	0,1005,1006,5,123,0,0,1006,1007,5,28,0,0,1007,1008,3,174,87,0,1008,1009,
  	3,138,69,0,1009,137,1,0,0,0,1010,1014,5,80,0,0,1011,1013,3,140,70,0,1012,
  	1011,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,
  	1017,1,0,0,0,1016,1014,1,0,0,0,1017,1018,5,81,0,0,1018,139,1,0,0,0,1019,
  	1021,3,20,10,0,1020,1019,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,
  	1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,1022,1,0,0,0,1025,1028,3,142,
  	71,0,1026,1028,5,84,0,0,1027,1022,1,0,0,0,1027,1026,1,0,0,0,1028,141,
  	1,0,0,0,1029,1052,3,144,72,0,1030,1052,3,146,73,0,1031,1033,3,26,13,0,
  	1032,1034,5,84,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1052,1,0,
  	0,0,1035,1037,3,48,24,0,1036,1038,5,84,0,0,1037,1036,1,0,0,0,1037,1038,
  	1,0,0,0,1038,1052,1,0,0,0,1039,1041,3,40,20,0,1040,1042,5,84,0,0,1041,
  	1040,1,0,0,0,1041,1042,1,0,0,0,1042,1052,1,0,0,0,1043,1045,3,136,68,0,
  	1044,1046,5,84,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1052,1,0,
  	0,0,1047,1049,3,158,79,0,1048,1050,5,84,0,0,1049,1048,1,0,0,0,1049,1050,
  	1,0,0,0,1050,1052,1,0,0,0,1051,1029,1,0,0,0,1051,1030,1,0,0,0,1051,1031,
  	1,0,0,0,1051,1035,1,0,0,0,1051,1039,1,0,0,0,1051,1043,1,0,0,0,1051,1047,
  	1,0,0,0,1052,143,1,0,0,0,1053,1054,3,284,142,0,1054,1055,3,86,43,0,1055,
  	1056,5,84,0,0,1056,145,1,0,0,0,1057,1058,3,284,142,0,1058,1059,3,174,
  	87,0,1059,1060,5,78,0,0,1060,1062,5,79,0,0,1061,1063,3,148,74,0,1062,
  	1061,1,0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,84,0,0,1065,
  	147,1,0,0,0,1066,1067,5,12,0,0,1067,1068,3,132,66,0,1068,149,1,0,0,0,
  	1069,1071,5,52,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,
  	0,0,1072,1073,5,51,0,0,1073,1074,3,118,59,0,1074,1075,3,152,76,0,1075,
  	151,1,0,0,0,1076,1080,5,80,0,0,1077,1079,3,154,77,0,1078,1077,1,0,0,0,
  	1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,
  	0,1082,1080,1,0,0,0,1083,1084,5,81,0,0,1084,153,1,0,0,0,1085,1089,5,53,
  	0,0,1086,1088,3,156,78,0,1087,1086,1,0,0,0,1088,1091,1,0,0,0,1089,1087,
  	1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,0,1091,1089,1,0,0,0,1092,1093,
  	3,118,59,0,1093,1094,5,84,0,0,1094,1122,1,0,0,0,1095,1096,5,54,0,0,1096,
  	1099,3,118,59,0,1097,1098,5,56,0,0,1098,1100,3,118,59,0,1099,1097,1,0,
  	0,0,1099,1100,1,0,0,0,1100,1101,1,0,0,0,1101,1102,5,84,0,0,1102,1122,
  	1,0,0,0,1103,1104,5,55,0,0,1104,1107,3,118,59,0,1105,1106,5,56,0,0,1106,
  	1108,3,118,59,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,
  	1109,1110,5,84,0,0,1110,1122,1,0,0,0,1111,1112,5,57,0,0,1112,1113,3,118,
  	59,0,1113,1114,5,84,0,0,1114,1122,1,0,0,0,1115,1116,5,58,0,0,1116,1117,
  	3,118,59,0,1117,1118,5,59,0,0,1118,1119,3,118,59,0,1119,1120,5,84,0,0,
  	1120,1122,1,0,0,0,1121,1085,1,0,0,0,1121,1095,1,0,0,0,1121,1103,1,0,0,
  	0,1121,1111,1,0,0,0,1121,1115,1,0,0,0,1122,155,1,0,0,0,1123,1124,7,3,
  	0,0,1124,157,1,0,0,0,1125,1126,5,63,0,0,1126,1128,3,174,87,0,1127,1129,
  	3,34,17,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,
  	1132,5,78,0,0,1131,1133,3,160,80,0,1132,1131,1,0,0,0,1132,1133,1,0,0,
  	0,1133,1134,1,0,0,0,1134,1136,5,79,0,0,1135,1137,3,30,15,0,1136,1135,
  	1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1139,3,164,82,0,1139,
  	159,1,0,0,0,1140,1145,3,162,81,0,1141,1142,5,85,0,0,1142,1144,3,162,81,
  	0,1143,1141,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1145,1146,1,0,
  	0,0,1146,161,1,0,0,0,1147,1145,1,0,0,0,1148,1149,3,284,142,0,1149,1150,
  	3,174,87,0,1150,163,1,0,0,0,1151,1155,5,80,0,0,1152,1154,3,166,83,0,1153,
  	1152,1,0,0,0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,
  	1158,1,0,0,0,1157,1155,1,0,0,0,1158,1159,5,81,0,0,1159,165,1,0,0,0,1160,
  	1163,3,54,27,0,1161,1163,3,72,36,0,1162,1160,1,0,0,0,1162,1161,1,0,0,
  	0,1163,167,1,0,0,0,1164,1168,5,80,0,0,1165,1167,3,170,85,0,1166,1165,
  	1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,
  	1,0,0,0,1170,1168,1,0,0,0,1171,1172,5,81,0,0,1172,169,1,0,0,0,1173,1174,
  	3,172,86,0,1174,1175,5,84,0,0,1175,1179,1,0,0,0,1176,1179,3,178,89,0,
  	1177,1179,3,180,90,0,1178,1173,1,0,0,0,1178,1176,1,0,0,0,1178,1177,1,
  	0,0,0,1179,171,1,0,0,0,1180,1182,3,24,12,0,1181,1180,1,0,0,0,1182,1185,
  	1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1194,1,0,0,0,1185,1183,
  	1,0,0,0,1186,1187,5,61,0,0,1187,1188,3,174,87,0,1188,1189,5,87,0,0,1189,
  	1190,3,238,119,0,1190,1195,1,0,0,0,1191,1192,3,284,142,0,1192,1193,3,
  	86,43,0,1193,1195,1,0,0,0,1194,1186,1,0,0,0,1194,1191,1,0,0,0,1195,173,
  	1,0,0,0,1196,1197,7,4,0,0,1197,175,1,0,0,0,1198,1199,7,5,0,0,1199,177,
  	1,0,0,0,1200,1202,3,22,11,0,1201,1200,1,0,0,0,1202,1205,1,0,0,0,1203,
  	1201,1,0,0,0,1203,1204,1,0,0,0,1204,1209,1,0,0,0,1205,1203,1,0,0,0,1206,
  	1210,3,26,13,0,1207,1210,3,48,24,0,1208,1210,3,158,79,0,1209,1206,1,0,
  	0,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,1210,179,1,0,0,0,1211,1335,3,
  	168,84,0,1212,1213,5,2,0,0,1213,1216,3,238,119,0,1214,1215,5,93,0,0,1215,
  	1217,3,238,119,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,
  	0,1218,1219,5,84,0,0,1219,1335,1,0,0,0,1220,1221,5,22,0,0,1221,1222,3,
  	202,101,0,1222,1225,3,180,90,0,1223,1224,5,15,0,0,1224,1226,3,180,90,
  	0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1335,1,0,0,0,1227,1228,5,21,
  	0,0,1228,1230,5,78,0,0,1229,1231,3,200,100,0,1230,1229,1,0,0,0,1230,1231,
  	1,0,0,0,1231,1232,1,0,0,0,1232,1234,5,84,0,0,1233,1235,3,238,119,0,1234,
  	1233,1,0,0,0,1234,1235,1,0,0,0,1235,1236,1,0,0,0,1236,1238,5,84,0,0,1237,
  	1239,3,204,102,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1240,1,0,0,
  	0,1240,1241,5,79,0,0,1241,1335,3,180,90,0,1242,1243,5,21,0,0,1243,1247,
  	5,78,0,0,1244,1246,3,24,12,0,1245,1244,1,0,0,0,1246,1249,1,0,0,0,1247,
  	1245,1,0,0,0,1247,1248,1,0,0,0,1248,1252,1,0,0,0,1249,1247,1,0,0,0,1250,
  	1253,3,284,142,0,1251,1253,5,61,0,0,1252,1250,1,0,0,0,1252,1251,1,0,0,
  	0,1253,1254,1,0,0,0,1254,1255,3,90,45,0,1255,1256,5,93,0,0,1256,1257,
  	3,238,119,0,1257,1258,5,79,0,0,1258,1259,3,180,90,0,1259,1335,1,0,0,0,
  	1260,1261,5,50,0,0,1261,1262,3,202,101,0,1262,1263,3,180,90,0,1263,1335,
  	1,0,0,0,1264,1265,5,13,0,0,1265,1266,3,180,90,0,1266,1267,5,50,0,0,1267,
  	1268,3,202,101,0,1268,1269,5,84,0,0,1269,1335,1,0,0,0,1270,1271,5,47,
  	0,0,1271,1281,3,168,84,0,1272,1274,3,184,92,0,1273,1272,1,0,0,0,1274,
  	1275,1,0,0,0,1275,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1278,1,0,0,0,1277,
  	1279,3,188,94,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1282,1,0,0,0,
  	1280,1282,3,188,94,0,1281,1273,1,0,0,0,1281,1280,1,0,0,0,1282,1335,1,
  	0,0,0,1283,1284,5,47,0,0,1284,1285,3,190,95,0,1285,1289,3,168,84,0,1286,
  	1288,3,184,92,0,1287,1286,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,
  	1289,1290,1,0,0,0,1290,1293,1,0,0,0,1291,1289,1,0,0,0,1292,1294,3,188,
  	94,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1335,1,0,0,0,1295,1296,
  	5,41,0,0,1296,1297,3,202,101,0,1297,1298,3,182,91,0,1298,1335,1,0,0,0,
  	1299,1300,5,42,0,0,1300,1301,3,202,101,0,1301,1302,3,168,84,0,1302,1335,
  	1,0,0,0,1303,1305,5,36,0,0,1304,1306,3,238,119,0,1305,1304,1,0,0,0,1305,
  	1306,1,0,0,0,1306,1307,1,0,0,0,1307,1335,5,84,0,0,1308,1309,5,44,0,0,
  	1309,1310,3,238,119,0,1310,1311,5,84,0,0,1311,1335,1,0,0,0,1312,1314,
  	5,4,0,0,1313,1315,3,174,87,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,
  	1316,1,0,0,0,1316,1335,5,84,0,0,1317,1319,5,11,0,0,1318,1320,3,174,87,
  	0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1335,5,84,
  	0,0,1322,1323,5,62,0,0,1323,1324,3,238,119,0,1324,1325,5,84,0,0,1325,
  	1335,1,0,0,0,1326,1335,5,84,0,0,1327,1328,3,238,119,0,1328,1329,5,84,
  	0,0,1329,1335,1,0,0,0,1330,1331,3,174,87,0,1331,1332,5,93,0,0,1332,1333,
  	3,180,90,0,1333,1335,1,0,0,0,1334,1211,1,0,0,0,1334,1212,1,0,0,0,1334,
  	1220,1,0,0,0,1334,1227,1,0,0,0,1334,1242,1,0,0,0,1334,1260,1,0,0,0,1334,
  	1264,1,0,0,0,1334,1270,1,0,0,0,1334,1283,1,0,0,0,1334,1295,1,0,0,0,1334,
  	1299,1,0,0,0,1334,1303,1,0,0,0,1334,1308,1,0,0,0,1334,1312,1,0,0,0,1334,
  	1317,1,0,0,0,1334,1322,1,0,0,0,1334,1326,1,0,0,0,1334,1327,1,0,0,0,1334,
  	1330,1,0,0,0,1335,181,1,0,0,0,1336,1340,5,80,0,0,1337,1339,3,196,98,0,
  	1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1340,1341,1,0,0,
  	0,1341,1346,1,0,0,0,1342,1340,1,0,0,0,1343,1345,3,198,99,0,1344,1343,
  	1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1349,
  	1,0,0,0,1348,1346,1,0,0,0,1349,1350,5,81,0,0,1350,183,1,0,0,0,1351,1352,
  	5,7,0,0,1352,1356,5,78,0,0,1353,1355,3,24,12,0,1354,1353,1,0,0,0,1355,
  	1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1359,1,0,0,0,1358,
  	1356,1,0,0,0,1359,1360,3,186,93,0,1360,1361,3,174,87,0,1361,1362,5,79,
  	0,0,1362,1363,3,168,84,0,1363,185,1,0,0,0,1364,1369,3,118,59,0,1365,1366,
  	5,107,0,0,1366,1368,3,118,59,0,1367,1365,1,0,0,0,1368,1371,1,0,0,0,1369,
  	1367,1,0,0,0,1369,1370,1,0,0,0,1370,187,1,0,0,0,1371,1369,1,0,0,0,1372,
  	1373,5,19,0,0,1373,1374,3,168,84,0,1374,189,1,0,0,0,1375,1376,5,78,0,
  	0,1376,1378,3,192,96,0,1377,1379,5,84,0,0,1378,1377,1,0,0,0,1378,1379,
  	1,0,0,0,1379,1380,1,0,0,0,1380,1381,5,79,0,0,1381,191,1,0,0,0,1382,1387,
  	3,194,97,0,1383,1384,5,84,0,0,1384,1386,3,194,97,0,1385,1383,1,0,0,0,
  	1386,1389,1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,193,1,0,0,
  	0,1389,1387,1,0,0,0,1390,1392,3,24,12,0,1391,1390,1,0,0,0,1392,1395,1,
  	0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1401,1,0,0,0,1395,1393,
  	1,0,0,0,1396,1397,3,96,48,0,1397,1398,3,90,45,0,1398,1402,1,0,0,0,1399,
  	1400,5,61,0,0,1400,1402,3,174,87,0,1401,1396,1,0,0,0,1401,1399,1,0,0,
  	0,1402,1403,1,0,0,0,1403,1404,5,87,0,0,1404,1405,3,238,119,0,1405,1408,
  	1,0,0,0,1406,1408,3,118,59,0,1407,1393,1,0,0,0,1407,1406,1,0,0,0,1408,
  	195,1,0,0,0,1409,1411,3,198,99,0,1410,1409,1,0,0,0,1411,1412,1,0,0,0,
  	1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,0,1414,1416,3,170,
  	85,0,1415,1414,1,0,0,0,1416,1417,1,0,0,0,1417,1415,1,0,0,0,1417,1418,
  	1,0,0,0,1418,197,1,0,0,0,1419,1424,5,6,0,0,1420,1425,3,238,119,0,1421,
  	1422,3,284,142,0,1422,1423,3,174,87,0,1423,1425,1,0,0,0,1424,1420,1,0,
  	0,0,1424,1421,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,93,0,0,1427,1431,
  	1,0,0,0,1428,1429,5,12,0,0,1429,1431,5,93,0,0,1430,1419,1,0,0,0,1430,
  	1428,1,0,0,0,1431,199,1,0,0,0,1432,1435,3,172,86,0,1433,1435,3,204,102,
  	0,1434,1432,1,0,0,0,1434,1433,1,0,0,0,1435,201,1,0,0,0,1436,1437,5,78,
  	0,0,1437,1438,3,238,119,0,1438,1439,5,79,0,0,1439,203,1,0,0,0,1440,1445,
  	3,238,119,0,1441,1442,5,85,0,0,1442,1444,3,238,119,0,1443,1441,1,0,0,
  	0,1444,1447,1,0,0,0,1445,1443,1,0,0,0,1445,1446,1,0,0,0,1446,205,1,0,
  	0,0,1447,1445,1,0,0,0,1448,1452,3,174,87,0,1449,1452,5,43,0,0,1450,1452,
  	5,40,0,0,1451,1448,1,0,0,0,1451,1449,1,0,0,0,1451,1450,1,0,0,0,1452,1453,
  	1,0,0,0,1453,1454,3,294,147,0,1454,207,1,0,0,0,1455,1456,6,104,-1,0,1456,
  	1457,3,250,125,0,1457,1462,1,0,0,0,1458,1459,10,2,0,0,1459,1461,7,6,0,
  	0,1460,1458,1,0,0,0,1461,1464,1,0,0,0,1462,1460,1,0,0,0,1462,1463,1,0,
  	0,0,1463,209,1,0,0,0,1464,1462,1,0,0,0,1465,1466,7,7,0,0,1466,1469,3,
  	210,105,0,1467,1469,3,208,104,0,1468,1465,1,0,0,0,1468,1467,1,0,0,0,1469,
  	211,1,0,0,0,1470,1474,5,78,0,0,1471,1473,3,126,63,0,1472,1471,1,0,0,0,
  	1473,1476,1,0,0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,
  	0,1476,1474,1,0,0,0,1477,1482,3,284,142,0,1478,1479,5,106,0,0,1479,1481,
  	3,284,142,0,1480,1478,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,1482,
  	1483,1,0,0,0,1483,1485,1,0,0,0,1484,1482,1,0,0,0,1485,1486,5,79,0,0,1486,
  	1487,3,212,106,0,1487,1492,1,0,0,0,1488,1489,5,31,0,0,1489,1492,3,260,
  	130,0,1490,1492,3,210,105,0,1491,1470,1,0,0,0,1491,1488,1,0,0,0,1491,
  	1490,1,0,0,0,1492,213,1,0,0,0,1493,1494,6,107,-1,0,1494,1495,3,212,106,
  	0,1495,1501,1,0,0,0,1496,1497,10,2,0,0,1497,1498,7,8,0,0,1498,1500,3,
  	212,106,0,1499,1496,1,0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,
  	1502,1,0,0,0,1502,215,1,0,0,0,1503,1501,1,0,0,0,1504,1505,6,108,-1,0,
  	1505,1506,3,214,107,0,1506,1512,1,0,0,0,1507,1508,10,2,0,0,1508,1509,
  	7,9,0,0,1509,1511,3,214,107,0,1510,1507,1,0,0,0,1511,1514,1,0,0,0,1512,
  	1510,1,0,0,0,1512,1513,1,0,0,0,1513,217,1,0,0,0,1514,1512,1,0,0,0,1515,
  	1516,6,109,-1,0,1516,1517,3,216,108,0,1517,1531,1,0,0,0,1518,1526,10,
  	2,0,0,1519,1520,5,89,0,0,1520,1527,5,89,0,0,1521,1522,5,88,0,0,1522,1523,
  	5,88,0,0,1523,1527,5,88,0,0,1524,1525,5,88,0,0,1525,1527,5,88,0,0,1526,
  	1519,1,0,0,0,1526,1521,1,0,0,0,1526,1524,1,0,0,0,1527,1528,1,0,0,0,1528,
  	1530,3,216,108,0,1529,1518,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,
  	0,1531,1532,1,0,0,0,1532,219,1,0,0,0,1533,1531,1,0,0,0,1534,1535,6,110,
  	-1,0,1535,1536,3,218,109,0,1536,1548,1,0,0,0,1537,1538,10,3,0,0,1538,
  	1539,7,10,0,0,1539,1547,3,218,109,0,1540,1541,10,2,0,0,1541,1544,5,26,
  	0,0,1542,1545,3,284,142,0,1543,1545,3,240,120,0,1544,1542,1,0,0,0,1544,
  	1543,1,0,0,0,1545,1547,1,0,0,0,1546,1537,1,0,0,0,1546,1540,1,0,0,0,1547,
  	1550,1,0,0,0,1548,1546,1,0,0,0,1548,1549,1,0,0,0,1549,221,1,0,0,0,1550,
  	1548,1,0,0,0,1551,1552,6,111,-1,0,1552,1553,3,220,110,0,1553,1559,1,0,
  	0,0,1554,1555,10,2,0,0,1555,1556,7,11,0,0,1556,1558,3,220,110,0,1557,
  	1554,1,0,0,0,1558,1561,1,0,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,
  	223,1,0,0,0,1561,1559,1,0,0,0,1562,1563,6,112,-1,0,1563,1564,3,222,111,
  	0,1564,1570,1,0,0,0,1565,1566,10,2,0,0,1566,1567,5,106,0,0,1567,1569,
  	3,222,111,0,1568,1565,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,
  	1571,1,0,0,0,1571,225,1,0,0,0,1572,1570,1,0,0,0,1573,1574,6,113,-1,0,
  	1574,1575,3,224,112,0,1575,1581,1,0,0,0,1576,1577,10,2,0,0,1577,1578,
  	5,108,0,0,1578,1580,3,224,112,0,1579,1576,1,0,0,0,1580,1583,1,0,0,0,1581,
  	1579,1,0,0,0,1581,1582,1,0,0,0,1582,227,1,0,0,0,1583,1581,1,0,0,0,1584,
  	1585,6,114,-1,0,1585,1586,3,226,113,0,1586,1592,1,0,0,0,1587,1588,10,
  	2,0,0,1588,1589,5,107,0,0,1589,1591,3,226,113,0,1590,1587,1,0,0,0,1591,
  	1594,1,0,0,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,229,1,0,0,0,1594,
  	1592,1,0,0,0,1595,1596,6,115,-1,0,1596,1597,3,228,114,0,1597,1603,1,0,
  	0,0,1598,1599,10,2,0,0,1599,1600,5,98,0,0,1600,1602,3,228,114,0,1601,
  	1598,1,0,0,0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,
  	231,1,0,0,0,1605,1603,1,0,0,0,1606,1607,6,116,-1,0,1607,1608,3,230,115,
  	0,1608,1614,1,0,0,0,1609,1610,10,2,0,0,1610,1611,5,99,0,0,1611,1613,3,
  	230,115,0,1612,1609,1,0,0,0,1613,1616,1,0,0,0,1614,1612,1,0,0,0,1614,
  	1615,1,0,0,0,1615,233,1,0,0,0,1616,1614,1,0,0,0,1617,1618,3,232,116,0,
  	1618,1619,5,92,0,0,1619,1620,3,238,119,0,1620,1621,5,93,0,0,1621,1622,
  	3,234,117,0,1622,1631,1,0,0,0,1623,1624,3,232,116,0,1624,1625,5,92,0,
  	0,1625,1626,3,238,119,0,1626,1627,5,93,0,0,1627,1628,3,242,121,0,1628,
  	1631,1,0,0,0,1629,1631,3,232,116,0,1630,1617,1,0,0,0,1630,1623,1,0,0,
  	0,1630,1629,1,0,0,0,1631,235,1,0,0,0,1632,1633,3,234,117,0,1633,1634,
  	7,12,0,0,1634,1635,3,238,119,0,1635,1638,1,0,0,0,1636,1638,3,234,117,
  	0,1637,1632,1,0,0,0,1637,1636,1,0,0,0,1638,237,1,0,0,0,1639,1642,3,236,
  	118,0,1640,1642,3,242,121,0,1641,1639,1,0,0,0,1641,1640,1,0,0,0,1642,
  	239,1,0,0,0,1643,1645,3,24,12,0,1644,1643,1,0,0,0,1645,1648,1,0,0,0,1646,
  	1644,1,0,0,0,1646,1647,1,0,0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,
  	1653,3,284,142,0,1650,1652,3,126,63,0,1651,1650,1,0,0,0,1652,1655,1,0,
  	0,0,1653,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1656,1,0,0,0,1655,1653,1,
  	0,0,0,1656,1657,3,174,87,0,1657,241,1,0,0,0,1658,1659,3,244,122,0,1659,
  	1660,5,121,0,0,1660,1661,3,246,123,0,1661,243,1,0,0,0,1662,1685,3,174,
  	87,0,1663,1665,5,78,0,0,1664,1666,3,108,54,0,1665,1664,1,0,0,0,1665,1666,
  	1,0,0,0,1666,1667,1,0,0,0,1667,1685,5,79,0,0,1668,1669,5,78,0,0,1669,
  	1674,3,174,87,0,1670,1671,5,85,0,0,1671,1673,3,174,87,0,1672,1670,1,0,
  	0,0,1673,1676,1,0,0,0,1674,1672,1,0,0,0,1674,1675,1,0,0,0,1675,1677,1,
  	0,0,0,1676,1674,1,0,0,0,1677,1678,5,79,0,0,1678,1685,1,0,0,0,1679,1681,
  	5,78,0,0,1680,1682,3,114,57,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,
  	1683,1,0,0,0,1683,1685,5,79,0,0,1684,1662,1,0,0,0,1684,1663,1,0,0,0,1684,
  	1668,1,0,0,0,1684,1679,1,0,0,0,1685,245,1,0,0,0,1686,1689,3,238,119,0,
  	1687,1689,3,168,84,0,1688,1686,1,0,0,0,1688,1687,1,0,0,0,1689,247,1,0,
  	0,0,1690,1691,6,124,-1,0,1691,1692,5,78,0,0,1692,1693,3,238,119,0,1693,
  	1694,5,79,0,0,1694,1727,1,0,0,0,1695,1727,5,43,0,0,1696,1727,5,40,0,0,
  	1697,1727,3,120,60,0,1698,1727,3,174,87,0,1699,1700,3,68,34,0,1700,1701,
  	5,86,0,0,1701,1702,5,9,0,0,1702,1727,1,0,0,0,1703,1707,3,280,140,0,1704,
  	1708,3,292,146,0,1705,1706,5,43,0,0,1706,1708,3,294,147,0,1707,1704,1,
  	0,0,0,1707,1705,1,0,0,0,1708,1727,1,0,0,0,1709,1727,3,206,103,0,1710,
  	1711,3,284,142,0,1711,1717,5,122,0,0,1712,1714,3,288,144,0,1713,1712,
  	1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1718,3,174,87,0,1716,
  	1718,5,31,0,0,1717,1713,1,0,0,0,1717,1716,1,0,0,0,1718,1727,1,0,0,0,1719,
  	1720,3,258,129,0,1720,1722,5,122,0,0,1721,1723,3,288,144,0,1722,1721,
  	1,0,0,0,1722,1723,1,0,0,0,1723,1724,1,0,0,0,1724,1725,5,31,0,0,1725,1727,
  	1,0,0,0,1726,1690,1,0,0,0,1726,1695,1,0,0,0,1726,1696,1,0,0,0,1726,1697,
  	1,0,0,0,1726,1698,1,0,0,0,1726,1699,1,0,0,0,1726,1703,1,0,0,0,1726,1709,
  	1,0,0,0,1726,1710,1,0,0,0,1726,1719,1,0,0,0,1727,1755,1,0,0,0,1728,1729,
  	10,6,0,0,1729,1730,5,82,0,0,1730,1731,3,238,119,0,1731,1732,5,83,0,0,
  	1732,1754,1,0,0,0,1733,1734,10,5,0,0,1734,1745,5,86,0,0,1735,1746,3,174,
  	87,0,1736,1746,3,206,103,0,1737,1746,5,43,0,0,1738,1740,5,31,0,0,1739,
  	1741,3,280,140,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1742,1,0,0,
  	0,1742,1746,3,268,134,0,1743,1746,3,290,145,0,1744,1746,3,274,137,0,1745,
  	1735,1,0,0,0,1745,1736,1,0,0,0,1745,1737,1,0,0,0,1745,1738,1,0,0,0,1745,
  	1743,1,0,0,0,1745,1744,1,0,0,0,1746,1754,1,0,0,0,1747,1748,10,3,0,0,1748,
  	1750,5,122,0,0,1749,1751,3,288,144,0,1750,1749,1,0,0,0,1750,1751,1,0,
  	0,0,1751,1752,1,0,0,0,1752,1754,3,174,87,0,1753,1728,1,0,0,0,1753,1733,
  	1,0,0,0,1753,1747,1,0,0,0,1754,1757,1,0,0,0,1755,1753,1,0,0,0,1755,1756,
  	1,0,0,0,1756,249,1,0,0,0,1757,1755,1,0,0,0,1758,1759,5,41,0,0,1759,1760,
  	3,202,101,0,1760,1764,5,80,0,0,1761,1763,3,252,126,0,1762,1761,1,0,0,
  	0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1767,1,0,
  	0,0,1766,1764,1,0,0,0,1767,1768,5,81,0,0,1768,1771,1,0,0,0,1769,1771,
  	3,248,124,0,1770,1758,1,0,0,0,1770,1769,1,0,0,0,1771,251,1,0,0,0,1772,
  	1775,5,6,0,0,1773,1776,3,204,102,0,1774,1776,3,254,127,0,1775,1773,1,
  	0,0,0,1775,1774,1,0,0,0,1776,1777,1,0,0,0,1777,1778,7,13,0,0,1778,1779,
  	3,256,128,0,1779,1784,1,0,0,0,1780,1781,5,12,0,0,1781,1782,7,13,0,0,1782,
  	1784,3,256,128,0,1783,1772,1,0,0,0,1783,1780,1,0,0,0,1784,253,1,0,0,0,
  	1785,1786,6,127,-1,0,1786,1787,5,78,0,0,1787,1788,3,254,127,0,1788,1789,
  	5,79,0,0,1789,1812,1,0,0,0,1790,1792,3,24,12,0,1791,1790,1,0,0,0,1792,
  	1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,1796,1,0,0,0,1795,
  	1793,1,0,0,0,1796,1800,3,284,142,0,1797,1799,3,126,63,0,1798,1797,1,0,
  	0,0,1799,1802,1,0,0,0,1800,1798,1,0,0,0,1800,1801,1,0,0,0,1801,1803,1,
  	0,0,0,1802,1800,1,0,0,0,1803,1808,3,174,87,0,1804,1805,5,98,0,0,1805,
  	1807,3,238,119,0,1806,1804,1,0,0,0,1807,1810,1,0,0,0,1808,1806,1,0,0,
  	0,1808,1809,1,0,0,0,1809,1812,1,0,0,0,1810,1808,1,0,0,0,1811,1785,1,0,
  	0,0,1811,1793,1,0,0,0,1812,1818,1,0,0,0,1813,1814,10,1,0,0,1814,1815,
  	5,98,0,0,1815,1817,3,238,119,0,1816,1813,1,0,0,0,1817,1820,1,0,0,0,1818,
  	1816,1,0,0,0,1818,1819,1,0,0,0,1819,255,1,0,0,0,1820,1818,1,0,0,0,1821,
  	1829,3,168,84,0,1822,1824,3,170,85,0,1823,1822,1,0,0,0,1824,1827,1,0,
  	0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1829,1,0,0,0,1827,1825,1,
  	0,0,0,1828,1821,1,0,0,0,1828,1825,1,0,0,0,1829,257,1,0,0,0,1830,1831,
  	3,96,48,0,1831,1832,5,86,0,0,1832,1834,1,0,0,0,1833,1830,1,0,0,0,1833,
  	1834,1,0,0,0,1834,1838,1,0,0,0,1835,1837,3,126,63,0,1836,1835,1,0,0,0,
  	1837,1840,1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,
  	0,1840,1838,1,0,0,0,1841,1843,3,174,87,0,1842,1844,3,288,144,0,1843,1842,
  	1,0,0,0,1843,1844,1,0,0,0,1844,259,1,0,0,0,1845,1848,3,262,131,0,1846,
  	1848,3,272,136,0,1847,1845,1,0,0,0,1847,1846,1,0,0,0,1848,261,1,0,0,0,
  	1849,1851,3,280,140,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,1,
  	0,0,0,1852,1853,3,264,132,0,1853,1855,3,294,147,0,1854,1856,3,50,25,0,
  	1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,263,1,0,0,0,1857,1862,3,266,
  	133,0,1858,1859,5,86,0,0,1859,1861,3,266,133,0,1860,1858,1,0,0,0,1861,
  	1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,1867,1,0,0,0,1864,
  	1862,1,0,0,0,1865,1867,3,286,143,0,1866,1857,1,0,0,0,1866,1865,1,0,0,
  	0,1867,265,1,0,0,0,1868,1870,3,174,87,0,1869,1871,3,276,138,0,1870,1869,
  	1,0,0,0,1870,1871,1,0,0,0,1871,267,1,0,0,0,1872,1874,3,174,87,0,1873,
  	1875,3,278,139,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,
  	0,1876,1878,3,294,147,0,1877,1879,3,50,25,0,1878,1877,1,0,0,0,1878,1879,
  	1,0,0,0,1879,269,1,0,0,0,1880,1881,5,82,0,0,1881,1882,3,238,119,0,1882,
  	1883,5,83,0,0,1883,271,1,0,0,0,1884,1885,3,264,132,0,1885,1886,3,60,30,
  	0,1886,1887,3,94,47,0,1887,1898,1,0,0,0,1888,1890,3,264,132,0,1889,1891,
  	3,270,135,0,1890,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1890,1,0,0,0,1892,
  	1893,1,0,0,0,1893,1895,1,0,0,0,1894,1896,3,60,30,0,1895,1894,1,0,0,0,
  	1895,1896,1,0,0,0,1896,1898,1,0,0,0,1897,1884,1,0,0,0,1897,1888,1,0,0,
  	0,1898,273,1,0,0,0,1899,1900,3,280,140,0,1900,1901,3,292,146,0,1901,275,
  	1,0,0,0,1902,1903,5,89,0,0,1903,1906,5,88,0,0,1904,1906,3,288,144,0,1905,
  	1902,1,0,0,0,1905,1904,1,0,0,0,1906,277,1,0,0,0,1907,1908,5,89,0,0,1908,
  	1911,5,88,0,0,1909,1911,3,280,140,0,1910,1907,1,0,0,0,1910,1909,1,0,0,
  	0,1911,279,1,0,0,0,1912,1913,5,89,0,0,1913,1914,3,282,141,0,1914,1915,
  	5,88,0,0,1915,281,1,0,0,0,1916,1921,3,284,142,0,1917,1918,5,85,0,0,1918,
  	1920,3,284,142,0,1919,1917,1,0,0,0,1920,1923,1,0,0,0,1921,1919,1,0,0,
  	0,1921,1922,1,0,0,0,1922,283,1,0,0,0,1923,1921,1,0,0,0,1924,1926,3,126,
  	63,0,1925,1924,1,0,0,0,1926,1929,1,0,0,0,1927,1925,1,0,0,0,1927,1928,
  	1,0,0,0,1928,1932,1,0,0,0,1929,1927,1,0,0,0,1930,1933,3,96,48,0,1931,
  	1933,3,286,143,0,1932,1930,1,0,0,0,1932,1931,1,0,0,0,1933,1935,1,0,0,
  	0,1934,1936,3,60,30,0,1935,1934,1,0,0,0,1935,1936,1,0,0,0,1936,285,1,
  	0,0,0,1937,1938,7,14,0,0,1938,287,1,0,0,0,1939,1940,5,89,0,0,1940,1945,
  	3,100,50,0,1941,1942,5,85,0,0,1942,1944,3,100,50,0,1943,1941,1,0,0,0,
  	1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,1948,1,0,0,
  	0,1947,1945,1,0,0,0,1948,1949,5,88,0,0,1949,289,1,0,0,0,1950,1951,5,40,
  	0,0,1951,1962,3,294,147,0,1952,1953,5,40,0,0,1953,1955,5,86,0,0,1954,
  	1956,3,288,144,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1957,1,0,0,
  	0,1957,1959,3,174,87,0,1958,1960,3,294,147,0,1959,1958,1,0,0,0,1959,1960,
  	1,0,0,0,1960,1962,1,0,0,0,1961,1950,1,0,0,0,1961,1952,1,0,0,0,1962,291,
  	1,0,0,0,1963,1968,3,290,145,0,1964,1965,3,174,87,0,1965,1966,3,294,147,
  	0,1966,1968,1,0,0,0,1967,1963,1,0,0,0,1967,1964,1,0,0,0,1968,293,1,0,
  	0,0,1969,1971,5,78,0,0,1970,1972,3,204,102,0,1971,1970,1,0,0,0,1971,1972,
  	1,0,0,0,1972,1973,1,0,0,0,1973,1974,5,79,0,0,1974,295,1,0,0,0,243,302,
  	316,325,335,343,355,364,373,382,391,400,408,420,424,426,431,433,438,440,
  	448,457,462,469,477,484,496,500,505,508,511,514,533,541,547,552,560,566,
  	570,573,576,585,591,596,599,605,611,614,617,625,634,641,647,651,661,664,
  	670,673,681,687,698,702,705,710,717,730,735,744,756,761,765,770,777,780,
  	789,795,799,803,811,815,817,826,833,839,845,847,854,859,864,867,869,879,
  	889,894,897,902,911,918,929,935,946,956,967,970,977,987,995,998,1001,
  	1014,1022,1027,1033,1037,1041,1045,1049,1051,1062,1070,1080,1089,1099,
  	1107,1121,1128,1132,1136,1145,1155,1162,1168,1178,1183,1194,1203,1209,
  	1216,1225,1230,1234,1238,1247,1252,1275,1278,1281,1289,1293,1305,1314,
  	1319,1334,1340,1346,1356,1369,1378,1387,1393,1401,1407,1412,1417,1424,
  	1430,1434,1445,1451,1462,1468,1474,1482,1491,1501,1512,1526,1531,1544,
  	1546,1548,1559,1570,1581,1592,1603,1614,1630,1637,1641,1646,1653,1665,
  	1674,1681,1684,1688,1707,1713,1717,1722,1726,1740,1745,1750,1753,1755,
  	1764,1770,1775,1783,1793,1800,1808,1811,1818,1825,1828,1833,1838,1843,
  	1847,1850,1855,1862,1866,1870,1874,1878,1892,1895,1897,1905,1910,1921,
  	1927,1932,1935,1945,1955,1959,1961,1967,1971
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  javaparserParserStaticData = std::move(staticData);
}

}

JavaParser::JavaParser(TokenStream *input) : JavaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

JavaParser::JavaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  JavaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *javaparserParserStaticData->atn, javaparserParserStaticData->decisionToDFA, javaparserParserStaticData->sharedContextCache, options);
}

JavaParser::~JavaParser() {
  delete _interpreter;
}

const atn::ATN& JavaParser::getATN() const {
  return *javaparserParserStaticData->atn;
}

std::string JavaParser::getGrammarFileName() const {
  return "JavaParser.g4";
}

const std::vector<std::string>& JavaParser::getRuleNames() const {
  return javaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& JavaParser::getVocabulary() const {
  return javaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView JavaParser::getSerializedATN() const {
  return javaparserParserStaticData->serializedATN;
}


//----------------- CompilationUnitContext ------------------------------------------------------------------

JavaParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::OrdinaryCompilationUnitContext* JavaParser::CompilationUnitContext::ordinaryCompilationUnit() {
  return getRuleContext<JavaParser::OrdinaryCompilationUnitContext>(0);
}

tree::TerminalNode* JavaParser::CompilationUnitContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ModularCompilationUnitContext* JavaParser::CompilationUnitContext::modularCompilationUnit() {
  return getRuleContext<JavaParser::ModularCompilationUnitContext>(0);
}


size_t JavaParser::CompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleCompilationUnit;
}


std::any JavaParser::CompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CompilationUnitContext* JavaParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaParser::RuleCompilationUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(302);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(296);
      ordinaryCompilationUnit();
      setState(297);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(299);
      modularCompilationUnit();
      setState(300);
      match(JavaParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationStartContext ------------------------------------------------------------------

JavaParser::DeclarationStartContext::DeclarationStartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageDeclarationContext* JavaParser::DeclarationStartContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::DeclarationStartContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ImportDeclarationContext* JavaParser::DeclarationStartContext::importDeclaration() {
  return getRuleContext<JavaParser::ImportDeclarationContext>(0);
}

JavaParser::ModuleDeclarationContext* JavaParser::DeclarationStartContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

JavaParser::FieldDeclarationContext* JavaParser::DeclarationStartContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::DeclarationStartContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::DeclarationStartContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

JavaParser::MethodDeclarationContext* JavaParser::DeclarationStartContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::DeclarationStartContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::BlockContext* JavaParser::DeclarationStartContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::DeclarationStartContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::DeclarationStartContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}

JavaParser::CompactConstructorDeclarationContext* JavaParser::DeclarationStartContext::compactConstructorDeclaration() {
  return getRuleContext<JavaParser::CompactConstructorDeclarationContext>(0);
}

JavaParser::AnnotationMethodDeclarationContext* JavaParser::DeclarationStartContext::annotationMethodDeclaration() {
  return getRuleContext<JavaParser::AnnotationMethodDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::DeclarationStartContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::DeclarationStartContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::DeclarationStartContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::DeclarationStartContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::DeclarationStartContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::DeclarationStartContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::DeclarationStartContext::getRuleIndex() const {
  return JavaParser::RuleDeclarationStart;
}


std::any JavaParser::DeclarationStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDeclarationStart(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DeclarationStartContext* JavaParser::declarationStart() {
  DeclarationStartContext *_localctx = _tracker.createInstance<DeclarationStartContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaParser::RuleDeclarationStart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(408);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(304);
      packageDeclaration();
      setState(305);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(307);
      importDeclaration();
      setState(308);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(310);
      moduleDeclaration();
      setState(311);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(316);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(313);
          modifier(); 
        }
        setState(318);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      }
      setState(319);
      fieldDeclaration();
      setState(320);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(325);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(322);
          modifier(); 
        }
        setState(327);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
      }
      setState(328);
      methodDeclaration();
      setState(329);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(331);
      interfaceMethodDeclaration();
      setState(332);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::STATIC) {
        setState(334);
        match(JavaParser::STATIC);
      }
      setState(337);
      block();
      setState(338);
      match(JavaParser::EOF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(343);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(340);
          modifier(); 
        }
        setState(345);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
      }
      setState(346);
      constructorDeclaration();
      setState(347);
      match(JavaParser::EOF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(349);
      compactConstructorDeclaration();
      setState(350);
      match(JavaParser::EOF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(355);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(352);
          modifier(); 
        }
        setState(357);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      }
      setState(358);
      annotationMethodDeclaration();
      setState(359);
      match(JavaParser::EOF);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(364);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 638602581377026) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 576460752303423493) != 0)) {
        setState(361);
        modifier();
        setState(366);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(367);
      interfaceDeclaration();
      setState(368);
      match(JavaParser::EOF);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(373);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(370);
          modifier(); 
        }
        setState(375);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
      }
      setState(376);
      annotationTypeDeclaration();
      setState(377);
      match(JavaParser::EOF);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(382);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 638602581377026) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 576460752303423493) != 0)) {
        setState(379);
        modifier();
        setState(384);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(385);
      classDeclaration();
      setState(386);
      match(JavaParser::EOF);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(391);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 638602581377026) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 576460752303423493) != 0)) {
        setState(388);
        modifier();
        setState(393);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(394);
      enumDeclaration();
      setState(395);
      match(JavaParser::EOF);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(400);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 638602581377026) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 576460752303423493) != 0)) {
        setState(397);
        modifier();
        setState(402);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(403);
      recordDeclaration();
      setState(404);
      match(JavaParser::EOF);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(406);
      match(JavaParser::SEMI);
      setState(407);
      match(JavaParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementStartContext ------------------------------------------------------------------

JavaParser::StatementStartContext::StatementStartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockStatementContext* JavaParser::StatementStartContext::blockStatement() {
  return getRuleContext<JavaParser::BlockStatementContext>(0);
}

tree::TerminalNode* JavaParser::StatementStartContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::StatementStartContext::getRuleIndex() const {
  return JavaParser::RuleStatementStart;
}


std::any JavaParser::StatementStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementStart(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::StatementStartContext* JavaParser::statementStart() {
  StatementStartContext *_localctx = _tracker.createInstance<StatementStartContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaParser::RuleStatementStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(410);
    blockStatement();
    setState(411);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStartContext ------------------------------------------------------------------

JavaParser::ExpressionStartContext::ExpressionStartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ExpressionStartContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionStartContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ExpressionStartContext::getRuleIndex() const {
  return JavaParser::RuleExpressionStart;
}


std::any JavaParser::ExpressionStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionStart(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExpressionStartContext* JavaParser::expressionStart() {
  ExpressionStartContext *_localctx = _tracker.createInstance<ExpressionStartContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaParser::RuleExpressionStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(413);
    expression();
    setState(414);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveStartContext ------------------------------------------------------------------

JavaParser::DirectiveStartContext::DirectiveStartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleDirectiveContext* JavaParser::DirectiveStartContext::moduleDirective() {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(0);
}

tree::TerminalNode* JavaParser::DirectiveStartContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::DirectiveStartContext::getRuleIndex() const {
  return JavaParser::RuleDirectiveStart;
}


std::any JavaParser::DirectiveStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDirectiveStart(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DirectiveStartContext* JavaParser::directiveStart() {
  DirectiveStartContext *_localctx = _tracker.createInstance<DirectiveStartContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaParser::RuleDirectiveStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(416);
    moduleDirective();
    setState(417);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinaryCompilationUnitContext ------------------------------------------------------------------

JavaParser::OrdinaryCompilationUnitContext::OrdinaryCompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageDeclarationContext* JavaParser::OrdinaryCompilationUnitContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::OrdinaryCompilationUnitContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::OrdinaryCompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::OrdinaryCompilationUnitContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::OrdinaryCompilationUnitContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}

std::vector<JavaParser::TypeDeclarationContext *> JavaParser::OrdinaryCompilationUnitContext::typeDeclaration() {
  return getRuleContexts<JavaParser::TypeDeclarationContext>();
}

JavaParser::TypeDeclarationContext* JavaParser::OrdinaryCompilationUnitContext::typeDeclaration(size_t i) {
  return getRuleContext<JavaParser::TypeDeclarationContext>(i);
}


size_t JavaParser::OrdinaryCompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleOrdinaryCompilationUnit;
}


std::any JavaParser::OrdinaryCompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitOrdinaryCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::OrdinaryCompilationUnitContext* JavaParser::ordinaryCompilationUnit() {
  OrdinaryCompilationUnitContext *_localctx = _tracker.createInstance<OrdinaryCompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaParser::RuleOrdinaryCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(420);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(419);
      packageDeclaration();
      break;
    }

    default:
      break;
    }
    setState(426);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(424);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::IMPORT: {
            setState(422);
            importDeclaration();
            break;
          }

          case JavaParser::SEMI: {
            setState(423);
            match(JavaParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(428);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    }
    setState(433);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9223371151822749182) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 576460752304472069) != 0)) {
      setState(431);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::ABSTRACT:
        case JavaParser::CLASS:
        case JavaParser::ENUM:
        case JavaParser::FINAL:
        case JavaParser::INTERFACE:
        case JavaParser::PRIVATE:
        case JavaParser::PROTECTED:
        case JavaParser::PUBLIC:
        case JavaParser::STATIC:
        case JavaParser::STRICTFP:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::NON_SEALED:
        case JavaParser::AT: {
          setState(429);
          typeDeclaration();
          break;
        }

        case JavaParser::SEMI: {
          setState(430);
          match(JavaParser::SEMI);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(435);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModularCompilationUnitContext ------------------------------------------------------------------

JavaParser::ModularCompilationUnitContext::ModularCompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleDeclarationContext* JavaParser::ModularCompilationUnitContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::ModularCompilationUnitContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::ModularCompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ModularCompilationUnitContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ModularCompilationUnitContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}


size_t JavaParser::ModularCompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleModularCompilationUnit;
}


std::any JavaParser::ModularCompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModularCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModularCompilationUnitContext* JavaParser::modularCompilationUnit() {
  ModularCompilationUnitContext *_localctx = _tracker.createInstance<ModularCompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaParser::RuleModularCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(440);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::IMPORT

    || _la == JavaParser::SEMI) {
      setState(438);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::IMPORT: {
          setState(436);
          importDeclaration();
          break;
        }

        case JavaParser::SEMI: {
          setState(437);
          match(JavaParser::SEMI);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(442);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(443);
    moduleDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

JavaParser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::PACKAGE() {
  return getToken(JavaParser::PACKAGE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::PackageDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PackageDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PackageDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PackageDeclarationContext::getRuleIndex() const {
  return JavaParser::RulePackageDeclaration;
}


std::any JavaParser::PackageDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPackageDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PackageDeclarationContext* JavaParser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaParser::RulePackageDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(445);
      annotation();
      setState(450);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(451);
    match(JavaParser::PACKAGE);
    setState(452);
    qualifiedName();
    setState(453);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

JavaParser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::IMPORT() {
  return getToken(JavaParser::IMPORT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ImportDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}


size_t JavaParser::ImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleImportDeclaration;
}


std::any JavaParser::ImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ImportDeclarationContext* JavaParser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaParser::RuleImportDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(455);
    match(JavaParser::IMPORT);
    setState(457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::STATIC) {
      setState(456);
      match(JavaParser::STATIC);
    }
    setState(459);
    qualifiedName();
    setState(462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DOT) {
      setState(460);
      match(JavaParser::DOT);
      setState(461);
      match(JavaParser::MUL);
    }
    setState(464);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

JavaParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::TypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::TypeDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::TypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::TypeDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::TypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::TypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::TypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}


size_t JavaParser::TypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleTypeDeclaration;
}


std::any JavaParser::TypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeDeclarationContext* JavaParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaParser::RuleTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(469);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(466);
        classOrInterfaceModifier(); 
      }
      setState(471);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
    setState(477);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CLASS: {
        setState(472);
        classDeclaration();
        break;
      }

      case JavaParser::ENUM: {
        setState(473);
        enumDeclaration();
        break;
      }

      case JavaParser::INTERFACE: {
        setState(474);
        interfaceDeclaration();
        break;
      }

      case JavaParser::AT: {
        setState(475);
        annotationTypeDeclaration();
        break;
      }

      case JavaParser::RECORD: {
        setState(476);
        recordDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModifierContext ------------------------------------------------------------------

JavaParser::ModifierContext::ModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::ModifierContext::classOrInterfaceModifier() {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(0);
}

tree::TerminalNode* JavaParser::ModifierContext::NATIVE() {
  return getToken(JavaParser::NATIVE, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::TRANSIENT() {
  return getToken(JavaParser::TRANSIENT, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::VOLATILE() {
  return getToken(JavaParser::VOLATILE, 0);
}


size_t JavaParser::ModifierContext::getRuleIndex() const {
  return JavaParser::RuleModifier;
}


std::any JavaParser::ModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModifierContext* JavaParser::modifier() {
  ModifierContext *_localctx = _tracker.createInstance<ModifierContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaParser::RuleModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(484);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::FINAL:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SEALED:
      case JavaParser::NON_SEALED:
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(479);
        classOrInterfaceModifier();
        break;
      }

      case JavaParser::NATIVE: {
        enterOuterAlt(_localctx, 2);
        setState(480);
        match(JavaParser::NATIVE);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 3);
        setState(481);
        match(JavaParser::SYNCHRONIZED);
        break;
      }

      case JavaParser::TRANSIENT: {
        enterOuterAlt(_localctx, 4);
        setState(482);
        match(JavaParser::TRANSIENT);
        break;
      }

      case JavaParser::VOLATILE: {
        enterOuterAlt(_localctx, 5);
        setState(483);
        match(JavaParser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceModifierContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceModifierContext::ClassOrInterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ClassOrInterfaceModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PROTECTED() {
  return getToken(JavaParser::PROTECTED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PRIVATE() {
  return getToken(JavaParser::PRIVATE, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::NON_SEALED() {
  return getToken(JavaParser::NON_SEALED, 0);
}


size_t JavaParser::ClassOrInterfaceModifierContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceModifier;
}


std::any JavaParser::ClassOrInterfaceModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::classOrInterfaceModifier() {
  ClassOrInterfaceModifierContext *_localctx = _tracker.createInstance<ClassOrInterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaParser::RuleClassOrInterfaceModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(486);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(487);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(488);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(489);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(490);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 6);
        setState(491);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(492);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 8);
        setState(493);
        match(JavaParser::STRICTFP);
        break;
      }

      case JavaParser::SEALED: {
        enterOuterAlt(_localctx, 9);
        setState(494);
        match(JavaParser::SEALED);
        break;
      }

      case JavaParser::NON_SEALED: {
        enterOuterAlt(_localctx, 10);
        setState(495);
        match(JavaParser::NON_SEALED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

JavaParser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::VariableModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

JavaParser::AnnotationContext* JavaParser::VariableModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::VariableModifierContext::getRuleIndex() const {
  return JavaParser::RuleVariableModifier;
}


std::any JavaParser::VariableModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableModifierContext* JavaParser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaParser::RuleVariableModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 1);
        setState(498);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::AT: {
        enterOuterAlt(_localctx, 2);
        setState(499);
        annotation();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::IdentifierContext* JavaParser::ClassDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassDeclarationContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ClassDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::ClassExtendsContext* JavaParser::ClassDeclarationContext::classExtends() {
  return getRuleContext<JavaParser::ClassExtendsContext>(0);
}

JavaParser::ClassImplementsContext* JavaParser::ClassDeclarationContext::classImplements() {
  return getRuleContext<JavaParser::ClassImplementsContext>(0);
}

JavaParser::ClassPermitsContext* JavaParser::ClassDeclarationContext::classPermits() {
  return getRuleContext<JavaParser::ClassPermitsContext>(0);
}


size_t JavaParser::ClassDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassDeclaration;
}


std::any JavaParser::ClassDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassDeclarationContext* JavaParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaParser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    match(JavaParser::CLASS);
    setState(503);
    identifier();
    setState(505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(504);
      typeParameters();
    }
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(507);
      classExtends();
    }
    setState(511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(510);
      classImplements();
    }
    setState(514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::PERMITS) {
      setState(513);
      classPermits();
    }
    setState(516);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExtendsContext ------------------------------------------------------------------

JavaParser::ClassExtendsContext::ClassExtendsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassExtendsContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

JavaParser::TypeTypeContext* JavaParser::ClassExtendsContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}


size_t JavaParser::ClassExtendsContext::getRuleIndex() const {
  return JavaParser::RuleClassExtends;
}


std::any JavaParser::ClassExtendsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassExtends(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassExtendsContext* JavaParser::classExtends() {
  ClassExtendsContext *_localctx = _tracker.createInstance<ClassExtendsContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaParser::RuleClassExtends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(518);
    match(JavaParser::EXTENDS);
    setState(519);
    typeType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassImplementsContext ------------------------------------------------------------------

JavaParser::ClassImplementsContext::ClassImplementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassImplementsContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

JavaParser::TypeListContext* JavaParser::ClassImplementsContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}


size_t JavaParser::ClassImplementsContext::getRuleIndex() const {
  return JavaParser::RuleClassImplements;
}


std::any JavaParser::ClassImplementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassImplements(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassImplementsContext* JavaParser::classImplements() {
  ClassImplementsContext *_localctx = _tracker.createInstance<ClassImplementsContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaParser::RuleClassImplements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    match(JavaParser::IMPLEMENTS);
    setState(522);
    typeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPermitsContext ------------------------------------------------------------------

JavaParser::ClassPermitsContext::ClassPermitsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassPermitsContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

JavaParser::TypeListContext* JavaParser::ClassPermitsContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}


size_t JavaParser::ClassPermitsContext::getRuleIndex() const {
  return JavaParser::RuleClassPermits;
}


std::any JavaParser::ClassPermitsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassPermits(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassPermitsContext* JavaParser::classPermits() {
  ClassPermitsContext *_localctx = _tracker.createInstance<ClassPermitsContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaParser::RuleClassPermits);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(JavaParser::PERMITS);
    setState(525);
    typeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

JavaParser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeParametersContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeParameterContext *> JavaParser::TypeParametersContext::typeParameter() {
  return getRuleContexts<JavaParser::TypeParameterContext>();
}

JavaParser::TypeParameterContext* JavaParser::TypeParametersContext::typeParameter(size_t i) {
  return getRuleContext<JavaParser::TypeParameterContext>(i);
}

tree::TerminalNode* JavaParser::TypeParametersContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeParametersContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameters;
}


std::any JavaParser::TypeParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeParametersContext* JavaParser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaParser::RuleTypeParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(527);
    match(JavaParser::LT);
    setState(528);
    typeParameter();
    setState(533);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(529);
      match(JavaParser::COMMA);
      setState(530);
      typeParameter();
      setState(535);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(536);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

JavaParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeParameterContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

JavaParser::TypeBoundContext* JavaParser::TypeParameterContext::typeBound() {
  return getRuleContext<JavaParser::TypeBoundContext>(0);
}


size_t JavaParser::TypeParameterContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameter;
}


std::any JavaParser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeParameterContext* JavaParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaParser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(541);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(538);
      annotation();
      setState(543);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(544);
    identifier();
    setState(547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(545);
      match(JavaParser::EXTENDS);
      setState(546);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

JavaParser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeBoundContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeBoundContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeBoundContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeBoundContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeBoundContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::TypeBoundContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}


size_t JavaParser::TypeBoundContext::getRuleIndex() const {
  return JavaParser::RuleTypeBound;
}


std::any JavaParser::TypeBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeBound(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeBoundContext* JavaParser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaParser::RuleTypeBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(552);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(549);
        annotation(); 
      }
      setState(554);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
    setState(555);
    typeType();
    setState(560);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITAND) {
      setState(556);
      match(JavaParser::BITAND);
      setState(557);
      typeType();
      setState(562);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

JavaParser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::ENUM() {
  return getToken(JavaParser::ENUM, 0);
}

JavaParser::IdentifierContext* JavaParser::EnumDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

JavaParser::ClassImplementsContext* JavaParser::EnumDeclarationContext::classImplements() {
  return getRuleContext<JavaParser::ClassImplementsContext>(0);
}

JavaParser::EnumConstantsContext* JavaParser::EnumDeclarationContext::enumConstants() {
  return getRuleContext<JavaParser::EnumConstantsContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::EnumDeclarationContext::enumBodyDeclarations() {
  return getRuleContext<JavaParser::EnumBodyDeclarationsContext>(0);
}


size_t JavaParser::EnumDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleEnumDeclaration;
}


std::any JavaParser::EnumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumDeclarationContext* JavaParser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaParser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(563);
    match(JavaParser::ENUM);
    setState(564);
    identifier();
    setState(566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(565);
      classImplements();
    }
    setState(568);
    match(JavaParser::LBRACE);
    setState(570);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(569);
      enumConstants();
    }
    setState(573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(572);
      match(JavaParser::COMMA);
    }
    setState(576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(575);
      enumBodyDeclarations();
    }
    setState(578);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantsContext ------------------------------------------------------------------

JavaParser::EnumConstantsContext::EnumConstantsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::EnumConstantContext *> JavaParser::EnumConstantsContext::enumConstant() {
  return getRuleContexts<JavaParser::EnumConstantContext>();
}

JavaParser::EnumConstantContext* JavaParser::EnumConstantsContext::enumConstant(size_t i) {
  return getRuleContext<JavaParser::EnumConstantContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::EnumConstantsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::EnumConstantsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::EnumConstantsContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstants;
}


std::any JavaParser::EnumConstantsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstants(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumConstantsContext* JavaParser::enumConstants() {
  EnumConstantsContext *_localctx = _tracker.createInstance<EnumConstantsContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaParser::RuleEnumConstants);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(580);
    enumConstant();
    setState(585);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(581);
        match(JavaParser::COMMA);
        setState(582);
        enumConstant(); 
      }
      setState(587);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

JavaParser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::EnumConstantContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::EnumConstantContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::ArgumentsContext* JavaParser::EnumConstantContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::EnumConstantContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::EnumConstantContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstant;
}


std::any JavaParser::EnumConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstant(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumConstantContext* JavaParser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaParser::RuleEnumConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(591);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(588);
      annotation();
      setState(593);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(594);
    identifier();
    setState(596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(595);
      arguments();
    }
    setState(599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(598);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

JavaParser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumBodyDeclarationsContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return JavaParser::RuleEnumBodyDeclarations;
}


std::any JavaParser::EnumBodyDeclarationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumBodyDeclarations(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 46, JavaParser::RuleEnumBodyDeclarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(JavaParser::SEMI);
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(602);
      classBodyDeclaration();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::InterfaceBodyContext* JavaParser::InterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<JavaParser::InterfaceBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::InterfaceDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::ClassExtendsContext* JavaParser::InterfaceDeclarationContext::classExtends() {
  return getRuleContext<JavaParser::ClassExtendsContext>(0);
}

JavaParser::ClassImplementsContext* JavaParser::InterfaceDeclarationContext::classImplements() {
  return getRuleContext<JavaParser::ClassImplementsContext>(0);
}


size_t JavaParser::InterfaceDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceDeclaration;
}


std::any JavaParser::InterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceDeclarationContext* JavaParser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaParser::RuleInterfaceDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    match(JavaParser::INTERFACE);
    setState(609);
    identifier();
    setState(611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(610);
      typeParameters();
    }
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(613);
      classExtends();
    }
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(616);
      classImplements();
    }
    setState(619);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

JavaParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ClassBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::ClassBodyContext::getRuleIndex() const {
  return JavaParser::RuleClassBody;
}


std::any JavaParser::ClassBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassBodyContext* JavaParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 50, JavaParser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    match(JavaParser::LBRACE);
    setState(625);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(622);
      classBodyDeclaration();
      setState(627);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(628);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

JavaParser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::InterfaceBodyDeclarationContext *> JavaParser::InterfaceBodyContext::interfaceBodyDeclaration() {
  return getRuleContexts<JavaParser::InterfaceBodyDeclarationContext>();
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::InterfaceBodyContext::interfaceBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::InterfaceBodyDeclarationContext>(i);
}


size_t JavaParser::InterfaceBodyContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBody;
}


std::any JavaParser::InterfaceBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceBodyContext* JavaParser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 52, JavaParser::RuleInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(630);
    match(JavaParser::LBRACE);
    setState(634);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -3459430305758533227) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685762557) != 0)) {
      setState(631);
      interfaceBodyDeclaration();
      setState(636);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(637);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

JavaParser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::BlockContext* JavaParser::ClassBodyDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

JavaParser::MemberDeclarationContext* JavaParser::ClassBodyDeclarationContext::memberDeclaration() {
  return getRuleContext<JavaParser::MemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::ClassBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::ClassBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}


size_t JavaParser::ClassBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassBodyDeclaration;
}


std::any JavaParser::ClassBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassBodyDeclarationContext* JavaParser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaParser::RuleClassBodyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(651);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(639);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::STATIC) {
        setState(640);
        match(JavaParser::STATIC);
      }
      setState(643);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(647);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(644);
          modifier(); 
        }
        setState(649);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
      }
      setState(650);
      memberDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclarationContext ------------------------------------------------------------------

JavaParser::MemberDeclarationContext::MemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RecordDeclarationContext* JavaParser::MemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

JavaParser::MethodDeclarationContext* JavaParser::MemberDeclarationContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::FieldDeclarationContext* JavaParser::MemberDeclarationContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::MemberDeclarationContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::MemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::MemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::MemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::MemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::MemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMemberDeclaration;
}


std::any JavaParser::MemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MemberDeclarationContext* JavaParser::memberDeclaration() {
  MemberDeclarationContext *_localctx = _tracker.createInstance<MemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 56, JavaParser::RuleMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(653);
      recordDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(654);
      methodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(655);
      fieldDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(656);
      constructorDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(657);
      interfaceDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(658);
      annotationTypeDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(659);
      classDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(660);
      enumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

JavaParser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::MethodDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::MethodDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::MethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::MethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::DimsContext* JavaParser::MethodDeclarationContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::Throws_Context* JavaParser::MethodDeclarationContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}


size_t JavaParser::MethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclaration;
}


std::any JavaParser::MethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodDeclarationContext* JavaParser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaParser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(663);
      typeParameters();
    }
    setState(666);
    typeTypeOrVoid();
    setState(667);
    identifier();
    setState(668);
    formalParameters();
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(669);
      dims();
    }
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(672);
      throws_();
    }
    setState(675);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimsContext ------------------------------------------------------------------

JavaParser::DimsContext::DimsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::DimContext *> JavaParser::DimsContext::dim() {
  return getRuleContexts<JavaParser::DimContext>();
}

JavaParser::DimContext* JavaParser::DimsContext::dim(size_t i) {
  return getRuleContext<JavaParser::DimContext>(i);
}


size_t JavaParser::DimsContext::getRuleIndex() const {
  return JavaParser::RuleDims;
}


std::any JavaParser::DimsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDims(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DimsContext* JavaParser::dims() {
  DimsContext *_localctx = _tracker.createInstance<DimsContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaParser::RuleDims);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(677);
    dim();
    setState(681);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(678);
        dim(); 
      }
      setState(683);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimContext ------------------------------------------------------------------

JavaParser::DimContext::DimContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DimContext::LBRACK() {
  return getToken(JavaParser::LBRACK, 0);
}

tree::TerminalNode* JavaParser::DimContext::RBRACK() {
  return getToken(JavaParser::RBRACK, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::DimContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::DimContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::DimContext::getRuleIndex() const {
  return JavaParser::RuleDim;
}


std::any JavaParser::DimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDim(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DimContext* JavaParser::dim() {
  DimContext *_localctx = _tracker.createInstance<DimContext>(_ctx, getState());
  enterRule(_localctx, 62, JavaParser::RuleDim);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(687);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(684);
      annotation();
      setState(689);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(690);
    match(JavaParser::LBRACK);
    setState(691);
    match(JavaParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throws_Context ------------------------------------------------------------------

JavaParser::Throws_Context::Throws_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Throws_Context::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::Throws_Context::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::Throws_Context::getRuleIndex() const {
  return JavaParser::RuleThrows_;
}


std::any JavaParser::Throws_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitThrows_(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::Throws_Context* JavaParser::throws_() {
  Throws_Context *_localctx = _tracker.createInstance<Throws_Context>(_ctx, getState());
  enterRule(_localctx, 64, JavaParser::RuleThrows_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(693);
    match(JavaParser::THROWS);
    setState(694);
    qualifiedNameList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

JavaParser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::MethodBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::MethodBodyContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::MethodBodyContext::getRuleIndex() const {
  return JavaParser::RuleMethodBody;
}


std::any JavaParser::MethodBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodBodyContext* JavaParser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaParser::RuleMethodBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(698);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(696);
        block();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(697);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeOrVoidContext ------------------------------------------------------------------

JavaParser::TypeTypeOrVoidContext::TypeTypeOrVoidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeTypeOrVoidContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeTypeOrVoidContext::VOID() {
  return getToken(JavaParser::VOID, 0);
}


size_t JavaParser::TypeTypeOrVoidContext::getRuleIndex() const {
  return JavaParser::RuleTypeTypeOrVoid;
}


std::any JavaParser::TypeTypeOrVoidContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeTypeOrVoid(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeTypeOrVoidContext* JavaParser::typeTypeOrVoid() {
  TypeTypeOrVoidContext *_localctx = _tracker.createInstance<TypeTypeOrVoidContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaParser::RuleTypeTypeOrVoid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(702);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(700);
        typeType();
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(701);
        match(JavaParser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ConstructorDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::ConstructorDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::BlockContext* JavaParser::ConstructorDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ConstructorDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::Throws_Context* JavaParser::ConstructorDeclarationContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}


size_t JavaParser::ConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclaration;
}


std::any JavaParser::ConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ConstructorDeclarationContext* JavaParser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaParser::RuleConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(704);
      typeParameters();
    }
    setState(707);
    identifier();
    setState(708);
    formalParameters();
    setState(710);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(709);
      throws_();
    }
    setState(712);
    antlrcpp::downCast<ConstructorDeclarationContext *>(_localctx)->constructorBody = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompactConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::CompactConstructorDeclarationContext::CompactConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::CompactConstructorDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::BlockContext* JavaParser::CompactConstructorDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::CompactConstructorDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::CompactConstructorDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}


size_t JavaParser::CompactConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleCompactConstructorDeclaration;
}


std::any JavaParser::CompactConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCompactConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CompactConstructorDeclarationContext* JavaParser::compactConstructorDeclaration() {
  CompactConstructorDeclarationContext *_localctx = _tracker.createInstance<CompactConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaParser::RuleCompactConstructorDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(717);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(714);
        modifier(); 
      }
      setState(719);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
    setState(720);
    identifier();
    setState(721);
    antlrcpp::downCast<CompactConstructorDeclarationContext *>(_localctx)->constructorBody = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

JavaParser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FieldDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::FieldDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

tree::TerminalNode* JavaParser::FieldDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::FieldDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleFieldDeclaration;
}


std::any JavaParser::FieldDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFieldDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FieldDeclarationContext* JavaParser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaParser::RuleFieldDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(723);
    typeType();
    setState(724);
    variableDeclarators();
    setState(725);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceBodyDeclarationContext::InterfaceBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::InterfaceBodyDeclarationContext::interfaceMemberDeclaration() {
  return getRuleContext<JavaParser::InterfaceMemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::InterfaceBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::InterfaceBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::InterfaceBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::InterfaceBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBodyDeclaration;
}


std::any JavaParser::InterfaceBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::interfaceBodyDeclaration() {
  InterfaceBodyDeclarationContext *_localctx = _tracker.createInstance<InterfaceBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaParser::RuleInterfaceBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DEFAULT:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOID:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::LT:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(730);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(727);
            modifier(); 
          }
          setState(732);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
        }
        setState(733);
        interfaceMemberDeclaration();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(734);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RecordDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

JavaParser::ConstDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::constDeclaration() {
  return getRuleContext<JavaParser::ConstDeclarationContext>(0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMemberDeclaration;
}


std::any JavaParser::InterfaceMemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaParser::RuleInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(744);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(737);
      recordDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(738);
      constDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(739);
      interfaceMethodDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(740);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(741);
      annotationTypeDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(742);
      classDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(743);
      enumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstDeclarationContext ------------------------------------------------------------------

JavaParser::ConstDeclarationContext::ConstDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ConstDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::ConstDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

tree::TerminalNode* JavaParser::ConstDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::ConstDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstDeclaration;
}


std::any JavaParser::ConstDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitConstDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ConstDeclarationContext* JavaParser::constDeclaration() {
  ConstDeclarationContext *_localctx = _tracker.createInstance<ConstDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaParser::RuleConstDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    typeType();
    setState(747);
    variableDeclarators();
    setState(748);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

JavaParser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}


size_t JavaParser::InterfaceMethodModifierContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodModifier;
}


std::any JavaParser::InterfaceMethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMethodModifierContext* JavaParser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaParser::RuleInterfaceMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(756);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(750);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(751);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(752);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 4);
        setState(753);
        match(JavaParser::DEFAULT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(754);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 6);
        setState(755);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::InterfaceMethodDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceMethodDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::InterfaceMethodDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::InterfaceMethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::InterfaceMethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::InterfaceMethodDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::DimsContext* JavaParser::InterfaceMethodDeclarationContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::Throws_Context* JavaParser::InterfaceMethodDeclarationContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}


size_t JavaParser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodDeclaration;
}


std::any JavaParser::InterfaceMethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaParser::RuleInterfaceMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(761);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(758);
        interfaceMethodModifier(); 
      }
      setState(763);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
    setState(765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(764);
      typeParameters();
    }
    setState(770);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(767);
        annotation(); 
      }
      setState(772);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
    setState(773);
    typeTypeOrVoid();
    setState(774);
    identifier();
    setState(775);
    formalParameters();
    setState(777);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(776);
      dims();
    }
    setState(780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(779);
      throws_();
    }
    setState(782);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorsContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorsContext::VariableDeclaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableDeclaratorContext *> JavaParser::VariableDeclaratorsContext::variableDeclarator() {
  return getRuleContexts<JavaParser::VariableDeclaratorContext>();
}

JavaParser::VariableDeclaratorContext* JavaParser::VariableDeclaratorsContext::variableDeclarator(size_t i) {
  return getRuleContext<JavaParser::VariableDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::VariableDeclaratorsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::VariableDeclaratorsContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarators;
}


std::any JavaParser::VariableDeclaratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclarators(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorsContext* JavaParser::variableDeclarators() {
  VariableDeclaratorsContext *_localctx = _tracker.createInstance<VariableDeclaratorsContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaParser::RuleVariableDeclarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(784);
    variableDeclarator();
    setState(789);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(785);
      match(JavaParser::COMMA);
      setState(786);
      variableDeclarator();
      setState(791);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::VariableDeclaratorContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::VariableInitializerContext* JavaParser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}


size_t JavaParser::VariableDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarator;
}


std::any JavaParser::VariableDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclarator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorContext* JavaParser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaParser::RuleVariableDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(792);
    variableDeclaratorId();
    setState(795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::ASSIGN) {
      setState(793);
      match(JavaParser::ASSIGN);
      setState(794);
      variableInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::VariableDeclaratorIdContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::DimsContext* JavaParser::VariableDeclaratorIdContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::VariableDeclaratorIdContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorId;
}


std::any JavaParser::VariableDeclaratorIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorId(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaParser::RuleVariableDeclaratorId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(797);
    identifier();
    setState(799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(798);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

JavaParser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArrayInitializerContext* JavaParser::VariableInitializerContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

JavaParser::ExpressionContext* JavaParser::VariableInitializerContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::VariableInitializerContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializer;
}


std::any JavaParser::VariableInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableInitializerContext* JavaParser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaParser::RuleVariableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(803);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(801);
        arrayInitializer();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(802);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

JavaParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::VariableInitializerContext *> JavaParser::ArrayInitializerContext::variableInitializer() {
  return getRuleContexts<JavaParser::VariableInitializerContext>();
}

JavaParser::VariableInitializerContext* JavaParser::ArrayInitializerContext::variableInitializer(size_t i) {
  return getRuleContext<JavaParser::VariableInitializerContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleArrayInitializer;
}


std::any JavaParser::ArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArrayInitializerContext* JavaParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaParser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(805);
    match(JavaParser::LBRACE);
    setState(817);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0)) {
      setState(806);
      variableInitializer();
      setState(811);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(807);
          match(JavaParser::COMMA);
          setState(808);
          variableInitializer(); 
        }
        setState(813);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
      }
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(814);
        match(JavaParser::COMMA);
      }
    }
    setState(819);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::CoitContext *> JavaParser::ClassOrInterfaceTypeContext::coit() {
  return getRuleContexts<JavaParser::CoitContext>();
}

JavaParser::CoitContext* JavaParser::ClassOrInterfaceTypeContext::coit(size_t i) {
  return getRuleContext<JavaParser::CoitContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ClassOrInterfaceTypeContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceTypeContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceType;
}


std::any JavaParser::ClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaParser::RuleClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(826);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(821);
        coit();
        setState(822);
        match(JavaParser::DOT); 
      }
      setState(828);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
    setState(829);
    coit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CoitContext ------------------------------------------------------------------

JavaParser::CoitContext::CoitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeIdentifierContext* JavaParser::CoitContext::typeIdentifier() {
  return getRuleContext<JavaParser::TypeIdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::CoitContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::CoitContext::getRuleIndex() const {
  return JavaParser::RuleCoit;
}


std::any JavaParser::CoitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCoit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CoitContext* JavaParser::coit() {
  CoitContext *_localctx = _tracker.createInstance<CoitContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaParser::RuleCoit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    typeIdentifier();
    setState(833);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(832);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

JavaParser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeArgumentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeArgumentContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeArgumentContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::TypeArgumentContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgument;
}


std::any JavaParser::TypeArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgument(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentContext* JavaParser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaParser::RuleTypeArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(847);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(835);
      typeType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(839);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(836);
        annotation();
        setState(841);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(842);
      match(JavaParser::QUESTION);
      setState(845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::EXTENDS

      || _la == JavaParser::SUPER) {
        setState(843);
        _la = _input->LA(1);
        if (!(_la == JavaParser::EXTENDS

        || _la == JavaParser::SUPER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(844);
        typeType();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameListContext ------------------------------------------------------------------

JavaParser::QualifiedNameListContext::QualifiedNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::QualifiedNameListContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::QualifiedNameListContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::QualifiedNameListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::QualifiedNameListContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedNameList;
}


std::any JavaParser::QualifiedNameListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedNameList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::QualifiedNameListContext* JavaParser::qualifiedNameList() {
  QualifiedNameListContext *_localctx = _tracker.createInstance<QualifiedNameListContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaParser::RuleQualifiedNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    qualifiedName();
    setState(854);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(850);
      match(JavaParser::COMMA);
      setState(851);
      qualifiedName();
      setState(856);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

JavaParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FormalParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParametersContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::FormalParameterListContext* JavaParser::FormalParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}


size_t JavaParser::FormalParametersContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameters;
}


std::any JavaParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParametersContext* JavaParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(857);
    match(JavaParser::LPAREN);
    setState(869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(859);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 8358399450686818341) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(858);
        receiverParameter();
      }
      break;
    }

    case 2: {
      setState(861);
      receiverParameter();
      setState(864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(862);
        match(JavaParser::COMMA);
        setState(863);
        formalParameterList();
      }
      break;
    }

    case 3: {
      setState(867);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 8358399450686851109) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(866);
        formalParameterList();
      }
      break;
    }

    default:
      break;
    }
    setState(871);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

JavaParser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ReceiverParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ReceiverParameterContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ReceiverParameterContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ReceiverParameterContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::ReceiverParameterContext::getRuleIndex() const {
  return JavaParser::RuleReceiverParameter;
}


std::any JavaParser::ReceiverParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitReceiverParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ReceiverParameterContext* JavaParser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaParser::RuleReceiverParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    typeType();
    setState(879);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
      setState(874);
      identifier();
      setState(875);
      match(JavaParser::DOT);
      setState(881);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(882);
    match(JavaParser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::FormalParameterContext *> JavaParser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<JavaParser::FormalParameterContext>();
}

JavaParser::FormalParameterContext* JavaParser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<JavaParser::FormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::FormalParameterListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::FormalParameterListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LastFormalParameterContext* JavaParser::FormalParameterListContext::lastFormalParameter() {
  return getRuleContext<JavaParser::LastFormalParameterContext>(0);
}


size_t JavaParser::FormalParameterListContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameterList;
}


std::any JavaParser::FormalParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameterList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParameterListContext* JavaParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaParser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(897);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(884);
      formalParameter();
      setState(889);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(885);
          match(JavaParser::COMMA);
          setState(886);
          formalParameter(); 
        }
        setState(891);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      }
      setState(894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(892);
        match(JavaParser::COMMA);
        setState(893);
        lastFormalParameter();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(896);
      lastFormalParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

JavaParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::FormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::FormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameter;
}


std::any JavaParser::FormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParameterContext* JavaParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaParser::RuleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(902);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(899);
        variableModifier(); 
      }
      setState(904);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
    setState(905);
    typeType();
    setState(906);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterContext ------------------------------------------------------------------

JavaParser::LastFormalParameterContext::LastFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::LastFormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::LastFormalParameterContext::ELLIPSIS() {
  return getToken(JavaParser::ELLIPSIS, 0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::LastFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LastFormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LastFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::LastFormalParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::LastFormalParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::LastFormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleLastFormalParameter;
}


std::any JavaParser::LastFormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLastFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LastFormalParameterContext* JavaParser::lastFormalParameter() {
  LastFormalParameterContext *_localctx = _tracker.createInstance<LastFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaParser::RuleLastFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(911);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(908);
        variableModifier(); 
      }
      setState(913);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
    setState(914);
    typeType();
    setState(918);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(915);
      annotation();
      setState(920);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(921);
    match(JavaParser::ELLIPSIS);
    setState(922);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIListContext ------------------------------------------------------------------

JavaParser::LambdaLVTIListContext::LambdaLVTIListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::LambdaLVTIParameterContext *> JavaParser::LambdaLVTIListContext::lambdaLVTIParameter() {
  return getRuleContexts<JavaParser::LambdaLVTIParameterContext>();
}

JavaParser::LambdaLVTIParameterContext* JavaParser::LambdaLVTIListContext::lambdaLVTIParameter(size_t i) {
  return getRuleContext<JavaParser::LambdaLVTIParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaLVTIListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaLVTIListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::LambdaLVTIListContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIList;
}


std::any JavaParser::LambdaLVTIListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaLVTIList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaLVTIListContext* JavaParser::lambdaLVTIList() {
  LambdaLVTIListContext *_localctx = _tracker.createInstance<LambdaLVTIListContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaParser::RuleLambdaLVTIList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(924);
    lambdaLVTIParameter();
    setState(929);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(925);
      match(JavaParser::COMMA);
      setState(926);
      lambdaLVTIParameter();
      setState(931);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIParameterContext ------------------------------------------------------------------

JavaParser::LambdaLVTIParameterContext::LambdaLVTIParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LambdaLVTIParameterContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LambdaLVTIParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LambdaLVTIParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LambdaLVTIParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LambdaLVTIParameterContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIParameter;
}


std::any JavaParser::LambdaLVTIParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaLVTIParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaLVTIParameterContext* JavaParser::lambdaLVTIParameter() {
  LambdaLVTIParameterContext *_localctx = _tracker.createInstance<LambdaLVTIParameterContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaParser::RuleLambdaLVTIParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(935);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL || _la == JavaParser::AT) {
      setState(932);
      variableModifier();
      setState(937);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(938);
    match(JavaParser::VAR);
    setState(939);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

JavaParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::QualifiedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::QualifiedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::QualifiedNameContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedName;
}


std::any JavaParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::QualifiedNameContext* JavaParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(941);
    identifier();
    setState(946);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(942);
        match(JavaParser::DOT);
        setState(943);
        identifier(); 
      }
      setState(948);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

JavaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IntegerLiteralContext* JavaParser::LiteralContext::integerLiteral() {
  return getRuleContext<JavaParser::IntegerLiteralContext>(0);
}

JavaParser::FloatLiteralContext* JavaParser::LiteralContext::floatLiteral() {
  return getRuleContext<JavaParser::FloatLiteralContext>(0);
}

tree::TerminalNode* JavaParser::LiteralContext::CHAR_LITERAL() {
  return getToken(JavaParser::CHAR_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::STRING_LITERAL() {
  return getToken(JavaParser::STRING_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::BOOL_LITERAL() {
  return getToken(JavaParser::BOOL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::NULL_LITERAL() {
  return getToken(JavaParser::NULL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::TEXT_BLOCK() {
  return getToken(JavaParser::TEXT_BLOCK, 0);
}


size_t JavaParser::LiteralContext::getRuleIndex() const {
  return JavaParser::RuleLiteral;
}


std::any JavaParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LiteralContext* JavaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(949);
        integerLiteral();
        break;
      }

      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(950);
        floatLiteral();
        break;
      }

      case JavaParser::CHAR_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(951);
        match(JavaParser::CHAR_LITERAL);
        break;
      }

      case JavaParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(952);
        match(JavaParser::STRING_LITERAL);
        break;
      }

      case JavaParser::BOOL_LITERAL: {
        enterOuterAlt(_localctx, 5);
        setState(953);
        match(JavaParser::BOOL_LITERAL);
        break;
      }

      case JavaParser::NULL_LITERAL: {
        enterOuterAlt(_localctx, 6);
        setState(954);
        match(JavaParser::NULL_LITERAL);
        break;
      }

      case JavaParser::TEXT_BLOCK: {
        enterOuterAlt(_localctx, 7);
        setState(955);
        match(JavaParser::TEXT_BLOCK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

JavaParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::DECIMAL_LITERAL() {
  return getToken(JavaParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::HEX_LITERAL() {
  return getToken(JavaParser::HEX_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::OCT_LITERAL() {
  return getToken(JavaParser::OCT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::BINARY_LITERAL() {
  return getToken(JavaParser::BINARY_LITERAL, 0);
}


size_t JavaParser::IntegerLiteralContext::getRuleIndex() const {
  return JavaParser::RuleIntegerLiteral;
}


std::any JavaParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::IntegerLiteralContext* JavaParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    _la = _input->LA(1);
    if (!(((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

JavaParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FloatLiteralContext::FLOAT_LITERAL() {
  return getToken(JavaParser::FLOAT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::FloatLiteralContext::HEX_FLOAT_LITERAL() {
  return getToken(JavaParser::HEX_FLOAT_LITERAL, 0);
}


size_t JavaParser::FloatLiteralContext::getRuleIndex() const {
  return JavaParser::RuleFloatLiteral;
}


std::any JavaParser::FloatLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFloatLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FloatLiteralContext* JavaParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(960);
    _la = _input->LA(1);
    if (!(_la == JavaParser::FLOAT_LITERAL

    || _la == JavaParser::HEX_FLOAT_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

JavaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::AnnotationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ElementValuePairsContext* JavaParser::AnnotationContext::elementValuePairs() {
  return getRuleContext<JavaParser::ElementValuePairsContext>(0);
}

JavaParser::ElementValueContext* JavaParser::AnnotationContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::AnnotationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotation;
}


std::any JavaParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationContext* JavaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaParser::RuleAnnotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(962);
    match(JavaParser::AT);
    setState(963);
    qualifiedName();
    setState(970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(964);
      match(JavaParser::LPAREN);
      setState(967);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
      case 1: {
        setState(965);
        elementValuePairs();
        break;
      }

      case 2: {
        setState(966);
        elementValue();
        break;
      }

      default:
        break;
      }
      setState(969);
      match(JavaParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairsContext ------------------------------------------------------------------

JavaParser::ElementValuePairsContext::ElementValuePairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValuePairContext *> JavaParser::ElementValuePairsContext::elementValuePair() {
  return getRuleContexts<JavaParser::ElementValuePairContext>();
}

JavaParser::ElementValuePairContext* JavaParser::ElementValuePairsContext::elementValuePair(size_t i) {
  return getRuleContext<JavaParser::ElementValuePairContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValuePairsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValuePairsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValuePairsContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePairs;
}


std::any JavaParser::ElementValuePairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePairs(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValuePairsContext* JavaParser::elementValuePairs() {
  ElementValuePairsContext *_localctx = _tracker.createInstance<ElementValuePairsContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaParser::RuleElementValuePairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(972);
    elementValuePair();
    setState(977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(973);
      match(JavaParser::COMMA);
      setState(974);
      elementValuePair();
      setState(979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

JavaParser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ElementValuePairContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ElementValuePairContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ElementValueContext* JavaParser::ElementValuePairContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::ElementValuePairContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePair;
}


std::any JavaParser::ElementValuePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePair(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValuePairContext* JavaParser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 130, JavaParser::RuleElementValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    identifier();
    setState(981);
    match(JavaParser::ASSIGN);
    setState(982);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

JavaParser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ElementValueContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::AnnotationContext* JavaParser::ElementValueContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::ElementValueContext::elementValueArrayInitializer() {
  return getRuleContext<JavaParser::ElementValueArrayInitializerContext>(0);
}


size_t JavaParser::ElementValueContext::getRuleIndex() const {
  return JavaParser::RuleElementValue;
}


std::any JavaParser::ElementValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValue(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValueContext* JavaParser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaParser::RuleElementValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(987);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(984);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(985);
      annotation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(986);
      elementValueArrayInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

JavaParser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ElementValueContext *> JavaParser::ElementValueArrayInitializerContext::elementValue() {
  return getRuleContexts<JavaParser::ElementValueContext>();
}

JavaParser::ElementValueContext* JavaParser::ElementValueArrayInitializerContext::elementValue(size_t i) {
  return getRuleContext<JavaParser::ElementValueContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValueArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleElementValueArrayInitializer;
}


std::any JavaParser::ElementValueArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValueArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaParser::RuleElementValueArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(989);
    match(JavaParser::LBRACE);
    setState(998);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0)) {
      setState(990);
      elementValue();
      setState(995);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(991);
          match(JavaParser::COMMA);
          setState(992);
          elementValue(); 
        }
        setState(997);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
      }
    }
    setState(1001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(1000);
      match(JavaParser::COMMA);
    }
    setState(1003);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeDeclarationContext::AnnotationTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::AnnotationTypeDeclarationContext::annotationTypeBody() {
  return getRuleContext<JavaParser::AnnotationTypeBodyContext>(0);
}


size_t JavaParser::AnnotationTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeDeclaration;
}


std::any JavaParser::AnnotationTypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::annotationTypeDeclaration() {
  AnnotationTypeDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaParser::RuleAnnotationTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1005);
    match(JavaParser::AT);
    setState(1006);
    match(JavaParser::INTERFACE);
    setState(1007);
    identifier();
    setState(1008);
    annotationTypeBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBodyContext ------------------------------------------------------------------

JavaParser::AnnotationTypeBodyContext::AnnotationTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::AnnotationTypeElementDeclarationContext *> JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration() {
  return getRuleContexts<JavaParser::AnnotationTypeElementDeclarationContext>();
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeElementDeclarationContext>(i);
}


size_t JavaParser::AnnotationTypeBodyContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeBody;
}


std::any JavaParser::AnnotationTypeBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::annotationTypeBody() {
  AnnotationTypeBodyContext *_localctx = _tracker.createInstance<AnnotationTypeBodyContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaParser::RuleAnnotationTypeBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    match(JavaParser::LBRACE);
    setState(1014);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -3459571043246890603) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660702539773) != 0)) {
      setState(1011);
      annotationTypeElementDeclaration();
      setState(1016);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1017);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementDeclarationContext::AnnotationTypeElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::AnnotationTypeElementDeclarationContext::annotationTypeElementRest() {
  return getRuleContext<JavaParser::AnnotationTypeElementRestContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::AnnotationTypeElementDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::AnnotationTypeElementDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::AnnotationTypeElementDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementDeclaration;
}


std::any JavaParser::AnnotationTypeElementDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::annotationTypeElementDeclaration() {
  AnnotationTypeElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaParser::RuleAnnotationTypeElementDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1027);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1022);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1019);
            modifier(); 
          }
          setState(1024);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
        }
        setState(1025);
        annotationTypeElementRest();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1026);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementRestContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementRestContext::AnnotationTypeElementRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationConstantDeclarationContext* JavaParser::AnnotationTypeElementRestContext::annotationConstantDeclaration() {
  return getRuleContext<JavaParser::AnnotationConstantDeclarationContext>(0);
}

JavaParser::AnnotationMethodDeclarationContext* JavaParser::AnnotationTypeElementRestContext::annotationMethodDeclaration() {
  return getRuleContext<JavaParser::AnnotationMethodDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::AnnotationTypeElementRestContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementRestContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::AnnotationTypeElementRestContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::AnnotationTypeElementRestContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::AnnotationTypeElementRestContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::AnnotationTypeElementRestContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}


size_t JavaParser::AnnotationTypeElementRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementRest;
}


std::any JavaParser::AnnotationTypeElementRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::annotationTypeElementRest() {
  AnnotationTypeElementRestContext *_localctx = _tracker.createInstance<AnnotationTypeElementRestContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaParser::RuleAnnotationTypeElementRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1051);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1029);
      annotationConstantDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1030);
      annotationMethodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1031);
      classDeclaration();
      setState(1033);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
      case 1: {
        setState(1032);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1035);
      interfaceDeclaration();
      setState(1037);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
      case 1: {
        setState(1036);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1039);
      enumDeclaration();
      setState(1041);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
      case 1: {
        setState(1040);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1043);
      annotationTypeDeclaration();
      setState(1045);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
      case 1: {
        setState(1044);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1047);
      recordDeclaration();
      setState(1049);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
      case 1: {
        setState(1048);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationConstantDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationConstantDeclarationContext::AnnotationConstantDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::AnnotationConstantDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::AnnotationConstantDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationConstantDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::AnnotationConstantDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationConstantDeclaration;
}


std::any JavaParser::AnnotationConstantDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationConstantDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationConstantDeclarationContext* JavaParser::annotationConstantDeclaration() {
  AnnotationConstantDeclarationContext *_localctx = _tracker.createInstance<AnnotationConstantDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaParser::RuleAnnotationConstantDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1053);
    typeType();
    setState(1054);
    variableDeclarators();
    setState(1055);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationMethodDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationMethodDeclarationContext::AnnotationMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::AnnotationMethodDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationMethodDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationMethodDeclarationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationMethodDeclarationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationMethodDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::DefaultValueContext* JavaParser::AnnotationMethodDeclarationContext::defaultValue() {
  return getRuleContext<JavaParser::DefaultValueContext>(0);
}


size_t JavaParser::AnnotationMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationMethodDeclaration;
}


std::any JavaParser::AnnotationMethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationMethodDeclarationContext* JavaParser::annotationMethodDeclaration() {
  AnnotationMethodDeclarationContext *_localctx = _tracker.createInstance<AnnotationMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaParser::RuleAnnotationMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1057);
    typeType();
    setState(1058);
    identifier();
    setState(1059);
    match(JavaParser::LPAREN);
    setState(1060);
    match(JavaParser::RPAREN);
    setState(1062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DEFAULT) {
      setState(1061);
      defaultValue();
    }
    setState(1064);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

JavaParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DefaultValueContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

JavaParser::ElementValueContext* JavaParser::DefaultValueContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::DefaultValueContext::getRuleIndex() const {
  return JavaParser::RuleDefaultValue;
}


std::any JavaParser::DefaultValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDefaultValue(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DefaultValueContext* JavaParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaParser::RuleDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1066);
    match(JavaParser::DEFAULT);
    setState(1067);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

JavaParser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

JavaParser::ModuleBodyContext* JavaParser::ModuleDeclarationContext::moduleBody() {
  return getRuleContext<JavaParser::ModuleBodyContext>(0);
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}


size_t JavaParser::ModuleDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleModuleDeclaration;
}


std::any JavaParser::ModuleDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleDeclarationContext* JavaParser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaParser::RuleModuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::OPEN) {
      setState(1069);
      match(JavaParser::OPEN);
    }
    setState(1072);
    match(JavaParser::MODULE);
    setState(1073);
    qualifiedName();
    setState(1074);
    moduleBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyContext ------------------------------------------------------------------

JavaParser::ModuleBodyContext::ModuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ModuleBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ModuleDirectiveContext *> JavaParser::ModuleBodyContext::moduleDirective() {
  return getRuleContexts<JavaParser::ModuleDirectiveContext>();
}

JavaParser::ModuleDirectiveContext* JavaParser::ModuleBodyContext::moduleDirective(size_t i) {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(i);
}


size_t JavaParser::ModuleBodyContext::getRuleIndex() const {
  return JavaParser::RuleModuleBody;
}


std::any JavaParser::ModuleBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleBodyContext* JavaParser::moduleBody() {
  ModuleBodyContext *_localctx = _tracker.createInstance<ModuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaParser::RuleModuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1076);
    match(JavaParser::LBRACE);
    setState(1080);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 495395959010754560) != 0)) {
      setState(1077);
      moduleDirective();
      setState(1082);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1083);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

JavaParser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::ModuleDirectiveContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDirectiveContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::RequiresModifierContext *> JavaParser::ModuleDirectiveContext::requiresModifier() {
  return getRuleContexts<JavaParser::RequiresModifierContext>();
}

JavaParser::RequiresModifierContext* JavaParser::ModuleDirectiveContext::requiresModifier(size_t i) {
  return getRuleContext<JavaParser::RequiresModifierContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}


size_t JavaParser::ModuleDirectiveContext::getRuleIndex() const {
  return JavaParser::RuleModuleDirective;
}


std::any JavaParser::ModuleDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleDirective(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleDirectiveContext* JavaParser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaParser::RuleModuleDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1121);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::REQUIRES: {
        enterOuterAlt(_localctx, 1);
        setState(1085);
        match(JavaParser::REQUIRES);
        setState(1089);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1086);
            requiresModifier(); 
          }
          setState(1091);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
        }
        setState(1092);
        qualifiedName();
        setState(1093);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::EXPORTS: {
        enterOuterAlt(_localctx, 2);
        setState(1095);
        match(JavaParser::EXPORTS);
        setState(1096);
        qualifiedName();
        setState(1099);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(1097);
          match(JavaParser::TO);
          setState(1098);
          qualifiedName();
        }
        setState(1101);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::OPENS: {
        enterOuterAlt(_localctx, 3);
        setState(1103);
        match(JavaParser::OPENS);
        setState(1104);
        qualifiedName();
        setState(1107);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(1105);
          match(JavaParser::TO);
          setState(1106);
          qualifiedName();
        }
        setState(1109);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::USES: {
        enterOuterAlt(_localctx, 4);
        setState(1111);
        match(JavaParser::USES);
        setState(1112);
        qualifiedName();
        setState(1113);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::PROVIDES: {
        enterOuterAlt(_localctx, 5);
        setState(1115);
        match(JavaParser::PROVIDES);
        setState(1116);
        qualifiedName();
        setState(1117);
        match(JavaParser::WITH);
        setState(1118);
        qualifiedName();
        setState(1119);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

JavaParser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RequiresModifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::RequiresModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}


size_t JavaParser::RequiresModifierContext::getRuleIndex() const {
  return JavaParser::RuleRequiresModifier;
}


std::any JavaParser::RequiresModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRequiresModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RequiresModifierContext* JavaParser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaParser::RuleRequiresModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _la = _input->LA(1);
    if (!(_la == JavaParser::STATIC

    || _la == JavaParser::TRANSITIVE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordDeclarationContext ------------------------------------------------------------------

JavaParser::RecordDeclarationContext::RecordDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

JavaParser::IdentifierContext* JavaParser::RecordDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::RecordBodyContext* JavaParser::RecordDeclarationContext::recordBody() {
  return getRuleContext<JavaParser::RecordBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::RecordDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::RecordComponentListContext* JavaParser::RecordDeclarationContext::recordComponentList() {
  return getRuleContext<JavaParser::RecordComponentListContext>(0);
}

JavaParser::ClassImplementsContext* JavaParser::RecordDeclarationContext::classImplements() {
  return getRuleContext<JavaParser::ClassImplementsContext>(0);
}


size_t JavaParser::RecordDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleRecordDeclaration;
}


std::any JavaParser::RecordDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordDeclarationContext* JavaParser::recordDeclaration() {
  RecordDeclarationContext *_localctx = _tracker.createInstance<RecordDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaParser::RuleRecordDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    match(JavaParser::RECORD);
    setState(1126);
    identifier();
    setState(1128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1127);
      typeParameters();
    }
    setState(1130);
    match(JavaParser::LPAREN);
    setState(1132);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 8358399450686818341) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(1131);
      recordComponentList();
    }
    setState(1134);
    match(JavaParser::RPAREN);
    setState(1136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(1135);
      classImplements();
    }
    setState(1138);
    recordBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentListContext ------------------------------------------------------------------

JavaParser::RecordComponentListContext::RecordComponentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::RecordComponentContext *> JavaParser::RecordComponentListContext::recordComponent() {
  return getRuleContexts<JavaParser::RecordComponentContext>();
}

JavaParser::RecordComponentContext* JavaParser::RecordComponentListContext::recordComponent(size_t i) {
  return getRuleContext<JavaParser::RecordComponentContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::RecordComponentListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::RecordComponentListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::RecordComponentListContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponentList;
}


std::any JavaParser::RecordComponentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponentList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordComponentListContext* JavaParser::recordComponentList() {
  RecordComponentListContext *_localctx = _tracker.createInstance<RecordComponentListContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaParser::RuleRecordComponentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    recordComponent();
    setState(1145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1141);
      match(JavaParser::COMMA);
      setState(1142);
      recordComponent();
      setState(1147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentContext ------------------------------------------------------------------

JavaParser::RecordComponentContext::RecordComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::RecordComponentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::RecordComponentContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::RecordComponentContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponent;
}


std::any JavaParser::RecordComponentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponent(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordComponentContext* JavaParser::recordComponent() {
  RecordComponentContext *_localctx = _tracker.createInstance<RecordComponentContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaParser::RuleRecordComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1148);
    typeType();
    setState(1149);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyContext ------------------------------------------------------------------

JavaParser::RecordBodyContext::RecordBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::RecordBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::RecordBodyDeclarationContext *> JavaParser::RecordBodyContext::recordBodyDeclaration() {
  return getRuleContexts<JavaParser::RecordBodyDeclarationContext>();
}

JavaParser::RecordBodyDeclarationContext* JavaParser::RecordBodyContext::recordBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::RecordBodyDeclarationContext>(i);
}


size_t JavaParser::RecordBodyContext::getRuleIndex() const {
  return JavaParser::RuleRecordBody;
}


std::any JavaParser::RecordBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordBodyContext* JavaParser::recordBody() {
  RecordBodyContext *_localctx = _tracker.createInstance<RecordBodyContext>(_ctx, getState());
  enterRule(_localctx, 164, JavaParser::RuleRecordBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1151);
    match(JavaParser::LBRACE);
    setState(1155);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(1152);
      recordBodyDeclaration();
      setState(1157);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1158);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyDeclarationContext ------------------------------------------------------------------

JavaParser::RecordBodyDeclarationContext::RecordBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassBodyDeclarationContext* JavaParser::RecordBodyDeclarationContext::classBodyDeclaration() {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(0);
}

JavaParser::CompactConstructorDeclarationContext* JavaParser::RecordBodyDeclarationContext::compactConstructorDeclaration() {
  return getRuleContext<JavaParser::CompactConstructorDeclarationContext>(0);
}


size_t JavaParser::RecordBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleRecordBodyDeclaration;
}


std::any JavaParser::RecordBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordBodyDeclarationContext* JavaParser::recordBodyDeclaration() {
  RecordBodyDeclarationContext *_localctx = _tracker.createInstance<RecordBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaParser::RuleRecordBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1162);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1160);
      classBodyDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1161);
      compactConstructorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

JavaParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::BlockContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::BlockContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::BlockContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::BlockContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::BlockContext::getRuleIndex() const {
  return JavaParser::RuleBlock;
}


std::any JavaParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::BlockContext* JavaParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 168, JavaParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1164);
    match(JavaParser::LBRACE);
    setState(1168);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0)) {
      setState(1165);
      blockStatement();
      setState(1170);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1171);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

JavaParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::BlockStatementContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::BlockStatementContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::BlockStatementContext::localTypeDeclaration() {
  return getRuleContext<JavaParser::LocalTypeDeclarationContext>(0);
}

JavaParser::StatementContext* JavaParser::BlockStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::BlockStatementContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatement;
}


std::any JavaParser::BlockStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBlockStatement(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::BlockStatementContext* JavaParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaParser::RuleBlockStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1173);
      localVariableDeclaration();
      setState(1174);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1176);
      localTypeDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1177);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LocalVariableDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::LocalVariableDeclarationContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::LocalVariableDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::LocalVariableDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LocalVariableDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclaration;
}


std::any JavaParser::LocalVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 172, JavaParser::RuleLocalVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1183);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1180);
        variableModifier(); 
      }
      setState(1185);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    }
    setState(1194);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::VAR: {
        setState(1186);
        match(JavaParser::VAR);
        setState(1187);
        identifier();
        setState(1188);
        match(JavaParser::ASSIGN);
        setState(1189);
        expression();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1191);
        typeType();
        setState(1192);
        variableDeclarators();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IdentifierContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}


size_t JavaParser::IdentifierContext::getRuleIndex() const {
  return JavaParser::RuleIdentifier;
}


std::any JavaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::IdentifierContext* JavaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 174, JavaParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1196);
    _la = _input->LA(1);
    if (!(((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdentifierContext ------------------------------------------------------------------

JavaParser::TypeIdentifierContext::TypeIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}


size_t JavaParser::TypeIdentifierContext::getRuleIndex() const {
  return JavaParser::RuleTypeIdentifier;
}


std::any JavaParser::TypeIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeIdentifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeIdentifierContext* JavaParser::typeIdentifier() {
  TypeIdentifierContext *_localctx = _tracker.createInstance<TypeIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 176, JavaParser::RuleTypeIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    _la = _input->LA(1);
    if (!(((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 29695) != 0) || _la == JavaParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalTypeDeclarationContext ------------------------------------------------------------------

JavaParser::LocalTypeDeclarationContext::LocalTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::LocalTypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::LocalTypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::LocalTypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}


size_t JavaParser::LocalTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalTypeDeclaration;
}


std::any JavaParser::LocalTypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLocalTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::localTypeDeclaration() {
  LocalTypeDeclarationContext *_localctx = _tracker.createInstance<LocalTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 178, JavaParser::RuleLocalTypeDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1203);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 884763525122) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 576460752303423493) != 0)) {
      setState(1200);
      classOrInterfaceModifier();
      setState(1205);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1209);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CLASS: {
        setState(1206);
        classDeclaration();
        break;
      }

      case JavaParser::INTERFACE: {
        setState(1207);
        interfaceDeclaration();
        break;
      }

      case JavaParser::RECORD: {
        setState(1208);
        recordDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::ASSERT() {
  return getToken(JavaParser::ASSERT, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::StatementContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::StatementContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::StatementContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::StatementContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}

tree::TerminalNode* JavaParser::StatementContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

tree::TerminalNode* JavaParser::StatementContext::IF() {
  return getToken(JavaParser::IF, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

std::vector<JavaParser::StatementContext *> JavaParser::StatementContext::statement() {
  return getRuleContexts<JavaParser::StatementContext>();
}

JavaParser::StatementContext* JavaParser::StatementContext::statement(size_t i) {
  return getRuleContext<JavaParser::StatementContext>(i);
}

tree::TerminalNode* JavaParser::StatementContext::ELSE() {
  return getToken(JavaParser::ELSE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::FOR() {
  return getToken(JavaParser::FOR, 0);
}

tree::TerminalNode* JavaParser::StatementContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::StatementContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ForInitContext* JavaParser::StatementContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionListContext* JavaParser::StatementContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::StatementContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::StatementContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::StatementContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::StatementContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

tree::TerminalNode* JavaParser::StatementContext::WHILE() {
  return getToken(JavaParser::WHILE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::DO() {
  return getToken(JavaParser::DO, 0);
}

tree::TerminalNode* JavaParser::StatementContext::TRY() {
  return getToken(JavaParser::TRY, 0);
}

JavaParser::FinallyBlockContext* JavaParser::StatementContext::finallyBlock() {
  return getRuleContext<JavaParser::FinallyBlockContext>(0);
}

std::vector<JavaParser::CatchClauseContext *> JavaParser::StatementContext::catchClause() {
  return getRuleContexts<JavaParser::CatchClauseContext>();
}

JavaParser::CatchClauseContext* JavaParser::StatementContext::catchClause(size_t i) {
  return getRuleContext<JavaParser::CatchClauseContext>(i);
}

JavaParser::ResourceSpecificationContext* JavaParser::StatementContext::resourceSpecification() {
  return getRuleContext<JavaParser::ResourceSpecificationContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

JavaParser::SwitchBlockContext* JavaParser::StatementContext::switchBlock() {
  return getRuleContext<JavaParser::SwitchBlockContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* JavaParser::StatementContext::RETURN() {
  return getToken(JavaParser::RETURN, 0);
}

tree::TerminalNode* JavaParser::StatementContext::THROW() {
  return getToken(JavaParser::THROW, 0);
}

tree::TerminalNode* JavaParser::StatementContext::BREAK() {
  return getToken(JavaParser::BREAK, 0);
}

JavaParser::IdentifierContext* JavaParser::StatementContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::CONTINUE() {
  return getToken(JavaParser::CONTINUE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}


size_t JavaParser::StatementContext::getRuleIndex() const {
  return JavaParser::RuleStatement;
}


std::any JavaParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::StatementContext* JavaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 180, JavaParser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1334);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1211);
      antlrcpp::downCast<StatementContext *>(_localctx)->blockLabel = block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1212);
      match(JavaParser::ASSERT);
      setState(1213);
      expression();
      setState(1216);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COLON) {
        setState(1214);
        match(JavaParser::COLON);
        setState(1215);
        expression();
      }
      setState(1218);
      match(JavaParser::SEMI);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1220);
      match(JavaParser::IF);
      setState(1221);
      parExpression();
      setState(1222);
      statement();
      setState(1225);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
      case 1: {
        setState(1223);
        match(JavaParser::ELSE);
        setState(1224);
        statement();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1227);
      match(JavaParser::FOR);
      setState(1228);
      match(JavaParser::LPAREN);
      setState(1230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610998821) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1229);
        forInit();
      }
      setState(1232);
      match(JavaParser::SEMI);
      setState(1234);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1233);
        expression();
      }
      setState(1236);
      match(JavaParser::SEMI);
      setState(1238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1237);
        antlrcpp::downCast<StatementContext *>(_localctx)->forUpdate = expressionList();
      }
      setState(1240);
      match(JavaParser::RPAREN);
      setState(1241);
      statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1242);
      match(JavaParser::FOR);
      setState(1243);
      match(JavaParser::LPAREN);
      setState(1247);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1244);
          variableModifier(); 
        }
        setState(1249);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
      }
      setState(1252);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::BOOLEAN:
        case JavaParser::BYTE:
        case JavaParser::CHAR:
        case JavaParser::DOUBLE:
        case JavaParser::FLOAT:
        case JavaParser::INT:
        case JavaParser::LONG:
        case JavaParser::SHORT:
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::AT:
        case JavaParser::IDENTIFIER: {
          setState(1250);
          typeType();
          break;
        }

        case JavaParser::VAR: {
          setState(1251);
          match(JavaParser::VAR);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1254);
      variableDeclaratorId();
      setState(1255);
      match(JavaParser::COLON);
      setState(1256);
      expression();
      setState(1257);
      match(JavaParser::RPAREN);
      setState(1258);
      statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1260);
      match(JavaParser::WHILE);
      setState(1261);
      parExpression();
      setState(1262);
      statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1264);
      match(JavaParser::DO);
      setState(1265);
      statement();
      setState(1266);
      match(JavaParser::WHILE);
      setState(1267);
      parExpression();
      setState(1268);
      match(JavaParser::SEMI);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1270);
      match(JavaParser::TRY);
      setState(1271);
      block();
      setState(1281);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::CATCH: {
          setState(1273); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(1272);
            catchClause();
            setState(1275); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == JavaParser::CATCH);
          setState(1278);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::FINALLY) {
            setState(1277);
            finallyBlock();
          }
          break;
        }

        case JavaParser::FINALLY: {
          setState(1280);
          finallyBlock();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1283);
      match(JavaParser::TRY);
      setState(1284);
      resourceSpecification();
      setState(1285);
      block();
      setState(1289);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::CATCH) {
        setState(1286);
        catchClause();
        setState(1291);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1293);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::FINALLY) {
        setState(1292);
        finallyBlock();
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1295);
      match(JavaParser::SWITCH);
      setState(1296);
      parExpression();
      setState(1297);
      switchBlock();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1299);
      match(JavaParser::SYNCHRONIZED);
      setState(1300);
      parExpression();
      setState(1301);
      block();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1303);
      match(JavaParser::RETURN);
      setState(1305);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1304);
        expression();
      }
      setState(1307);
      match(JavaParser::SEMI);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1308);
      match(JavaParser::THROW);
      setState(1309);
      expression();
      setState(1310);
      match(JavaParser::SEMI);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1312);
      match(JavaParser::BREAK);
      setState(1314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
        setState(1313);
        identifier();
      }
      setState(1316);
      match(JavaParser::SEMI);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1317);
      match(JavaParser::CONTINUE);
      setState(1319);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
        setState(1318);
        identifier();
      }
      setState(1321);
      match(JavaParser::SEMI);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1322);
      match(JavaParser::YIELD);
      setState(1323);
      expression();
      setState(1324);
      match(JavaParser::SEMI);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1326);
      match(JavaParser::SEMI);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1327);
      antlrcpp::downCast<StatementContext *>(_localctx)->statementExpression = expression();
      setState(1328);
      match(JavaParser::SEMI);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1330);
      antlrcpp::downCast<StatementContext *>(_localctx)->identifierLabel = identifier();
      setState(1331);
      match(JavaParser::COLON);
      setState(1332);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockContext ------------------------------------------------------------------

JavaParser::SwitchBlockContext::SwitchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchBlockContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::SwitchBlockContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchBlockStatementGroupContext *> JavaParser::SwitchBlockContext::switchBlockStatementGroup() {
  return getRuleContexts<JavaParser::SwitchBlockStatementGroupContext>();
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::SwitchBlockContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<JavaParser::SwitchBlockStatementGroupContext>(i);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlockContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlockContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}


size_t JavaParser::SwitchBlockContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlock;
}


std::any JavaParser::SwitchBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchBlock(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchBlockContext* JavaParser::switchBlock() {
  SwitchBlockContext *_localctx = _tracker.createInstance<SwitchBlockContext>(_ctx, getState());
  enterRule(_localctx, 182, JavaParser::RuleSwitchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1336);
    match(JavaParser::LBRACE);
    setState(1340);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1337);
        switchBlockStatementGroup(); 
      }
      setState(1342);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    }
    setState(1346);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT) {
      setState(1343);
      switchLabel();
      setState(1348);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1349);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

JavaParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::CatchClauseContext::CATCH() {
  return getToken(JavaParser::CATCH, 0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::CatchTypeContext* JavaParser::CatchClauseContext::catchType() {
  return getRuleContext<JavaParser::CatchTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::CatchClauseContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::BlockContext* JavaParser::CatchClauseContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::CatchClauseContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::CatchClauseContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::CatchClauseContext::getRuleIndex() const {
  return JavaParser::RuleCatchClause;
}


std::any JavaParser::CatchClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCatchClause(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CatchClauseContext* JavaParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 184, JavaParser::RuleCatchClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    match(JavaParser::CATCH);
    setState(1352);
    match(JavaParser::LPAREN);
    setState(1356);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL || _la == JavaParser::AT) {
      setState(1353);
      variableModifier();
      setState(1358);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1359);
    catchType();
    setState(1360);
    identifier();
    setState(1361);
    match(JavaParser::RPAREN);
    setState(1362);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

JavaParser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::CatchTypeContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::CatchTypeContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CatchTypeContext::BITOR() {
  return getTokens(JavaParser::BITOR);
}

tree::TerminalNode* JavaParser::CatchTypeContext::BITOR(size_t i) {
  return getToken(JavaParser::BITOR, i);
}


size_t JavaParser::CatchTypeContext::getRuleIndex() const {
  return JavaParser::RuleCatchType;
}


std::any JavaParser::CatchTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCatchType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CatchTypeContext* JavaParser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 186, JavaParser::RuleCatchType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    qualifiedName();
    setState(1369);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITOR) {
      setState(1365);
      match(JavaParser::BITOR);
      setState(1366);
      qualifiedName();
      setState(1371);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyBlockContext ------------------------------------------------------------------

JavaParser::FinallyBlockContext::FinallyBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FinallyBlockContext::FINALLY() {
  return getToken(JavaParser::FINALLY, 0);
}

JavaParser::BlockContext* JavaParser::FinallyBlockContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::FinallyBlockContext::getRuleIndex() const {
  return JavaParser::RuleFinallyBlock;
}


std::any JavaParser::FinallyBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFinallyBlock(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FinallyBlockContext* JavaParser::finallyBlock() {
  FinallyBlockContext *_localctx = _tracker.createInstance<FinallyBlockContext>(_ctx, getState());
  enterRule(_localctx, 188, JavaParser::RuleFinallyBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1372);
    match(JavaParser::FINALLY);
    setState(1373);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

JavaParser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ResourcesContext* JavaParser::ResourceSpecificationContext::resources() {
  return getRuleContext<JavaParser::ResourcesContext>(0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::ResourceSpecificationContext::getRuleIndex() const {
  return JavaParser::RuleResourceSpecification;
}


std::any JavaParser::ResourceSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResourceSpecification(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourceSpecificationContext* JavaParser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 190, JavaParser::RuleResourceSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    match(JavaParser::LPAREN);
    setState(1376);
    resources();
    setState(1378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(1377);
      match(JavaParser::SEMI);
    }
    setState(1380);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourcesContext ------------------------------------------------------------------

JavaParser::ResourcesContext::ResourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ResourceContext *> JavaParser::ResourcesContext::resource() {
  return getRuleContexts<JavaParser::ResourceContext>();
}

JavaParser::ResourceContext* JavaParser::ResourcesContext::resource(size_t i) {
  return getRuleContext<JavaParser::ResourceContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ResourcesContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ResourcesContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}


size_t JavaParser::ResourcesContext::getRuleIndex() const {
  return JavaParser::RuleResources;
}


std::any JavaParser::ResourcesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResources(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourcesContext* JavaParser::resources() {
  ResourcesContext *_localctx = _tracker.createInstance<ResourcesContext>(_ctx, getState());
  enterRule(_localctx, 192, JavaParser::RuleResources);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1382);
    resource();
    setState(1387);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1383);
        match(JavaParser::SEMI);
        setState(1384);
        resource(); 
      }
      setState(1389);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

JavaParser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::ResourceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ResourceContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::ResourceContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::ResourceContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::ResourceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::ResourceContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::ResourceContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

JavaParser::QualifiedNameContext* JavaParser::ResourceContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}


size_t JavaParser::ResourceContext::getRuleIndex() const {
  return JavaParser::RuleResource;
}


std::any JavaParser::ResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResource(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourceContext* JavaParser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 194, JavaParser::RuleResource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1407);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1393);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::FINAL || _la == JavaParser::AT) {
        setState(1390);
        variableModifier();
        setState(1395);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1401);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::IDENTIFIER: {
          setState(1396);
          classOrInterfaceType();
          setState(1397);
          variableDeclaratorId();
          break;
        }

        case JavaParser::VAR: {
          setState(1399);
          match(JavaParser::VAR);
          setState(1400);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1403);
      match(JavaParser::ASSIGN);
      setState(1404);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1406);
      qualifiedName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

JavaParser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlockStatementGroupContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlockStatementGroupContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchBlockStatementGroupContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchBlockStatementGroupContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlockStatementGroup;
}


std::any JavaParser::SwitchBlockStatementGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchBlockStatementGroup(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 196, JavaParser::RuleSwitchBlockStatementGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1409);
      switchLabel();
      setState(1412); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT);
    setState(1415); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1414);
      blockStatement();
      setState(1417); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

JavaParser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabelContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::TypeTypeContext* JavaParser::SwitchLabelContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::SwitchLabelContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::IdentifierContext* JavaParser::SwitchLabelContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabelContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabel;
}


std::any JavaParser::SwitchLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchLabel(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchLabelContext* JavaParser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 198, JavaParser::RuleSwitchLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1430);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1419);
        match(JavaParser::CASE);
        setState(1424);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
        case 1: {
          setState(1420);
          antlrcpp::downCast<SwitchLabelContext *>(_localctx)->constantExpression = expression();
          break;
        }

        case 2: {
          setState(1421);
          typeType();
          setState(1422);
          antlrcpp::downCast<SwitchLabelContext *>(_localctx)->varName = identifier();
          break;
        }

        default:
          break;
        }
        setState(1426);
        match(JavaParser::COLON);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1428);
        match(JavaParser::DEFAULT);
        setState(1429);
        match(JavaParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

JavaParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::ForInitContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

JavaParser::ExpressionListContext* JavaParser::ForInitContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ForInitContext::getRuleIndex() const {
  return JavaParser::RuleForInit;
}


std::any JavaParser::ForInitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitForInit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ForInitContext* JavaParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 200, JavaParser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1434);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1432);
      localVariableDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1433);
      expressionList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParExpressionContext ------------------------------------------------------------------

JavaParser::ParExpressionContext::ParExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ParExpressionContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::ParExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ParExpressionContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}


size_t JavaParser::ParExpressionContext::getRuleIndex() const {
  return JavaParser::RuleParExpression;
}


std::any JavaParser::ParExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitParExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ParExpressionContext* JavaParser::parExpression() {
  ParExpressionContext *_localctx = _tracker.createInstance<ParExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, JavaParser::RuleParExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    match(JavaParser::LPAREN);
    setState(1437);
    expression();
    setState(1438);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

JavaParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionListContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ExpressionListContext::getRuleIndex() const {
  return JavaParser::RuleExpressionList;
}


std::any JavaParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExpressionListContext* JavaParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 204, JavaParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1440);
    expression();
    setState(1445);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1441);
      match(JavaParser::COMMA);
      setState(1442);
      expression();
      setState(1447);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodCallContext ------------------------------------------------------------------

JavaParser::MethodCallContext::MethodCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArgumentsContext* JavaParser::MethodCallContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodCallContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodCallContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::MethodCallContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::MethodCallContext::getRuleIndex() const {
  return JavaParser::RuleMethodCall;
}


std::any JavaParser::MethodCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodCall(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodCallContext* JavaParser::methodCall() {
  MethodCallContext *_localctx = _tracker.createInstance<MethodCallContext>(_ctx, getState());
  enterRule(_localctx, 206, JavaParser::RuleMethodCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1451);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        setState(1448);
        identifier();
        break;
      }

      case JavaParser::THIS: {
        setState(1449);
        match(JavaParser::THIS);
        break;
      }

      case JavaParser::SUPER: {
        setState(1450);
        match(JavaParser::SUPER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1453);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

JavaParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SwitchExpressionContext* JavaParser::PostfixExpressionContext::switchExpression() {
  return getRuleContext<JavaParser::SwitchExpressionContext>(0);
}

JavaParser::PostfixExpressionContext* JavaParser::PostfixExpressionContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PostfixExpressionContext::INC() {
  return getToken(JavaParser::INC, 0);
}

tree::TerminalNode* JavaParser::PostfixExpressionContext::DEC() {
  return getToken(JavaParser::DEC, 0);
}


size_t JavaParser::PostfixExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostfixExpression;
}


std::any JavaParser::PostfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPostfixExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::PostfixExpressionContext* JavaParser::postfixExpression() {
   return postfixExpression(0);
}

JavaParser::PostfixExpressionContext* JavaParser::postfixExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, parentState);
  JavaParser::PostfixExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 208;
  enterRecursionRule(_localctx, 208, JavaParser::RulePostfixExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1456);
    switchExpression();
    _ctx->stop = _input->LT(-1);
    setState(1462);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
        setState(1458);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1459);
        antlrcpp::downCast<PostfixExpressionContext *>(_localctx)->postfix = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == JavaParser::INC

        || _la == JavaParser::DEC)) {
          antlrcpp::downCast<PostfixExpressionContext *>(_localctx)->postfix = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        } 
      }
      setState(1464);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrefixExpressionContext ------------------------------------------------------------------

JavaParser::PrefixExpressionContext::PrefixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrefixExpressionContext* JavaParser::PrefixExpressionContext::prefixExpression() {
  return getRuleContext<JavaParser::PrefixExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::ADD() {
  return getToken(JavaParser::ADD, 0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::SUB() {
  return getToken(JavaParser::SUB, 0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::INC() {
  return getToken(JavaParser::INC, 0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::DEC() {
  return getToken(JavaParser::DEC, 0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::TILDE() {
  return getToken(JavaParser::TILDE, 0);
}

tree::TerminalNode* JavaParser::PrefixExpressionContext::BANG() {
  return getToken(JavaParser::BANG, 0);
}

JavaParser::PostfixExpressionContext* JavaParser::PrefixExpressionContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}


size_t JavaParser::PrefixExpressionContext::getRuleIndex() const {
  return JavaParser::RulePrefixExpression;
}


std::any JavaParser::PrefixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrefixExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PrefixExpressionContext* JavaParser::prefixExpression() {
  PrefixExpressionContext *_localctx = _tracker.createInstance<PrefixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, JavaParser::RulePrefixExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1468);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB: {
        enterOuterAlt(_localctx, 1);
        setState(1465);
        antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->prefix = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 90) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 90)) & 15363) != 0))) {
          antlrcpp::downCast<PrefixExpressionContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1466);
        prefixExpression();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1467);
        postfixExpression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeExpressionContext ------------------------------------------------------------------

JavaParser::TypeExpressionContext::TypeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeExpressionContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeExpressionContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeExpressionContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

tree::TerminalNode* JavaParser::TypeExpressionContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::TypeExpressionContext* JavaParser::TypeExpressionContext::typeExpression() {
  return getRuleContext<JavaParser::TypeExpressionContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeExpressionContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeExpressionContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeExpressionContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::TypeExpressionContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}

tree::TerminalNode* JavaParser::TypeExpressionContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::CreatorContext* JavaParser::TypeExpressionContext::creator() {
  return getRuleContext<JavaParser::CreatorContext>(0);
}

JavaParser::PrefixExpressionContext* JavaParser::TypeExpressionContext::prefixExpression() {
  return getRuleContext<JavaParser::PrefixExpressionContext>(0);
}


size_t JavaParser::TypeExpressionContext::getRuleIndex() const {
  return JavaParser::RuleTypeExpression;
}


std::any JavaParser::TypeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeExpressionContext* JavaParser::typeExpression() {
  TypeExpressionContext *_localctx = _tracker.createInstance<TypeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, JavaParser::RuleTypeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1491);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1470);
      match(JavaParser::LPAREN);
      setState(1474);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1471);
          annotation(); 
        }
        setState(1476);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
      }
      setState(1477);
      typeType();
      setState(1482);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(1478);
        match(JavaParser::BITAND);
        setState(1479);
        typeType();
        setState(1484);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1485);
      match(JavaParser::RPAREN);
      setState(1486);
      typeExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1488);
      match(JavaParser::NEW);
      setState(1489);
      creator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1490);
      prefixExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

JavaParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeExpressionContext* JavaParser::MultiplicativeExpressionContext::typeExpression() {
  return getRuleContext<JavaParser::TypeExpressionContext>(0);
}

JavaParser::MultiplicativeExpressionContext* JavaParser::MultiplicativeExpressionContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* JavaParser::MultiplicativeExpressionContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}

tree::TerminalNode* JavaParser::MultiplicativeExpressionContext::DIV() {
  return getToken(JavaParser::DIV, 0);
}

tree::TerminalNode* JavaParser::MultiplicativeExpressionContext::MOD() {
  return getToken(JavaParser::MOD, 0);
}


size_t JavaParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return JavaParser::RuleMultiplicativeExpression;
}


std::any JavaParser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::MultiplicativeExpressionContext* JavaParser::multiplicativeExpression() {
   return multiplicativeExpression(0);
}

JavaParser::MultiplicativeExpressionContext* JavaParser::multiplicativeExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, parentState);
  JavaParser::MultiplicativeExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 214;
  enterRecursionRule(_localctx, 214, JavaParser::RuleMultiplicativeExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1494);
    typeExpression();
    _ctx->stop = _input->LT(-1);
    setState(1501);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
        setState(1496);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1497);
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->bop = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 104) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 104)) & 35) != 0))) {
          antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1498);
        typeExpression(); 
      }
      setState(1503);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

JavaParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MultiplicativeExpressionContext* JavaParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}

JavaParser::AdditiveExpressionContext* JavaParser::AdditiveExpressionContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* JavaParser::AdditiveExpressionContext::ADD() {
  return getToken(JavaParser::ADD, 0);
}

tree::TerminalNode* JavaParser::AdditiveExpressionContext::SUB() {
  return getToken(JavaParser::SUB, 0);
}


size_t JavaParser::AdditiveExpressionContext::getRuleIndex() const {
  return JavaParser::RuleAdditiveExpression;
}


std::any JavaParser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::AdditiveExpressionContext* JavaParser::additiveExpression() {
   return additiveExpression(0);
}

JavaParser::AdditiveExpressionContext* JavaParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  JavaParser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 216;
  enterRecursionRule(_localctx, 216, JavaParser::RuleAdditiveExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1505);
    multiplicativeExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1512);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
        setState(1507);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1508);
        antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->bop = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == JavaParser::ADD

        || _la == JavaParser::SUB)) {
          antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1509);
        multiplicativeExpression(0); 
      }
      setState(1514);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

JavaParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AdditiveExpressionContext* JavaParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}

JavaParser::ShiftExpressionContext* JavaParser::ShiftExpressionContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ShiftExpressionContext::LT() {
  return getTokens(JavaParser::LT);
}

tree::TerminalNode* JavaParser::ShiftExpressionContext::LT(size_t i) {
  return getToken(JavaParser::LT, i);
}

std::vector<tree::TerminalNode *> JavaParser::ShiftExpressionContext::GT() {
  return getTokens(JavaParser::GT);
}

tree::TerminalNode* JavaParser::ShiftExpressionContext::GT(size_t i) {
  return getToken(JavaParser::GT, i);
}


size_t JavaParser::ShiftExpressionContext::getRuleIndex() const {
  return JavaParser::RuleShiftExpression;
}


std::any JavaParser::ShiftExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitShiftExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::ShiftExpressionContext* JavaParser::shiftExpression() {
   return shiftExpression(0);
}

JavaParser::ShiftExpressionContext* JavaParser::shiftExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, parentState);
  JavaParser::ShiftExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 218;
  enterRecursionRule(_localctx, 218, JavaParser::RuleShiftExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1516);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1531);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
        setState(1518);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1526);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
        case 1: {
          setState(1519);
          match(JavaParser::LT);
          setState(1520);
          match(JavaParser::LT);
          break;
        }

        case 2: {
          setState(1521);
          match(JavaParser::GT);
          setState(1522);
          match(JavaParser::GT);
          setState(1523);
          match(JavaParser::GT);
          break;
        }

        case 3: {
          setState(1524);
          match(JavaParser::GT);
          setState(1525);
          match(JavaParser::GT);
          break;
        }

        default:
          break;
        }
        setState(1528);
        additiveExpression(0); 
      }
      setState(1533);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

JavaParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ShiftExpressionContext* JavaParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}

JavaParser::RelationalExpressionContext* JavaParser::RelationalExpressionContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* JavaParser::RelationalExpressionContext::LE() {
  return getToken(JavaParser::LE, 0);
}

tree::TerminalNode* JavaParser::RelationalExpressionContext::GE() {
  return getToken(JavaParser::GE, 0);
}

tree::TerminalNode* JavaParser::RelationalExpressionContext::GT() {
  return getToken(JavaParser::GT, 0);
}

tree::TerminalNode* JavaParser::RelationalExpressionContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::RelationalExpressionContext::INSTANCEOF() {
  return getToken(JavaParser::INSTANCEOF, 0);
}

JavaParser::TypeTypeContext* JavaParser::RelationalExpressionContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::PatternContext* JavaParser::RelationalExpressionContext::pattern() {
  return getRuleContext<JavaParser::PatternContext>(0);
}


size_t JavaParser::RelationalExpressionContext::getRuleIndex() const {
  return JavaParser::RuleRelationalExpression;
}


std::any JavaParser::RelationalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRelationalExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::RelationalExpressionContext* JavaParser::relationalExpression() {
   return relationalExpression(0);
}

JavaParser::RelationalExpressionContext* JavaParser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  JavaParser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 220;
  enterRecursionRule(_localctx, 220, JavaParser::RuleRelationalExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1535);
    shiftExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1548);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1546);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(1537);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1538);
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 88) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 88)) & 387) != 0))) {
            antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1539);
          shiftExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(1540);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1541);
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->bop = match(JavaParser::INSTANCEOF);
          setState(1544);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
          case 1: {
            setState(1542);
            typeType();
            break;
          }

          case 2: {
            setState(1543);
            pattern();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1550);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

JavaParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RelationalExpressionContext* JavaParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

JavaParser::EqualityExpressionContext* JavaParser::EqualityExpressionContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* JavaParser::EqualityExpressionContext::EQUAL() {
  return getToken(JavaParser::EQUAL, 0);
}

tree::TerminalNode* JavaParser::EqualityExpressionContext::NOTEQUAL() {
  return getToken(JavaParser::NOTEQUAL, 0);
}


size_t JavaParser::EqualityExpressionContext::getRuleIndex() const {
  return JavaParser::RuleEqualityExpression;
}


std::any JavaParser::EqualityExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEqualityExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::EqualityExpressionContext* JavaParser::equalityExpression() {
   return equalityExpression(0);
}

JavaParser::EqualityExpressionContext* JavaParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  JavaParser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 222;
  enterRecursionRule(_localctx, 222, JavaParser::RuleEqualityExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1552);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1559);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
        setState(1554);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1555);
        antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->bop = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == JavaParser::EQUAL

        || _la == JavaParser::NOTEQUAL)) {
          antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1556);
        relationalExpression(0); 
      }
      setState(1561);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitwiseAndExpressionContext ------------------------------------------------------------------

JavaParser::BitwiseAndExpressionContext::BitwiseAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EqualityExpressionContext* JavaParser::BitwiseAndExpressionContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}

JavaParser::BitwiseAndExpressionContext* JavaParser::BitwiseAndExpressionContext::bitwiseAndExpression() {
  return getRuleContext<JavaParser::BitwiseAndExpressionContext>(0);
}

tree::TerminalNode* JavaParser::BitwiseAndExpressionContext::BITAND() {
  return getToken(JavaParser::BITAND, 0);
}


size_t JavaParser::BitwiseAndExpressionContext::getRuleIndex() const {
  return JavaParser::RuleBitwiseAndExpression;
}


std::any JavaParser::BitwiseAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBitwiseAndExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::BitwiseAndExpressionContext* JavaParser::bitwiseAndExpression() {
   return bitwiseAndExpression(0);
}

JavaParser::BitwiseAndExpressionContext* JavaParser::bitwiseAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::BitwiseAndExpressionContext *_localctx = _tracker.createInstance<BitwiseAndExpressionContext>(_ctx, parentState);
  JavaParser::BitwiseAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 224;
  enterRecursionRule(_localctx, 224, JavaParser::RuleBitwiseAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1563);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1570);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitwiseAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwiseAndExpression);
        setState(1565);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1566);
        match(JavaParser::BITAND);
        setState(1567);
        equalityExpression(0); 
      }
      setState(1572);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitwiseXorExpressionContext ------------------------------------------------------------------

JavaParser::BitwiseXorExpressionContext::BitwiseXorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BitwiseAndExpressionContext* JavaParser::BitwiseXorExpressionContext::bitwiseAndExpression() {
  return getRuleContext<JavaParser::BitwiseAndExpressionContext>(0);
}

JavaParser::BitwiseXorExpressionContext* JavaParser::BitwiseXorExpressionContext::bitwiseXorExpression() {
  return getRuleContext<JavaParser::BitwiseXorExpressionContext>(0);
}

tree::TerminalNode* JavaParser::BitwiseXorExpressionContext::CARET() {
  return getToken(JavaParser::CARET, 0);
}


size_t JavaParser::BitwiseXorExpressionContext::getRuleIndex() const {
  return JavaParser::RuleBitwiseXorExpression;
}


std::any JavaParser::BitwiseXorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBitwiseXorExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::BitwiseXorExpressionContext* JavaParser::bitwiseXorExpression() {
   return bitwiseXorExpression(0);
}

JavaParser::BitwiseXorExpressionContext* JavaParser::bitwiseXorExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::BitwiseXorExpressionContext *_localctx = _tracker.createInstance<BitwiseXorExpressionContext>(_ctx, parentState);
  JavaParser::BitwiseXorExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 226;
  enterRecursionRule(_localctx, 226, JavaParser::RuleBitwiseXorExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1574);
    bitwiseAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1581);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitwiseXorExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwiseXorExpression);
        setState(1576);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1577);
        match(JavaParser::CARET);
        setState(1578);
        bitwiseAndExpression(0); 
      }
      setState(1583);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BitwiseOrExpressionContext ------------------------------------------------------------------

JavaParser::BitwiseOrExpressionContext::BitwiseOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BitwiseXorExpressionContext* JavaParser::BitwiseOrExpressionContext::bitwiseXorExpression() {
  return getRuleContext<JavaParser::BitwiseXorExpressionContext>(0);
}

JavaParser::BitwiseOrExpressionContext* JavaParser::BitwiseOrExpressionContext::bitwiseOrExpression() {
  return getRuleContext<JavaParser::BitwiseOrExpressionContext>(0);
}

tree::TerminalNode* JavaParser::BitwiseOrExpressionContext::BITOR() {
  return getToken(JavaParser::BITOR, 0);
}


size_t JavaParser::BitwiseOrExpressionContext::getRuleIndex() const {
  return JavaParser::RuleBitwiseOrExpression;
}


std::any JavaParser::BitwiseOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBitwiseOrExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::BitwiseOrExpressionContext* JavaParser::bitwiseOrExpression() {
   return bitwiseOrExpression(0);
}

JavaParser::BitwiseOrExpressionContext* JavaParser::bitwiseOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::BitwiseOrExpressionContext *_localctx = _tracker.createInstance<BitwiseOrExpressionContext>(_ctx, parentState);
  JavaParser::BitwiseOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 228;
  enterRecursionRule(_localctx, 228, JavaParser::RuleBitwiseOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1585);
    bitwiseXorExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1592);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BitwiseOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwiseOrExpression);
        setState(1587);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1588);
        match(JavaParser::BITOR);
        setState(1589);
        bitwiseXorExpression(0); 
      }
      setState(1594);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

JavaParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BitwiseOrExpressionContext* JavaParser::LogicalAndExpressionContext::bitwiseOrExpression() {
  return getRuleContext<JavaParser::BitwiseOrExpressionContext>(0);
}

JavaParser::LogicalAndExpressionContext* JavaParser::LogicalAndExpressionContext::logicalAndExpression() {
  return getRuleContext<JavaParser::LogicalAndExpressionContext>(0);
}

tree::TerminalNode* JavaParser::LogicalAndExpressionContext::AND() {
  return getToken(JavaParser::AND, 0);
}


size_t JavaParser::LogicalAndExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLogicalAndExpression;
}


std::any JavaParser::LogicalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLogicalAndExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::LogicalAndExpressionContext* JavaParser::logicalAndExpression() {
   return logicalAndExpression(0);
}

JavaParser::LogicalAndExpressionContext* JavaParser::logicalAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, parentState);
  JavaParser::LogicalAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 230;
  enterRecursionRule(_localctx, 230, JavaParser::RuleLogicalAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1596);
    bitwiseOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1603);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LogicalAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLogicalAndExpression);
        setState(1598);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1599);
        match(JavaParser::AND);
        setState(1600);
        bitwiseOrExpression(0); 
      }
      setState(1605);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

JavaParser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LogicalAndExpressionContext* JavaParser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContext<JavaParser::LogicalAndExpressionContext>(0);
}

JavaParser::LogicalOrExpressionContext* JavaParser::LogicalOrExpressionContext::logicalOrExpression() {
  return getRuleContext<JavaParser::LogicalOrExpressionContext>(0);
}

tree::TerminalNode* JavaParser::LogicalOrExpressionContext::OR() {
  return getToken(JavaParser::OR, 0);
}


size_t JavaParser::LogicalOrExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLogicalOrExpression;
}


std::any JavaParser::LogicalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLogicalOrExpression(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::LogicalOrExpressionContext* JavaParser::logicalOrExpression() {
   return logicalOrExpression(0);
}

JavaParser::LogicalOrExpressionContext* JavaParser::logicalOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, parentState);
  JavaParser::LogicalOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 232;
  enterRecursionRule(_localctx, 232, JavaParser::RuleLogicalOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1607);
    logicalAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(1614);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LogicalOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLogicalOrExpression);
        setState(1609);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1610);
        match(JavaParser::OR);
        setState(1611);
        logicalAndExpression(0); 
      }
      setState(1616);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TernaryExpressionContext ------------------------------------------------------------------

JavaParser::TernaryExpressionContext::TernaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LogicalOrExpressionContext* JavaParser::TernaryExpressionContext::logicalOrExpression() {
  return getRuleContext<JavaParser::LogicalOrExpressionContext>(0);
}

JavaParser::ExpressionContext* JavaParser::TernaryExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::TernaryExpressionContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::TernaryExpressionContext* JavaParser::TernaryExpressionContext::ternaryExpression() {
  return getRuleContext<JavaParser::TernaryExpressionContext>(0);
}

tree::TerminalNode* JavaParser::TernaryExpressionContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

JavaParser::LambdaExpressionContext* JavaParser::TernaryExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::TernaryExpressionContext::getRuleIndex() const {
  return JavaParser::RuleTernaryExpression;
}


std::any JavaParser::TernaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTernaryExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TernaryExpressionContext* JavaParser::ternaryExpression() {
  TernaryExpressionContext *_localctx = _tracker.createInstance<TernaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, JavaParser::RuleTernaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1617);
      logicalOrExpression(0);
      setState(1618);
      antlrcpp::downCast<TernaryExpressionContext *>(_localctx)->bop = match(JavaParser::QUESTION);
      setState(1619);
      expression();
      setState(1620);
      match(JavaParser::COLON);
      setState(1621);
      ternaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1623);
      logicalOrExpression(0);
      setState(1624);
      antlrcpp::downCast<TernaryExpressionContext *>(_localctx)->bop = match(JavaParser::QUESTION);
      setState(1625);
      expression();
      setState(1626);
      match(JavaParser::COLON);
      setState(1627);
      lambdaExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1629);
      logicalOrExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

JavaParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TernaryExpressionContext* JavaParser::AssignmentExpressionContext::ternaryExpression() {
  return getRuleContext<JavaParser::TernaryExpressionContext>(0);
}

JavaParser::ExpressionContext* JavaParser::AssignmentExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::ADD_ASSIGN() {
  return getToken(JavaParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::SUB_ASSIGN() {
  return getToken(JavaParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::MUL_ASSIGN() {
  return getToken(JavaParser::MUL_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::DIV_ASSIGN() {
  return getToken(JavaParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::AND_ASSIGN() {
  return getToken(JavaParser::AND_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::OR_ASSIGN() {
  return getToken(JavaParser::OR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::XOR_ASSIGN() {
  return getToken(JavaParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::RSHIFT_ASSIGN() {
  return getToken(JavaParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::URSHIFT_ASSIGN() {
  return getToken(JavaParser::URSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::LSHIFT_ASSIGN() {
  return getToken(JavaParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::AssignmentExpressionContext::MOD_ASSIGN() {
  return getToken(JavaParser::MOD_ASSIGN, 0);
}


size_t JavaParser::AssignmentExpressionContext::getRuleIndex() const {
  return JavaParser::RuleAssignmentExpression;
}


std::any JavaParser::AssignmentExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AssignmentExpressionContext* JavaParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, JavaParser::RuleAssignmentExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1637);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1632);
      ternaryExpression();
      setState(1633);
      antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->bop = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 87) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 87)) & 17171480577) != 0))) {
        antlrcpp::downCast<AssignmentExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1634);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1636);
      ternaryExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

JavaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AssignmentExpressionContext* JavaParser::ExpressionContext::assignmentExpression() {
  return getRuleContext<JavaParser::AssignmentExpressionContext>(0);
}

JavaParser::LambdaExpressionContext* JavaParser::ExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::ExpressionContext::getRuleIndex() const {
  return JavaParser::RuleExpression;
}


std::any JavaParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExpressionContext* JavaParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, JavaParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1639);
      assignmentExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1640);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

JavaParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::PatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::PatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::PatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::PatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PatternContext::getRuleIndex() const {
  return JavaParser::RulePattern;
}


std::any JavaParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PatternContext* JavaParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 240, JavaParser::RulePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1646);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1643);
        variableModifier(); 
      }
      setState(1648);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    }
    setState(1649);
    typeType();
    setState(1653);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1650);
      annotation();
      setState(1655);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1656);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

JavaParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaParametersContext* JavaParser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<JavaParser::LambdaParametersContext>(0);
}

tree::TerminalNode* JavaParser::LambdaExpressionContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

JavaParser::LambdaBodyContext* JavaParser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<JavaParser::LambdaBodyContext>(0);
}


size_t JavaParser::LambdaExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLambdaExpression;
}


std::any JavaParser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaExpressionContext* JavaParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, JavaParser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1658);
    lambdaParameters();
    setState(1659);
    match(JavaParser::ARROW);
    setState(1660);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

JavaParser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::LambdaParametersContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::LambdaParametersContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::FormalParameterListContext* JavaParser::LambdaParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LambdaLVTIListContext* JavaParser::LambdaParametersContext::lambdaLVTIList() {
  return getRuleContext<JavaParser::LambdaLVTIListContext>(0);
}


size_t JavaParser::LambdaParametersContext::getRuleIndex() const {
  return JavaParser::RuleLambdaParameters;
}


std::any JavaParser::LambdaParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaParametersContext* JavaParser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 244, JavaParser::RuleLambdaParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1684);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1662);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1663);
      match(JavaParser::LPAREN);
      setState(1665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 8358399450686851109) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(1664);
        formalParameterList();
      }
      setState(1667);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1668);
      match(JavaParser::LPAREN);
      setState(1669);
      identifier();
      setState(1674);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::COMMA) {
        setState(1670);
        match(JavaParser::COMMA);
        setState(1671);
        identifier();
        setState(1676);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1677);
      match(JavaParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1679);
      match(JavaParser::LPAREN);
      setState(1681);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::FINAL

      || _la == JavaParser::VAR || _la == JavaParser::AT) {
        setState(1680);
        lambdaLVTIList();
      }
      setState(1683);
      match(JavaParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

JavaParser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::LambdaBodyContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::LambdaBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::LambdaBodyContext::getRuleIndex() const {
  return JavaParser::RuleLambdaBody;
}


std::any JavaParser::LambdaBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaBodyContext* JavaParser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 246, JavaParser::RuleLambdaBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1688);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1686);
        expression();
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1687);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

JavaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryContext::getRuleIndex() const {
  return JavaParser::RulePrimary;
}

void JavaParser::PrimaryContext::copyFrom(PrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExplicitGenericInvocationExpressionContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExplicitGenericInvocationExpressionContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::ExplicitGenericInvocationExpressionContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}

tree::TerminalNode* JavaParser::ExplicitGenericInvocationExpressionContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

JavaParser::ArgumentsContext* JavaParser::ExplicitGenericInvocationExpressionContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationExpressionContext::ExplicitGenericInvocationExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExplicitGenericInvocationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExplicitGenericInvocationExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ThisExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ThisExpressionContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

JavaParser::ThisExpressionContext::ThisExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ThisExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitThisExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MemberReferenceExpressionContext ------------------------------------------------------------------

JavaParser::PrimaryContext* JavaParser::MemberReferenceExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

tree::TerminalNode* JavaParser::MemberReferenceExpressionContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

JavaParser::IdentifierContext* JavaParser::MemberReferenceExpressionContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::MethodCallContext* JavaParser::MemberReferenceExpressionContext::methodCall() {
  return getRuleContext<JavaParser::MethodCallContext>(0);
}

tree::TerminalNode* JavaParser::MemberReferenceExpressionContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::MemberReferenceExpressionContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::InnerCreatorContext* JavaParser::MemberReferenceExpressionContext::innerCreator() {
  return getRuleContext<JavaParser::InnerCreatorContext>(0);
}

JavaParser::SuperSuffixContext* JavaParser::MemberReferenceExpressionContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::MemberReferenceExpressionContext::explicitGenericInvocation() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationContext>(0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::MemberReferenceExpressionContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::MemberReferenceExpressionContext::MemberReferenceExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::MemberReferenceExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMemberReferenceExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodCallExpressionContext ------------------------------------------------------------------

JavaParser::MethodCallContext* JavaParser::MethodCallExpressionContext::methodCall() {
  return getRuleContext<JavaParser::MethodCallContext>(0);
}

JavaParser::MethodCallExpressionContext::MethodCallExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::MethodCallExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodCallExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MethodReferenceExpressionContext ------------------------------------------------------------------

JavaParser::TypeTypeContext* JavaParser::MethodReferenceExpressionContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::MethodReferenceExpressionContext::COLONCOLON() {
  return getToken(JavaParser::COLONCOLON, 0);
}

JavaParser::IdentifierContext* JavaParser::MethodReferenceExpressionContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodReferenceExpressionContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReferenceExpressionContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::MethodReferenceExpressionContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::PrimaryContext* JavaParser::MethodReferenceExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::MethodReferenceExpressionContext::MethodReferenceExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::MethodReferenceExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodReferenceExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParExprContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ParExprContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::ParExprContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ParExprContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ParExprContext::ParExprContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ParExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitParExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralExpressionContext ------------------------------------------------------------------

JavaParser::LiteralContext* JavaParser::LiteralExpressionContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::LiteralExpressionContext::LiteralExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::LiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassExpressionContext ------------------------------------------------------------------

JavaParser::TypeTypeOrVoidContext* JavaParser::ClassExpressionContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

tree::TerminalNode* JavaParser::ClassExpressionContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::ClassExpressionContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::ClassExpressionContext::ClassExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ClassExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SuperExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::SuperExpressionContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::SuperExpressionContext::SuperExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::SuperExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSuperExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayAccessExpressionContext ------------------------------------------------------------------

JavaParser::PrimaryContext* JavaParser::ArrayAccessExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

tree::TerminalNode* JavaParser::ArrayAccessExpressionContext::LBRACK() {
  return getToken(JavaParser::LBRACK, 0);
}

JavaParser::ExpressionContext* JavaParser::ArrayAccessExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ArrayAccessExpressionContext::RBRACK() {
  return getToken(JavaParser::RBRACK, 0);
}

JavaParser::ArrayAccessExpressionContext::ArrayAccessExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ArrayAccessExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArrayAccessExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdentifierExpressionContext ------------------------------------------------------------------

JavaParser::IdentifierContext* JavaParser::IdentifierExpressionContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::IdentifierExpressionContext::IdentifierExpressionContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::IdentifierExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PrimaryContext* JavaParser::primary() {
   return primary(0);
}

JavaParser::PrimaryContext* JavaParser::primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, parentState);
  JavaParser::PrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 248;
  enterRecursionRule(_localctx, 248, JavaParser::RulePrimary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ParExprContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1691);
      match(JavaParser::LPAREN);
      setState(1692);
      expression();
      setState(1693);
      match(JavaParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ThisExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1695);
      match(JavaParser::THIS);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SuperExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1696);
      match(JavaParser::SUPER);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<LiteralExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1697);
      literal();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<IdentifierExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1698);
      identifier();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ClassExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1699);
      typeTypeOrVoid();
      setState(1700);
      match(JavaParser::DOT);
      setState(1701);
      match(JavaParser::CLASS);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ExplicitGenericInvocationExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1703);
      nonWildcardTypeArguments();
      setState(1707);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::SUPER:
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::IDENTIFIER: {
          setState(1704);
          explicitGenericInvocationSuffix();
          break;
        }

        case JavaParser::THIS: {
          setState(1705);
          match(JavaParser::THIS);
          setState(1706);
          arguments();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<MethodCallExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1709);
      methodCall();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<MethodReferenceExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1710);
      typeType();
      setState(1711);
      match(JavaParser::COLONCOLON);
      setState(1717);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::LT:
        case JavaParser::IDENTIFIER: {
          setState(1713);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1712);
            typeArguments();
          }
          setState(1715);
          identifier();
          break;
        }

        case JavaParser::NEW: {
          setState(1716);
          match(JavaParser::NEW);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<MethodReferenceExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1719);
      classType();
      setState(1720);
      match(JavaParser::COLONCOLON);
      setState(1722);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1721);
        typeArguments();
      }
      setState(1724);
      match(JavaParser::NEW);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1755);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1753);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ArrayAccessExpressionContext>(_tracker.createInstance<PrimaryContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePrimary);
          setState(1728);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(1729);
          match(JavaParser::LBRACK);
          setState(1730);
          expression();
          setState(1731);
          match(JavaParser::RBRACK);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<MemberReferenceExpressionContext>(_tracker.createInstance<PrimaryContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePrimary);
          setState(1733);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(1734);
          antlrcpp::downCast<MemberReferenceExpressionContext *>(_localctx)->bop = match(JavaParser::DOT);
          setState(1745);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
          case 1: {
            setState(1735);
            identifier();
            break;
          }

          case 2: {
            setState(1736);
            methodCall();
            break;
          }

          case 3: {
            setState(1737);
            match(JavaParser::THIS);
            break;
          }

          case 4: {
            setState(1738);
            match(JavaParser::NEW);
            setState(1740);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == JavaParser::LT) {
              setState(1739);
              nonWildcardTypeArguments();
            }
            setState(1742);
            innerCreator();
            break;
          }

          case 5: {
            setState(1743);
            superSuffix();
            break;
          }

          case 6: {
            setState(1744);
            explicitGenericInvocation();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<MethodReferenceExpressionContext>(_tracker.createInstance<PrimaryContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePrimary);
          setState(1747);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1748);
          match(JavaParser::COLONCOLON);
          setState(1750);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1749);
            typeArguments();
          }
          setState(1752);
          identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(1757);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SwitchExpressionContext ------------------------------------------------------------------

JavaParser::SwitchExpressionContext::SwitchExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

JavaParser::ParExpressionContext* JavaParser::SwitchExpressionContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchLabeledRuleContext *> JavaParser::SwitchExpressionContext::switchLabeledRule() {
  return getRuleContexts<JavaParser::SwitchLabeledRuleContext>();
}

JavaParser::SwitchLabeledRuleContext* JavaParser::SwitchExpressionContext::switchLabeledRule(size_t i) {
  return getRuleContext<JavaParser::SwitchLabeledRuleContext>(i);
}

JavaParser::PrimaryContext* JavaParser::SwitchExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::SwitchExpressionContext::getRuleIndex() const {
  return JavaParser::RuleSwitchExpression;
}


std::any JavaParser::SwitchExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchExpressionContext* JavaParser::switchExpression() {
  SwitchExpressionContext *_localctx = _tracker.createInstance<SwitchExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, JavaParser::RuleSwitchExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1770);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SWITCH: {
        enterOuterAlt(_localctx, 1);
        setState(1758);
        match(JavaParser::SWITCH);
        setState(1759);
        parExpression();
        setState(1760);
        match(JavaParser::LBRACE);
        setState(1764);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::CASE

        || _la == JavaParser::DEFAULT) {
          setState(1761);
          switchLabeledRule();
          setState(1766);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1767);
        match(JavaParser::RBRACE);
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1769);
        primary(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabeledRuleContext ------------------------------------------------------------------

JavaParser::SwitchLabeledRuleContext::SwitchLabeledRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::SwitchLabeledRuleContext::switchRuleOutcome() {
  return getRuleContext<JavaParser::SwitchRuleOutcomeContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::ExpressionListContext* JavaParser::SwitchLabeledRuleContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

JavaParser::GuardedPatternContext* JavaParser::SwitchLabeledRuleContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabeledRuleContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabeledRule;
}


std::any JavaParser::SwitchLabeledRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchLabeledRule(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchLabeledRuleContext* JavaParser::switchLabeledRule() {
  SwitchLabeledRuleContext *_localctx = _tracker.createInstance<SwitchLabeledRuleContext>(_ctx, getState());
  enterRule(_localctx, 252, JavaParser::RuleSwitchLabeledRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1772);
        match(JavaParser::CASE);
        setState(1775);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
        case 1: {
          setState(1773);
          expressionList();
          break;
        }

        case 2: {
          setState(1774);
          guardedPattern(0);
          break;
        }

        default:
          break;
        }
        setState(1777);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1778);
        switchRuleOutcome();
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1780);
        match(JavaParser::DEFAULT);
        setState(1781);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1782);
        switchRuleOutcome();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardedPatternContext ------------------------------------------------------------------

JavaParser::GuardedPatternContext::GuardedPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::GuardedPatternContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::GuardedPatternContext* JavaParser::GuardedPatternContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::TypeTypeContext* JavaParser::GuardedPatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::GuardedPatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::GuardedPatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::GuardedPatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::GuardedPatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::GuardedPatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::GuardedPatternContext::AND() {
  return getTokens(JavaParser::AND);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::AND(size_t i) {
  return getToken(JavaParser::AND, i);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::GuardedPatternContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::GuardedPatternContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::GuardedPatternContext::getRuleIndex() const {
  return JavaParser::RuleGuardedPattern;
}


std::any JavaParser::GuardedPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitGuardedPattern(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::GuardedPatternContext* JavaParser::guardedPattern() {
   return guardedPattern(0);
}

JavaParser::GuardedPatternContext* JavaParser::guardedPattern(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::GuardedPatternContext *_localctx = _tracker.createInstance<GuardedPatternContext>(_ctx, parentState);
  JavaParser::GuardedPatternContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 254;
  enterRecursionRule(_localctx, 254, JavaParser::RuleGuardedPattern, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1811);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LPAREN: {
        setState(1786);
        match(JavaParser::LPAREN);
        setState(1787);
        guardedPattern(0);
        setState(1788);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1793);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1790);
            variableModifier(); 
          }
          setState(1795);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
        }
        setState(1796);
        typeType();
        setState(1800);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(1797);
          annotation();
          setState(1802);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1803);
        identifier();
        setState(1808);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1804);
            match(JavaParser::AND);
            setState(1805);
            expression(); 
          }
          setState(1810);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1818);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GuardedPatternContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGuardedPattern);
        setState(1813);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1814);
        match(JavaParser::AND);
        setState(1815);
        expression(); 
      }
      setState(1820);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SwitchRuleOutcomeContext ------------------------------------------------------------------

JavaParser::SwitchRuleOutcomeContext::SwitchRuleOutcomeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::SwitchRuleOutcomeContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchRuleOutcomeContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchRuleOutcomeContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchRuleOutcomeContext::getRuleIndex() const {
  return JavaParser::RuleSwitchRuleOutcome;
}


std::any JavaParser::SwitchRuleOutcomeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchRuleOutcome(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::switchRuleOutcome() {
  SwitchRuleOutcomeContext *_localctx = _tracker.createInstance<SwitchRuleOutcomeContext>(_ctx, getState());
  enterRule(_localctx, 256, JavaParser::RuleSwitchRuleOutcome);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1828);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1821);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1825);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & -8935141145188974593) != 0)) {
        setState(1822);
        blockStatement();
        setState(1827);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

JavaParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ClassTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::ClassTypeContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType;
}


std::any JavaParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassTypeContext* JavaParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 258, JavaParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      setState(1830);
      classOrInterfaceType();
      setState(1831);
      match(JavaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1838);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1835);
      annotation();
      setState(1840);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1841);
    identifier();
    setState(1843);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1842);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatorContext ------------------------------------------------------------------

JavaParser::CreatorContext::CreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ObjectCreatorContext* JavaParser::CreatorContext::objectCreator() {
  return getRuleContext<JavaParser::ObjectCreatorContext>(0);
}

JavaParser::ArrayCreatorContext* JavaParser::CreatorContext::arrayCreator() {
  return getRuleContext<JavaParser::ArrayCreatorContext>(0);
}


size_t JavaParser::CreatorContext::getRuleIndex() const {
  return JavaParser::RuleCreator;
}


std::any JavaParser::CreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CreatorContext* JavaParser::creator() {
  CreatorContext *_localctx = _tracker.createInstance<CreatorContext>(_ctx, getState());
  enterRule(_localctx, 260, JavaParser::RuleCreator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1847);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1845);
      objectCreator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1846);
      arrayCreator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectCreatorContext ------------------------------------------------------------------

JavaParser::ObjectCreatorContext::ObjectCreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CreatedNameContext* JavaParser::ObjectCreatorContext::createdName() {
  return getRuleContext<JavaParser::CreatedNameContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::ObjectCreatorContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ObjectCreatorContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ObjectCreatorContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::ObjectCreatorContext::getRuleIndex() const {
  return JavaParser::RuleObjectCreator;
}


std::any JavaParser::ObjectCreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitObjectCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ObjectCreatorContext* JavaParser::objectCreator() {
  ObjectCreatorContext *_localctx = _tracker.createInstance<ObjectCreatorContext>(_ctx, getState());
  enterRule(_localctx, 262, JavaParser::RuleObjectCreator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1850);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1849);
      nonWildcardTypeArguments();
    }
    setState(1852);
    createdName();
    setState(1853);
    arguments();
    setState(1855);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      setState(1854);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatedNameContext ------------------------------------------------------------------

JavaParser::CreatedNameContext::CreatedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::CoitDiamondContext *> JavaParser::CreatedNameContext::coitDiamond() {
  return getRuleContexts<JavaParser::CoitDiamondContext>();
}

JavaParser::CoitDiamondContext* JavaParser::CreatedNameContext::coitDiamond(size_t i) {
  return getRuleContext<JavaParser::CoitDiamondContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CreatedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::CreatedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}

JavaParser::PrimitiveTypeContext* JavaParser::CreatedNameContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}


size_t JavaParser::CreatedNameContext::getRuleIndex() const {
  return JavaParser::RuleCreatedName;
}


std::any JavaParser::CreatedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCreatedName(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CreatedNameContext* JavaParser::createdName() {
  CreatedNameContext *_localctx = _tracker.createInstance<CreatedNameContext>(_ctx, getState());
  enterRule(_localctx, 264, JavaParser::RuleCreatedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1866);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1857);
        coitDiamond();
        setState(1862);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::DOT) {
          setState(1858);
          match(JavaParser::DOT);
          setState(1859);
          coitDiamond();
          setState(1864);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 2);
        setState(1865);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CoitDiamondContext ------------------------------------------------------------------

JavaParser::CoitDiamondContext::CoitDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::CoitDiamondContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::CoitDiamondContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}


size_t JavaParser::CoitDiamondContext::getRuleIndex() const {
  return JavaParser::RuleCoitDiamond;
}


std::any JavaParser::CoitDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCoitDiamond(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CoitDiamondContext* JavaParser::coitDiamond() {
  CoitDiamondContext *_localctx = _tracker.createInstance<CoitDiamondContext>(_ctx, getState());
  enterRule(_localctx, 266, JavaParser::RuleCoitDiamond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1868);
    identifier();
    setState(1870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1869);
      typeArgumentsOrDiamond();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InnerCreatorContext ------------------------------------------------------------------

JavaParser::InnerCreatorContext::InnerCreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::InnerCreatorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::InnerCreatorContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::InnerCreatorContext::nonWildcardTypeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsOrDiamondContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::InnerCreatorContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::InnerCreatorContext::getRuleIndex() const {
  return JavaParser::RuleInnerCreator;
}


std::any JavaParser::InnerCreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInnerCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InnerCreatorContext* JavaParser::innerCreator() {
  InnerCreatorContext *_localctx = _tracker.createInstance<InnerCreatorContext>(_ctx, getState());
  enterRule(_localctx, 268, JavaParser::RuleInnerCreator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1872);
    identifier();
    setState(1874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1873);
      nonWildcardTypeArgumentsOrDiamond();
    }
    setState(1876);
    arguments();
    setState(1878);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      setState(1877);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprContext ------------------------------------------------------------------

JavaParser::DimExprContext::DimExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DimExprContext::LBRACK() {
  return getToken(JavaParser::LBRACK, 0);
}

JavaParser::ExpressionContext* JavaParser::DimExprContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::DimExprContext::RBRACK() {
  return getToken(JavaParser::RBRACK, 0);
}


size_t JavaParser::DimExprContext::getRuleIndex() const {
  return JavaParser::RuleDimExpr;
}


std::any JavaParser::DimExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDimExpr(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DimExprContext* JavaParser::dimExpr() {
  DimExprContext *_localctx = _tracker.createInstance<DimExprContext>(_ctx, getState());
  enterRule(_localctx, 270, JavaParser::RuleDimExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1880);
    match(JavaParser::LBRACK);
    setState(1881);
    expression();
    setState(1882);
    match(JavaParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreatorContext ------------------------------------------------------------------

JavaParser::ArrayCreatorContext::ArrayCreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CreatedNameContext* JavaParser::ArrayCreatorContext::createdName() {
  return getRuleContext<JavaParser::CreatedNameContext>(0);
}

JavaParser::DimsContext* JavaParser::ArrayCreatorContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::ArrayInitializerContext* JavaParser::ArrayCreatorContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

std::vector<JavaParser::DimExprContext *> JavaParser::ArrayCreatorContext::dimExpr() {
  return getRuleContexts<JavaParser::DimExprContext>();
}

JavaParser::DimExprContext* JavaParser::ArrayCreatorContext::dimExpr(size_t i) {
  return getRuleContext<JavaParser::DimExprContext>(i);
}


size_t JavaParser::ArrayCreatorContext::getRuleIndex() const {
  return JavaParser::RuleArrayCreator;
}


std::any JavaParser::ArrayCreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArrayCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArrayCreatorContext* JavaParser::arrayCreator() {
  ArrayCreatorContext *_localctx = _tracker.createInstance<ArrayCreatorContext>(_ctx, getState());
  enterRule(_localctx, 272, JavaParser::RuleArrayCreator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1897);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1884);
      createdName();
      setState(1885);
      dims();
      setState(1886);
      arrayInitializer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1888);
      createdName();
      setState(1890); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1889);
                dimExpr();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1892); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1895);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
      case 1: {
        setState(1894);
        dims();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationContext::ExplicitGenericInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExplicitGenericInvocationContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::ExplicitGenericInvocationContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocation;
}


std::any JavaParser::ExplicitGenericInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExplicitGenericInvocation(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::explicitGenericInvocation() {
  ExplicitGenericInvocationContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationContext>(_ctx, getState());
  enterRule(_localctx, 274, JavaParser::RuleExplicitGenericInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1899);
    nonWildcardTypeArguments();
    setState(1900);
    explicitGenericInvocationSuffix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::TypeArgumentsOrDiamondContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentsOrDiamond;
}


std::any JavaParser::TypeArgumentsOrDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgumentsOrDiamond(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 276, JavaParser::RuleTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1905);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1902);
      match(JavaParser::LT);
      setState(1903);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1904);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsOrDiamondContext::NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}


size_t JavaParser::NonWildcardTypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArgumentsOrDiamond;
}


std::any JavaParser::NonWildcardTypeArgumentsOrDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitNonWildcardTypeArgumentsOrDiamond(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::nonWildcardTypeArgumentsOrDiamond() {
  NonWildcardTypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 278, JavaParser::RuleNonWildcardTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1910);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1907);
      match(JavaParser::LT);
      setState(1908);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1909);
      nonWildcardTypeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsContext::NonWildcardTypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

JavaParser::TypeListContext* JavaParser::NonWildcardTypeArgumentsContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}


size_t JavaParser::NonWildcardTypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArguments;
}


std::any JavaParser::NonWildcardTypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitNonWildcardTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::nonWildcardTypeArguments() {
  NonWildcardTypeArgumentsContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 280, JavaParser::RuleNonWildcardTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1912);
    match(JavaParser::LT);
    setState(1913);
    typeList();
    setState(1914);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeListContext ------------------------------------------------------------------

JavaParser::TypeListContext::TypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeListContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeListContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeListContext::getRuleIndex() const {
  return JavaParser::RuleTypeList;
}


std::any JavaParser::TypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeListContext* JavaParser::typeList() {
  TypeListContext *_localctx = _tracker.createInstance<TypeListContext>(_ctx, getState());
  enterRule(_localctx, 282, JavaParser::RuleTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1916);
    typeType();
    setState(1921);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1917);
      match(JavaParser::COMMA);
      setState(1918);
      typeType();
      setState(1923);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeContext ------------------------------------------------------------------

JavaParser::TypeTypeContext::TypeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::TypeTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::PrimitiveTypeContext* JavaParser::TypeTypeContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::DimsContext* JavaParser::TypeTypeContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::TypeTypeContext::getRuleIndex() const {
  return JavaParser::RuleTypeType;
}


std::any JavaParser::TypeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeTypeContext* JavaParser::typeType() {
  TypeTypeContext *_localctx = _tracker.createInstance<TypeTypeContext>(_ctx, getState());
  enterRule(_localctx, 284, JavaParser::RuleTypeType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1927);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1924);
      annotation();
      setState(1929);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1932);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        setState(1930);
        classOrInterfaceType();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        setState(1931);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1935);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(1934);
      dims();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

JavaParser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BOOLEAN() {
  return getToken(JavaParser::BOOLEAN, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::CHAR() {
  return getToken(JavaParser::CHAR, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BYTE() {
  return getToken(JavaParser::BYTE, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::SHORT() {
  return getToken(JavaParser::SHORT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::INT() {
  return getToken(JavaParser::INT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::LONG() {
  return getToken(JavaParser::LONG, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::FLOAT() {
  return getToken(JavaParser::FLOAT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::DOUBLE() {
  return getToken(JavaParser::DOUBLE, 0);
}


size_t JavaParser::PrimitiveTypeContext::getRuleIndex() const {
  return JavaParser::RulePrimitiveType;
}


std::any JavaParser::PrimitiveTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PrimitiveTypeContext* JavaParser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 286, JavaParser::RulePrimitiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1937);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 138111107368) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

JavaParser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeArgumentContext *> JavaParser::TypeArgumentsContext::typeArgument() {
  return getRuleContexts<JavaParser::TypeArgumentContext>();
}

JavaParser::TypeArgumentContext* JavaParser::TypeArgumentsContext::typeArgument(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeArgumentsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleTypeArguments;
}


std::any JavaParser::TypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentsContext* JavaParser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 288, JavaParser::RuleTypeArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1939);
    match(JavaParser::LT);
    setState(1940);
    typeArgument();
    setState(1945);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1941);
      match(JavaParser::COMMA);
      setState(1942);
      typeArgument();
      setState(1947);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1948);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperSuffixContext ------------------------------------------------------------------

JavaParser::SuperSuffixContext::SuperSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SuperSuffixContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::ArgumentsContext* JavaParser::SuperSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

tree::TerminalNode* JavaParser::SuperSuffixContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

JavaParser::IdentifierContext* JavaParser::SuperSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::SuperSuffixContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::SuperSuffixContext::getRuleIndex() const {
  return JavaParser::RuleSuperSuffix;
}


std::any JavaParser::SuperSuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSuperSuffix(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SuperSuffixContext* JavaParser::superSuffix() {
  SuperSuffixContext *_localctx = _tracker.createInstance<SuperSuffixContext>(_ctx, getState());
  enterRule(_localctx, 290, JavaParser::RuleSuperSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1961);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1950);
      match(JavaParser::SUPER);
      setState(1951);
      arguments();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1952);
      match(JavaParser::SUPER);
      setState(1953);
      match(JavaParser::DOT);
      setState(1955);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1954);
        typeArguments();
      }
      setState(1957);
      identifier();
      setState(1959);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
      case 1: {
        setState(1958);
        arguments();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationSuffixContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationSuffixContext::ExplicitGenericInvocationSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SuperSuffixContext* JavaParser::ExplicitGenericInvocationSuffixContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::IdentifierContext* JavaParser::ExplicitGenericInvocationSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::ExplicitGenericInvocationSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationSuffixContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocationSuffix;
}


std::any JavaParser::ExplicitGenericInvocationSuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExplicitGenericInvocationSuffix(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::explicitGenericInvocationSuffix() {
  ExplicitGenericInvocationSuffixContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationSuffixContext>(_ctx, getState());
  enterRule(_localctx, 292, JavaParser::RuleExplicitGenericInvocationSuffix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1967);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 1);
        setState(1963);
        superSuffix();
        break;
      }

      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1964);
        identifier();
        setState(1965);
        arguments();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

JavaParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArgumentsContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::ArgumentsContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionListContext* JavaParser::ArgumentsContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleArguments;
}


std::any JavaParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArgumentsContext* JavaParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 294, JavaParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1969);
    match(JavaParser::LPAREN);
    setState(1971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
      setState(1970);
      expressionList();
    }
    setState(1973);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 104: return postfixExpressionSempred(antlrcpp::downCast<PostfixExpressionContext *>(context), predicateIndex);
    case 107: return multiplicativeExpressionSempred(antlrcpp::downCast<MultiplicativeExpressionContext *>(context), predicateIndex);
    case 108: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 109: return shiftExpressionSempred(antlrcpp::downCast<ShiftExpressionContext *>(context), predicateIndex);
    case 110: return relationalExpressionSempred(antlrcpp::downCast<RelationalExpressionContext *>(context), predicateIndex);
    case 111: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 112: return bitwiseAndExpressionSempred(antlrcpp::downCast<BitwiseAndExpressionContext *>(context), predicateIndex);
    case 113: return bitwiseXorExpressionSempred(antlrcpp::downCast<BitwiseXorExpressionContext *>(context), predicateIndex);
    case 114: return bitwiseOrExpressionSempred(antlrcpp::downCast<BitwiseOrExpressionContext *>(context), predicateIndex);
    case 115: return logicalAndExpressionSempred(antlrcpp::downCast<LogicalAndExpressionContext *>(context), predicateIndex);
    case 116: return logicalOrExpressionSempred(antlrcpp::downCast<LogicalOrExpressionContext *>(context), predicateIndex);
    case 124: return primarySempred(antlrcpp::downCast<PrimaryContext *>(context), predicateIndex);
    case 127: return guardedPatternSempred(antlrcpp::downCast<GuardedPatternContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaParser::postfixExpressionSempred(PostfixExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::multiplicativeExpressionSempred(MultiplicativeExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::shiftExpressionSempred(ShiftExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::bitwiseAndExpressionSempred(BitwiseAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::bitwiseXorExpressionSempred(BitwiseXorExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::bitwiseOrExpressionSempred(BitwiseOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::logicalAndExpressionSempred(LogicalAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::logicalOrExpressionSempred(LogicalOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool JavaParser::primarySempred(PrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 6);
    case 13: return precpred(_ctx, 5);
    case 14: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool JavaParser::guardedPatternSempred(GuardedPatternContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void JavaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  javaparserParserInitialize();
#else
  ::antlr4::internal::call_once(javaparserParserOnceFlag, javaparserParserInitialize);
#endif
}
