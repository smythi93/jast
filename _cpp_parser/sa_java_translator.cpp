/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_java_translator.h"


SA_JavaTranslator::SA_JavaTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_JavaTranslator::~SA_JavaTranslator() {
    Py_XDECREF(CompilationUnitContext_cls);
    Py_XDECREF(DeclarationStartContext_cls);
    Py_XDECREF(StatementStartContext_cls);
    Py_XDECREF(ExpressionStartContext_cls);
    Py_XDECREF(DirectiveStartContext_cls);
    Py_XDECREF(OrdinaryCompilationUnitContext_cls);
    Py_XDECREF(ModularCompilationUnitContext_cls);
    Py_XDECREF(PackageDeclarationContext_cls);
    Py_XDECREF(ImportDeclarationContext_cls);
    Py_XDECREF(TypeDeclarationContext_cls);
    Py_XDECREF(ModifierContext_cls);
    Py_XDECREF(ClassOrInterfaceModifierContext_cls);
    Py_XDECREF(VariableModifierContext_cls);
    Py_XDECREF(ClassDeclarationContext_cls);
    Py_XDECREF(ClassExtendsContext_cls);
    Py_XDECREF(ClassImplementsContext_cls);
    Py_XDECREF(ClassPermitsContext_cls);
    Py_XDECREF(TypeParametersContext_cls);
    Py_XDECREF(TypeParameterContext_cls);
    Py_XDECREF(TypeBoundContext_cls);
    Py_XDECREF(EnumDeclarationContext_cls);
    Py_XDECREF(EnumConstantsContext_cls);
    Py_XDECREF(EnumConstantContext_cls);
    Py_XDECREF(EnumBodyDeclarationsContext_cls);
    Py_XDECREF(InterfaceDeclarationContext_cls);
    Py_XDECREF(ClassBodyContext_cls);
    Py_XDECREF(InterfaceBodyContext_cls);
    Py_XDECREF(ClassBodyDeclarationContext_cls);
    Py_XDECREF(MemberDeclarationContext_cls);
    Py_XDECREF(MethodDeclarationContext_cls);
    Py_XDECREF(DimsContext_cls);
    Py_XDECREF(DimContext_cls);
    Py_XDECREF(Throws_Context_cls);
    Py_XDECREF(MethodBodyContext_cls);
    Py_XDECREF(TypeTypeOrVoidContext_cls);
    Py_XDECREF(ConstructorDeclarationContext_cls);
    Py_XDECREF(CompactConstructorDeclarationContext_cls);
    Py_XDECREF(FieldDeclarationContext_cls);
    Py_XDECREF(InterfaceBodyDeclarationContext_cls);
    Py_XDECREF(InterfaceMemberDeclarationContext_cls);
    Py_XDECREF(ConstDeclarationContext_cls);
    Py_XDECREF(InterfaceMethodModifierContext_cls);
    Py_XDECREF(InterfaceMethodDeclarationContext_cls);
    Py_XDECREF(VariableDeclaratorsContext_cls);
    Py_XDECREF(VariableDeclaratorContext_cls);
    Py_XDECREF(VariableDeclaratorIdContext_cls);
    Py_XDECREF(VariableInitializerContext_cls);
    Py_XDECREF(ArrayInitializerContext_cls);
    Py_XDECREF(ClassOrInterfaceTypeContext_cls);
    Py_XDECREF(CoitContext_cls);
    Py_XDECREF(TypeArgumentContext_cls);
    Py_XDECREF(QualifiedNameListContext_cls);
    Py_XDECREF(FormalParametersContext_cls);
    Py_XDECREF(ReceiverParameterContext_cls);
    Py_XDECREF(FormalParameterListContext_cls);
    Py_XDECREF(FormalParameterContext_cls);
    Py_XDECREF(LastFormalParameterContext_cls);
    Py_XDECREF(LambdaLVTIListContext_cls);
    Py_XDECREF(LambdaLVTIParameterContext_cls);
    Py_XDECREF(QualifiedNameContext_cls);
    Py_XDECREF(LiteralContext_cls);
    Py_XDECREF(IntegerLiteralContext_cls);
    Py_XDECREF(FloatLiteralContext_cls);
    Py_XDECREF(AnnotationContext_cls);
    Py_XDECREF(ElementValuePairsContext_cls);
    Py_XDECREF(ElementValuePairContext_cls);
    Py_XDECREF(ElementValueContext_cls);
    Py_XDECREF(ElementValueArrayInitializerContext_cls);
    Py_XDECREF(AnnotationTypeDeclarationContext_cls);
    Py_XDECREF(AnnotationTypeBodyContext_cls);
    Py_XDECREF(AnnotationTypeElementDeclarationContext_cls);
    Py_XDECREF(AnnotationTypeElementRestContext_cls);
    Py_XDECREF(AnnotationConstantDeclarationContext_cls);
    Py_XDECREF(AnnotationMethodDeclarationContext_cls);
    Py_XDECREF(DefaultValueContext_cls);
    Py_XDECREF(ModuleDeclarationContext_cls);
    Py_XDECREF(ModuleBodyContext_cls);
    Py_XDECREF(ModuleDirectiveContext_cls);
    Py_XDECREF(RequiresModifierContext_cls);
    Py_XDECREF(RecordDeclarationContext_cls);
    Py_XDECREF(RecordComponentListContext_cls);
    Py_XDECREF(RecordComponentContext_cls);
    Py_XDECREF(RecordBodyContext_cls);
    Py_XDECREF(RecordBodyDeclarationContext_cls);
    Py_XDECREF(BlockContext_cls);
    Py_XDECREF(BlockStatementContext_cls);
    Py_XDECREF(LocalVariableDeclarationContext_cls);
    Py_XDECREF(IdentifierContext_cls);
    Py_XDECREF(TypeIdentifierContext_cls);
    Py_XDECREF(LocalTypeDeclarationContext_cls);
    Py_XDECREF(StatementContext_cls);
    Py_XDECREF(SwitchBlockContext_cls);
    Py_XDECREF(CatchClauseContext_cls);
    Py_XDECREF(CatchTypeContext_cls);
    Py_XDECREF(FinallyBlockContext_cls);
    Py_XDECREF(ResourceSpecificationContext_cls);
    Py_XDECREF(ResourcesContext_cls);
    Py_XDECREF(ResourceContext_cls);
    Py_XDECREF(SwitchBlockStatementGroupContext_cls);
    Py_XDECREF(SwitchLabelContext_cls);
    Py_XDECREF(ForInitContext_cls);
    Py_XDECREF(ParExpressionContext_cls);
    Py_XDECREF(ExpressionListContext_cls);
    Py_XDECREF(MethodCallContext_cls);
    Py_XDECREF(PostfixExpressionContext_cls);
    Py_XDECREF(PrefixExpressionContext_cls);
    Py_XDECREF(TypeExpressionContext_cls);
    Py_XDECREF(MultiplicativeExpressionContext_cls);
    Py_XDECREF(AdditiveExpressionContext_cls);
    Py_XDECREF(ShiftExpressionContext_cls);
    Py_XDECREF(RelationalExpressionContext_cls);
    Py_XDECREF(EqualityExpressionContext_cls);
    Py_XDECREF(BitwiseAndExpressionContext_cls);
    Py_XDECREF(BitwiseXorExpressionContext_cls);
    Py_XDECREF(BitwiseOrExpressionContext_cls);
    Py_XDECREF(LogicalAndExpressionContext_cls);
    Py_XDECREF(LogicalOrExpressionContext_cls);
    Py_XDECREF(TernaryExpressionContext_cls);
    Py_XDECREF(AssignmentExpressionContext_cls);
    Py_XDECREF(ExpressionContext_cls);
    Py_XDECREF(PatternContext_cls);
    Py_XDECREF(LambdaExpressionContext_cls);
    Py_XDECREF(LambdaParametersContext_cls);
    Py_XDECREF(LambdaBodyContext_cls);
    Py_XDECREF(ExplicitGenericInvocationExpressionContext_cls);
    Py_XDECREF(ThisExpressionContext_cls);
    Py_XDECREF(MemberReferenceExpressionContext_cls);
    Py_XDECREF(MethodCallExpressionContext_cls);
    Py_XDECREF(MethodReferenceExpressionContext_cls);
    Py_XDECREF(ParExprContext_cls);
    Py_XDECREF(LiteralExpressionContext_cls);
    Py_XDECREF(ClassExpressionContext_cls);
    Py_XDECREF(SuperExpressionContext_cls);
    Py_XDECREF(ArrayAccessExpressionContext_cls);
    Py_XDECREF(IdentifierExpressionContext_cls);
    Py_XDECREF(SwitchExpressionContext_cls);
    Py_XDECREF(SwitchLabeledRuleContext_cls);
    Py_XDECREF(GuardedPatternContext_cls);
    Py_XDECREF(SwitchRuleOutcomeContext_cls);
    Py_XDECREF(ClassTypeContext_cls);
    Py_XDECREF(CreatorContext_cls);
    Py_XDECREF(ObjectCreatorContext_cls);
    Py_XDECREF(CreatedNameContext_cls);
    Py_XDECREF(CoitDiamondContext_cls);
    Py_XDECREF(InnerCreatorContext_cls);
    Py_XDECREF(DimExprContext_cls);
    Py_XDECREF(ArrayCreatorContext_cls);
    Py_XDECREF(ExplicitGenericInvocationContext_cls);
    Py_XDECREF(TypeArgumentsOrDiamondContext_cls);
    Py_XDECREF(NonWildcardTypeArgumentsOrDiamondContext_cls);
    Py_XDECREF(NonWildcardTypeArgumentsContext_cls);
    Py_XDECREF(TypeListContext_cls);
    Py_XDECREF(TypeTypeContext_cls);
    Py_XDECREF(PrimitiveTypeContext_cls);
    Py_XDECREF(TypeArgumentsContext_cls);
    Py_XDECREF(SuperSuffixContext_cls);
    Py_XDECREF(ExplicitGenericInvocationSuffixContext_cls);
    Py_XDECREF(ArgumentsContext_cls);
}


antlrcpp::Any SA_JavaTranslator::visitCompilationUnit(JavaParser::CompilationUnitContext *ctx){
    if(!CompilationUnitContext_cls) CompilationUnitContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompilationUnitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompilationUnitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDeclarationStart(JavaParser::DeclarationStartContext *ctx){
    if(!DeclarationStartContext_cls) DeclarationStartContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationStartContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationStartContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitStatementStart(JavaParser::StatementStartContext *ctx){
    if(!StatementStartContext_cls) StatementStartContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementStartContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementStartContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExpressionStart(JavaParser::ExpressionStartContext *ctx){
    if(!ExpressionStartContext_cls) ExpressionStartContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionStartContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionStartContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDirectiveStart(JavaParser::DirectiveStartContext *ctx){
    if(!DirectiveStartContext_cls) DirectiveStartContext_cls = PyObject_GetAttrString(translator->parser_cls, "DirectiveStartContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DirectiveStartContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitOrdinaryCompilationUnit(JavaParser::OrdinaryCompilationUnitContext *ctx){
    if(!OrdinaryCompilationUnitContext_cls) OrdinaryCompilationUnitContext_cls = PyObject_GetAttrString(translator->parser_cls, "OrdinaryCompilationUnitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OrdinaryCompilationUnitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitModularCompilationUnit(JavaParser::ModularCompilationUnitContext *ctx){
    if(!ModularCompilationUnitContext_cls) ModularCompilationUnitContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModularCompilationUnitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModularCompilationUnitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitPackageDeclaration(JavaParser::PackageDeclarationContext *ctx){
    if(!PackageDeclarationContext_cls) PackageDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "PackageDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PackageDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitImportDeclaration(JavaParser::ImportDeclarationContext *ctx){
    if(!ImportDeclarationContext_cls) ImportDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ImportDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ImportDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeDeclaration(JavaParser::TypeDeclarationContext *ctx){
    if(!TypeDeclarationContext_cls) TypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitModifier(JavaParser::ModifierContext *ctx){
    if(!ModifierContext_cls) ModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassOrInterfaceModifier(JavaParser::ClassOrInterfaceModifierContext *ctx){
    if(!ClassOrInterfaceModifierContext_cls) ClassOrInterfaceModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassOrInterfaceModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassOrInterfaceModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitVariableModifier(JavaParser::VariableModifierContext *ctx){
    if(!VariableModifierContext_cls) VariableModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassDeclaration(JavaParser::ClassDeclarationContext *ctx){
    if(!ClassDeclarationContext_cls) ClassDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassExtends(JavaParser::ClassExtendsContext *ctx){
    if(!ClassExtendsContext_cls) ClassExtendsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassExtendsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassExtendsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassImplements(JavaParser::ClassImplementsContext *ctx){
    if(!ClassImplementsContext_cls) ClassImplementsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassImplementsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassImplementsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassPermits(JavaParser::ClassPermitsContext *ctx){
    if(!ClassPermitsContext_cls) ClassPermitsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassPermitsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassPermitsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeParameters(JavaParser::TypeParametersContext *ctx){
    if(!TypeParametersContext_cls) TypeParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeParameter(JavaParser::TypeParameterContext *ctx){
    if(!TypeParameterContext_cls) TypeParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeBound(JavaParser::TypeBoundContext *ctx){
    if(!TypeBoundContext_cls) TypeBoundContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeBoundContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeBoundContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitEnumDeclaration(JavaParser::EnumDeclarationContext *ctx){
    if(!EnumDeclarationContext_cls) EnumDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitEnumConstants(JavaParser::EnumConstantsContext *ctx){
    if(!EnumConstantsContext_cls) EnumConstantsContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumConstantsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumConstantsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitEnumConstant(JavaParser::EnumConstantContext *ctx){
    if(!EnumConstantContext_cls) EnumConstantContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumConstantContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumConstantContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitEnumBodyDeclarations(JavaParser::EnumBodyDeclarationsContext *ctx){
    if(!EnumBodyDeclarationsContext_cls) EnumBodyDeclarationsContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumBodyDeclarationsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumBodyDeclarationsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceDeclaration(JavaParser::InterfaceDeclarationContext *ctx){
    if(!InterfaceDeclarationContext_cls) InterfaceDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassBody(JavaParser::ClassBodyContext *ctx){
    if(!ClassBodyContext_cls) ClassBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceBody(JavaParser::InterfaceBodyContext *ctx){
    if(!InterfaceBodyContext_cls) InterfaceBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassBodyDeclaration(JavaParser::ClassBodyDeclarationContext *ctx){
    if(!ClassBodyDeclarationContext_cls) ClassBodyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMemberDeclaration(JavaParser::MemberDeclarationContext *ctx){
    if(!MemberDeclarationContext_cls) MemberDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMethodDeclaration(JavaParser::MethodDeclarationContext *ctx){
    if(!MethodDeclarationContext_cls) MethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDims(JavaParser::DimsContext *ctx){
    if(!DimsContext_cls) DimsContext_cls = PyObject_GetAttrString(translator->parser_cls, "DimsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DimsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDim(JavaParser::DimContext *ctx){
    if(!DimContext_cls) DimContext_cls = PyObject_GetAttrString(translator->parser_cls, "DimContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DimContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitThrows_(JavaParser::Throws_Context *ctx){
    if(!Throws_Context_cls) Throws_Context_cls = PyObject_GetAttrString(translator->parser_cls, "Throws_Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Throws_Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMethodBody(JavaParser::MethodBodyContext *ctx){
    if(!MethodBodyContext_cls) MethodBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeTypeOrVoid(JavaParser::TypeTypeOrVoidContext *ctx){
    if(!TypeTypeOrVoidContext_cls) TypeTypeOrVoidContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeTypeOrVoidContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeTypeOrVoidContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitConstructorDeclaration(JavaParser::ConstructorDeclarationContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"constructorBody", static_cast<void*>(ctx->constructorBody)}
    };
    if(!ConstructorDeclarationContext_cls) ConstructorDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstructorDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstructorDeclarationContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCompactConstructorDeclaration(JavaParser::CompactConstructorDeclarationContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"constructorBody", static_cast<void*>(ctx->constructorBody)}
    };
    if(!CompactConstructorDeclarationContext_cls) CompactConstructorDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompactConstructorDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompactConstructorDeclarationContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFieldDeclaration(JavaParser::FieldDeclarationContext *ctx){
    if(!FieldDeclarationContext_cls) FieldDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "FieldDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FieldDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceBodyDeclaration(JavaParser::InterfaceBodyDeclarationContext *ctx){
    if(!InterfaceBodyDeclarationContext_cls) InterfaceBodyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceBodyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceBodyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceMemberDeclaration(JavaParser::InterfaceMemberDeclarationContext *ctx){
    if(!InterfaceMemberDeclarationContext_cls) InterfaceMemberDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitConstDeclaration(JavaParser::ConstDeclarationContext *ctx){
    if(!ConstDeclarationContext_cls) ConstDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceMethodModifier(JavaParser::InterfaceMethodModifierContext *ctx){
    if(!InterfaceMethodModifierContext_cls) InterfaceMethodModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMethodModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMethodModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInterfaceMethodDeclaration(JavaParser::InterfaceMethodDeclarationContext *ctx){
    if(!InterfaceMethodDeclarationContext_cls) InterfaceMethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitVariableDeclarators(JavaParser::VariableDeclaratorsContext *ctx){
    if(!VariableDeclaratorsContext_cls) VariableDeclaratorsContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitVariableDeclarator(JavaParser::VariableDeclaratorContext *ctx){
    if(!VariableDeclaratorContext_cls) VariableDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitVariableDeclaratorId(JavaParser::VariableDeclaratorIdContext *ctx){
    if(!VariableDeclaratorIdContext_cls) VariableDeclaratorIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitVariableInitializer(JavaParser::VariableInitializerContext *ctx){
    if(!VariableInitializerContext_cls) VariableInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitArrayInitializer(JavaParser::ArrayInitializerContext *ctx){
    if(!ArrayInitializerContext_cls) ArrayInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArrayInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArrayInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassOrInterfaceType(JavaParser::ClassOrInterfaceTypeContext *ctx){
    if(!ClassOrInterfaceTypeContext_cls) ClassOrInterfaceTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassOrInterfaceTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassOrInterfaceTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCoit(JavaParser::CoitContext *ctx){
    if(!CoitContext_cls) CoitContext_cls = PyObject_GetAttrString(translator->parser_cls, "CoitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CoitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeArgument(JavaParser::TypeArgumentContext *ctx){
    if(!TypeArgumentContext_cls) TypeArgumentContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitQualifiedNameList(JavaParser::QualifiedNameListContext *ctx){
    if(!QualifiedNameListContext_cls) QualifiedNameListContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiedNameListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiedNameListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFormalParameters(JavaParser::FormalParametersContext *ctx){
    if(!FormalParametersContext_cls) FormalParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitReceiverParameter(JavaParser::ReceiverParameterContext *ctx){
    if(!ReceiverParameterContext_cls) ReceiverParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReceiverParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReceiverParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFormalParameterList(JavaParser::FormalParameterListContext *ctx){
    if(!FormalParameterListContext_cls) FormalParameterListContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParameterListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParameterListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFormalParameter(JavaParser::FormalParameterContext *ctx){
    if(!FormalParameterContext_cls) FormalParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLastFormalParameter(JavaParser::LastFormalParameterContext *ctx){
    if(!LastFormalParameterContext_cls) LastFormalParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "LastFormalParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LastFormalParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLambdaLVTIList(JavaParser::LambdaLVTIListContext *ctx){
    if(!LambdaLVTIListContext_cls) LambdaLVTIListContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaLVTIListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaLVTIListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLambdaLVTIParameter(JavaParser::LambdaLVTIParameterContext *ctx){
    if(!LambdaLVTIParameterContext_cls) LambdaLVTIParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaLVTIParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaLVTIParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitQualifiedName(JavaParser::QualifiedNameContext *ctx){
    if(!QualifiedNameContext_cls) QualifiedNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiedNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiedNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLiteral(JavaParser::LiteralContext *ctx){
    if(!LiteralContext_cls) LiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitIntegerLiteral(JavaParser::IntegerLiteralContext *ctx){
    if(!IntegerLiteralContext_cls) IntegerLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "IntegerLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IntegerLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFloatLiteral(JavaParser::FloatLiteralContext *ctx){
    if(!FloatLiteralContext_cls) FloatLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "FloatLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FloatLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotation(JavaParser::AnnotationContext *ctx){
    if(!AnnotationContext_cls) AnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitElementValuePairs(JavaParser::ElementValuePairsContext *ctx){
    if(!ElementValuePairsContext_cls) ElementValuePairsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValuePairsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValuePairsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitElementValuePair(JavaParser::ElementValuePairContext *ctx){
    if(!ElementValuePairContext_cls) ElementValuePairContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValuePairContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValuePairContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitElementValue(JavaParser::ElementValueContext *ctx){
    if(!ElementValueContext_cls) ElementValueContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValueContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValueContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitElementValueArrayInitializer(JavaParser::ElementValueArrayInitializerContext *ctx){
    if(!ElementValueArrayInitializerContext_cls) ElementValueArrayInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValueArrayInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValueArrayInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationTypeDeclaration(JavaParser::AnnotationTypeDeclarationContext *ctx){
    if(!AnnotationTypeDeclarationContext_cls) AnnotationTypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationTypeBody(JavaParser::AnnotationTypeBodyContext *ctx){
    if(!AnnotationTypeBodyContext_cls) AnnotationTypeBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationTypeElementDeclaration(JavaParser::AnnotationTypeElementDeclarationContext *ctx){
    if(!AnnotationTypeElementDeclarationContext_cls) AnnotationTypeElementDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationTypeElementRest(JavaParser::AnnotationTypeElementRestContext *ctx){
    if(!AnnotationTypeElementRestContext_cls) AnnotationTypeElementRestContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationConstantDeclaration(JavaParser::AnnotationConstantDeclarationContext *ctx){
    if(!AnnotationConstantDeclarationContext_cls) AnnotationConstantDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationConstantDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationConstantDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAnnotationMethodDeclaration(JavaParser::AnnotationMethodDeclarationContext *ctx){
    if(!AnnotationMethodDeclarationContext_cls) AnnotationMethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationMethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationMethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDefaultValue(JavaParser::DefaultValueContext *ctx){
    if(!DefaultValueContext_cls) DefaultValueContext_cls = PyObject_GetAttrString(translator->parser_cls, "DefaultValueContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DefaultValueContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitModuleDeclaration(JavaParser::ModuleDeclarationContext *ctx){
    if(!ModuleDeclarationContext_cls) ModuleDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModuleDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModuleDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitModuleBody(JavaParser::ModuleBodyContext *ctx){
    if(!ModuleBodyContext_cls) ModuleBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModuleBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModuleBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitModuleDirective(JavaParser::ModuleDirectiveContext *ctx){
    if(!ModuleDirectiveContext_cls) ModuleDirectiveContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModuleDirectiveContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModuleDirectiveContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRequiresModifier(JavaParser::RequiresModifierContext *ctx){
    if(!RequiresModifierContext_cls) RequiresModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "RequiresModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RequiresModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRecordDeclaration(JavaParser::RecordDeclarationContext *ctx){
    if(!RecordDeclarationContext_cls) RecordDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "RecordDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RecordDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRecordComponentList(JavaParser::RecordComponentListContext *ctx){
    if(!RecordComponentListContext_cls) RecordComponentListContext_cls = PyObject_GetAttrString(translator->parser_cls, "RecordComponentListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RecordComponentListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRecordComponent(JavaParser::RecordComponentContext *ctx){
    if(!RecordComponentContext_cls) RecordComponentContext_cls = PyObject_GetAttrString(translator->parser_cls, "RecordComponentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RecordComponentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRecordBody(JavaParser::RecordBodyContext *ctx){
    if(!RecordBodyContext_cls) RecordBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "RecordBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RecordBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRecordBodyDeclaration(JavaParser::RecordBodyDeclarationContext *ctx){
    if(!RecordBodyDeclarationContext_cls) RecordBodyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "RecordBodyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RecordBodyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitBlock(JavaParser::BlockContext *ctx){
    if(!BlockContext_cls) BlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitBlockStatement(JavaParser::BlockStatementContext *ctx){
    if(!BlockStatementContext_cls) BlockStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLocalVariableDeclaration(JavaParser::LocalVariableDeclarationContext *ctx){
    if(!LocalVariableDeclarationContext_cls) LocalVariableDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "LocalVariableDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LocalVariableDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitIdentifier(JavaParser::IdentifierContext *ctx){
    if(!IdentifierContext_cls) IdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "IdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeIdentifier(JavaParser::TypeIdentifierContext *ctx){
    if(!TypeIdentifierContext_cls) TypeIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLocalTypeDeclaration(JavaParser::LocalTypeDeclarationContext *ctx){
    if(!LocalTypeDeclarationContext_cls) LocalTypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "LocalTypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LocalTypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitStatement(JavaParser::StatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"blockLabel", static_cast<void*>(ctx->blockLabel)},
        {"forUpdate", static_cast<void*>(ctx->forUpdate)},
        {"statementExpression", static_cast<void*>(ctx->statementExpression)},
        {"identifierLabel", static_cast<void*>(ctx->identifierLabel)}
    };
    if(!StatementContext_cls) StatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementContext_cls, labels, 4);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchBlock(JavaParser::SwitchBlockContext *ctx){
    if(!SwitchBlockContext_cls) SwitchBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCatchClause(JavaParser::CatchClauseContext *ctx){
    if(!CatchClauseContext_cls) CatchClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "CatchClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CatchClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCatchType(JavaParser::CatchTypeContext *ctx){
    if(!CatchTypeContext_cls) CatchTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "CatchTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CatchTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitFinallyBlock(JavaParser::FinallyBlockContext *ctx){
    if(!FinallyBlockContext_cls) FinallyBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "FinallyBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FinallyBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitResourceSpecification(JavaParser::ResourceSpecificationContext *ctx){
    if(!ResourceSpecificationContext_cls) ResourceSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourceSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourceSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitResources(JavaParser::ResourcesContext *ctx){
    if(!ResourcesContext_cls) ResourcesContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourcesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourcesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitResource(JavaParser::ResourceContext *ctx){
    if(!ResourceContext_cls) ResourceContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchBlockStatementGroup(JavaParser::SwitchBlockStatementGroupContext *ctx){
    if(!SwitchBlockStatementGroupContext_cls) SwitchBlockStatementGroupContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchBlockStatementGroupContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchBlockStatementGroupContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchLabel(JavaParser::SwitchLabelContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"constantExpression", static_cast<void*>(ctx->constantExpression)},
        {"varName", static_cast<void*>(ctx->varName)}
    };
    if(!SwitchLabelContext_cls) SwitchLabelContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchLabelContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchLabelContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitForInit(JavaParser::ForInitContext *ctx){
    if(!ForInitContext_cls) ForInitContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForInitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForInitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitParExpression(JavaParser::ParExpressionContext *ctx){
    if(!ParExpressionContext_cls) ParExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExpressionList(JavaParser::ExpressionListContext *ctx){
    if(!ExpressionListContext_cls) ExpressionListContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMethodCall(JavaParser::MethodCallContext *ctx){
    if(!MethodCallContext_cls) MethodCallContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodCallContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodCallContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitPostfixExpression(JavaParser::PostfixExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"postfix", static_cast<void*>(ctx->postfix)}
    };
    if(!PostfixExpressionContext_cls) PostfixExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PostfixExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PostfixExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitPrefixExpression(JavaParser::PrefixExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"prefix", static_cast<void*>(ctx->prefix)}
    };
    if(!PrefixExpressionContext_cls) PrefixExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrefixExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrefixExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeExpression(JavaParser::TypeExpressionContext *ctx){
    if(!TypeExpressionContext_cls) TypeExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMultiplicativeExpression(JavaParser::MultiplicativeExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!MultiplicativeExpressionContext_cls) MultiplicativeExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiplicativeExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiplicativeExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAdditiveExpression(JavaParser::AdditiveExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!AdditiveExpressionContext_cls) AdditiveExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AdditiveExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AdditiveExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitShiftExpression(JavaParser::ShiftExpressionContext *ctx){
    if(!ShiftExpressionContext_cls) ShiftExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ShiftExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ShiftExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitRelationalExpression(JavaParser::RelationalExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!RelationalExpressionContext_cls) RelationalExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "RelationalExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RelationalExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitEqualityExpression(JavaParser::EqualityExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!EqualityExpressionContext_cls) EqualityExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "EqualityExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EqualityExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitBitwiseAndExpression(JavaParser::BitwiseAndExpressionContext *ctx){
    if(!BitwiseAndExpressionContext_cls) BitwiseAndExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "BitwiseAndExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BitwiseAndExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitBitwiseXorExpression(JavaParser::BitwiseXorExpressionContext *ctx){
    if(!BitwiseXorExpressionContext_cls) BitwiseXorExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "BitwiseXorExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BitwiseXorExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitBitwiseOrExpression(JavaParser::BitwiseOrExpressionContext *ctx){
    if(!BitwiseOrExpressionContext_cls) BitwiseOrExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "BitwiseOrExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BitwiseOrExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLogicalAndExpression(JavaParser::LogicalAndExpressionContext *ctx){
    if(!LogicalAndExpressionContext_cls) LogicalAndExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LogicalAndExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LogicalAndExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLogicalOrExpression(JavaParser::LogicalOrExpressionContext *ctx){
    if(!LogicalOrExpressionContext_cls) LogicalOrExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LogicalOrExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LogicalOrExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTernaryExpression(JavaParser::TernaryExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!TernaryExpressionContext_cls) TernaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "TernaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TernaryExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitAssignmentExpression(JavaParser::AssignmentExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!AssignmentExpressionContext_cls) AssignmentExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExpression(JavaParser::ExpressionContext *ctx){
    if(!ExpressionContext_cls) ExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitPattern(JavaParser::PatternContext *ctx){
    if(!PatternContext_cls) PatternContext_cls = PyObject_GetAttrString(translator->parser_cls, "PatternContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PatternContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLambdaExpression(JavaParser::LambdaExpressionContext *ctx){
    if(!LambdaExpressionContext_cls) LambdaExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLambdaParameters(JavaParser::LambdaParametersContext *ctx){
    if(!LambdaParametersContext_cls) LambdaParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLambdaBody(JavaParser::LambdaBodyContext *ctx){
    if(!LambdaBodyContext_cls) LambdaBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExplicitGenericInvocationExpression(JavaParser::ExplicitGenericInvocationExpressionContext *ctx){
    if(!ExplicitGenericInvocationExpressionContext_cls) ExplicitGenericInvocationExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitThisExpression(JavaParser::ThisExpressionContext *ctx){
    if(!ThisExpressionContext_cls) ThisExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ThisExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ThisExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMemberReferenceExpression(JavaParser::MemberReferenceExpressionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!MemberReferenceExpressionContext_cls) MemberReferenceExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberReferenceExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberReferenceExpressionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMethodCallExpression(JavaParser::MethodCallExpressionContext *ctx){
    if(!MethodCallExpressionContext_cls) MethodCallExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodCallExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodCallExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitMethodReferenceExpression(JavaParser::MethodReferenceExpressionContext *ctx){
    if(!MethodReferenceExpressionContext_cls) MethodReferenceExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodReferenceExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodReferenceExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitParExpr(JavaParser::ParExprContext *ctx){
    if(!ParExprContext_cls) ParExprContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParExprContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParExprContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitLiteralExpression(JavaParser::LiteralExpressionContext *ctx){
    if(!LiteralExpressionContext_cls) LiteralExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassExpression(JavaParser::ClassExpressionContext *ctx){
    if(!ClassExpressionContext_cls) ClassExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSuperExpression(JavaParser::SuperExpressionContext *ctx){
    if(!SuperExpressionContext_cls) SuperExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "SuperExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SuperExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitArrayAccessExpression(JavaParser::ArrayAccessExpressionContext *ctx){
    if(!ArrayAccessExpressionContext_cls) ArrayAccessExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArrayAccessExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArrayAccessExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitIdentifierExpression(JavaParser::IdentifierExpressionContext *ctx){
    if(!IdentifierExpressionContext_cls) IdentifierExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "IdentifierExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IdentifierExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchExpression(JavaParser::SwitchExpressionContext *ctx){
    if(!SwitchExpressionContext_cls) SwitchExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchLabeledRule(JavaParser::SwitchLabeledRuleContext *ctx){
    if(!SwitchLabeledRuleContext_cls) SwitchLabeledRuleContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchLabeledRuleContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchLabeledRuleContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitGuardedPattern(JavaParser::GuardedPatternContext *ctx){
    if(!GuardedPatternContext_cls) GuardedPatternContext_cls = PyObject_GetAttrString(translator->parser_cls, "GuardedPatternContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GuardedPatternContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSwitchRuleOutcome(JavaParser::SwitchRuleOutcomeContext *ctx){
    if(!SwitchRuleOutcomeContext_cls) SwitchRuleOutcomeContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchRuleOutcomeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchRuleOutcomeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitClassType(JavaParser::ClassTypeContext *ctx){
    if(!ClassTypeContext_cls) ClassTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCreator(JavaParser::CreatorContext *ctx){
    if(!CreatorContext_cls) CreatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "CreatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CreatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitObjectCreator(JavaParser::ObjectCreatorContext *ctx){
    if(!ObjectCreatorContext_cls) ObjectCreatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ObjectCreatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ObjectCreatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCreatedName(JavaParser::CreatedNameContext *ctx){
    if(!CreatedNameContext_cls) CreatedNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "CreatedNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CreatedNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitCoitDiamond(JavaParser::CoitDiamondContext *ctx){
    if(!CoitDiamondContext_cls) CoitDiamondContext_cls = PyObject_GetAttrString(translator->parser_cls, "CoitDiamondContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CoitDiamondContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitInnerCreator(JavaParser::InnerCreatorContext *ctx){
    if(!InnerCreatorContext_cls) InnerCreatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "InnerCreatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InnerCreatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitDimExpr(JavaParser::DimExprContext *ctx){
    if(!DimExprContext_cls) DimExprContext_cls = PyObject_GetAttrString(translator->parser_cls, "DimExprContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DimExprContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitArrayCreator(JavaParser::ArrayCreatorContext *ctx){
    if(!ArrayCreatorContext_cls) ArrayCreatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArrayCreatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArrayCreatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExplicitGenericInvocation(JavaParser::ExplicitGenericInvocationContext *ctx){
    if(!ExplicitGenericInvocationContext_cls) ExplicitGenericInvocationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeArgumentsOrDiamond(JavaParser::TypeArgumentsOrDiamondContext *ctx){
    if(!TypeArgumentsOrDiamondContext_cls) TypeArgumentsOrDiamondContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentsOrDiamondContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentsOrDiamondContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitNonWildcardTypeArgumentsOrDiamond(JavaParser::NonWildcardTypeArgumentsOrDiamondContext *ctx){
    if(!NonWildcardTypeArgumentsOrDiamondContext_cls) NonWildcardTypeArgumentsOrDiamondContext_cls = PyObject_GetAttrString(translator->parser_cls, "NonWildcardTypeArgumentsOrDiamondContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NonWildcardTypeArgumentsOrDiamondContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitNonWildcardTypeArguments(JavaParser::NonWildcardTypeArgumentsContext *ctx){
    if(!NonWildcardTypeArgumentsContext_cls) NonWildcardTypeArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "NonWildcardTypeArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NonWildcardTypeArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeList(JavaParser::TypeListContext *ctx){
    if(!TypeListContext_cls) TypeListContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeType(JavaParser::TypeTypeContext *ctx){
    if(!TypeTypeContext_cls) TypeTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitPrimitiveType(JavaParser::PrimitiveTypeContext *ctx){
    if(!PrimitiveTypeContext_cls) PrimitiveTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrimitiveTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrimitiveTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitTypeArguments(JavaParser::TypeArgumentsContext *ctx){
    if(!TypeArgumentsContext_cls) TypeArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitSuperSuffix(JavaParser::SuperSuffixContext *ctx){
    if(!SuperSuffixContext_cls) SuperSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "SuperSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SuperSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitExplicitGenericInvocationSuffix(JavaParser::ExplicitGenericInvocationSuffixContext *ctx){
    if(!ExplicitGenericInvocationSuffixContext_cls) ExplicitGenericInvocationSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaTranslator::visitArguments(JavaParser::ArgumentsContext *ctx){
    if(!ArgumentsContext_cls) ArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArgumentsContext_cls);
    return py_ctx;
}
