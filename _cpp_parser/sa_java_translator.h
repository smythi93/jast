/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#pragma once

#include "JavaParserBaseVisitor.h"
#include "speedy_antlr.h"

class SA_JavaTranslator : public JavaParserBaseVisitor {
    speedy_antlr::Translator *translator;

    // Cached context classes
    PyObject *CompilationUnitContext_cls = NULL;
    PyObject *DeclarationStartContext_cls = NULL;
    PyObject *StatementStartContext_cls = NULL;
    PyObject *ExpressionStartContext_cls = NULL;
    PyObject *DirectiveStartContext_cls = NULL;
    PyObject *OrdinaryCompilationUnitContext_cls = NULL;
    PyObject *ModularCompilationUnitContext_cls = NULL;
    PyObject *PackageDeclarationContext_cls = NULL;
    PyObject *ImportDeclarationContext_cls = NULL;
    PyObject *TypeDeclarationContext_cls = NULL;
    PyObject *ModifierContext_cls = NULL;
    PyObject *ClassOrInterfaceModifierContext_cls = NULL;
    PyObject *VariableModifierContext_cls = NULL;
    PyObject *ClassDeclarationContext_cls = NULL;
    PyObject *ClassExtendsContext_cls = NULL;
    PyObject *ClassImplementsContext_cls = NULL;
    PyObject *ClassPermitsContext_cls = NULL;
    PyObject *TypeParametersContext_cls = NULL;
    PyObject *TypeParameterContext_cls = NULL;
    PyObject *TypeBoundContext_cls = NULL;
    PyObject *EnumDeclarationContext_cls = NULL;
    PyObject *EnumConstantsContext_cls = NULL;
    PyObject *EnumConstantContext_cls = NULL;
    PyObject *EnumBodyDeclarationsContext_cls = NULL;
    PyObject *InterfaceDeclarationContext_cls = NULL;
    PyObject *ClassBodyContext_cls = NULL;
    PyObject *InterfaceBodyContext_cls = NULL;
    PyObject *ClassBodyDeclarationContext_cls = NULL;
    PyObject *MemberDeclarationContext_cls = NULL;
    PyObject *MethodDeclarationContext_cls = NULL;
    PyObject *DimsContext_cls = NULL;
    PyObject *DimContext_cls = NULL;
    PyObject *Throws_Context_cls = NULL;
    PyObject *MethodBodyContext_cls = NULL;
    PyObject *TypeTypeOrVoidContext_cls = NULL;
    PyObject *ConstructorDeclarationContext_cls = NULL;
    PyObject *CompactConstructorDeclarationContext_cls = NULL;
    PyObject *FieldDeclarationContext_cls = NULL;
    PyObject *InterfaceBodyDeclarationContext_cls = NULL;
    PyObject *InterfaceMemberDeclarationContext_cls = NULL;
    PyObject *ConstDeclarationContext_cls = NULL;
    PyObject *InterfaceMethodModifierContext_cls = NULL;
    PyObject *InterfaceMethodDeclarationContext_cls = NULL;
    PyObject *VariableDeclaratorsContext_cls = NULL;
    PyObject *VariableDeclaratorContext_cls = NULL;
    PyObject *VariableDeclaratorIdContext_cls = NULL;
    PyObject *VariableInitializerContext_cls = NULL;
    PyObject *ArrayInitializerContext_cls = NULL;
    PyObject *ClassOrInterfaceTypeContext_cls = NULL;
    PyObject *CoitContext_cls = NULL;
    PyObject *TypeArgumentContext_cls = NULL;
    PyObject *QualifiedNameListContext_cls = NULL;
    PyObject *FormalParametersContext_cls = NULL;
    PyObject *ReceiverParameterContext_cls = NULL;
    PyObject *FormalParameterListContext_cls = NULL;
    PyObject *FormalParameterContext_cls = NULL;
    PyObject *LastFormalParameterContext_cls = NULL;
    PyObject *LambdaLVTIListContext_cls = NULL;
    PyObject *LambdaLVTIParameterContext_cls = NULL;
    PyObject *QualifiedNameContext_cls = NULL;
    PyObject *LiteralContext_cls = NULL;
    PyObject *IntegerLiteralContext_cls = NULL;
    PyObject *FloatLiteralContext_cls = NULL;
    PyObject *AnnotationContext_cls = NULL;
    PyObject *ElementValuePairsContext_cls = NULL;
    PyObject *ElementValuePairContext_cls = NULL;
    PyObject *ElementValueContext_cls = NULL;
    PyObject *ElementValueArrayInitializerContext_cls = NULL;
    PyObject *AnnotationTypeDeclarationContext_cls = NULL;
    PyObject *AnnotationTypeBodyContext_cls = NULL;
    PyObject *AnnotationTypeElementDeclarationContext_cls = NULL;
    PyObject *AnnotationTypeElementRestContext_cls = NULL;
    PyObject *AnnotationConstantDeclarationContext_cls = NULL;
    PyObject *AnnotationMethodDeclarationContext_cls = NULL;
    PyObject *DefaultValueContext_cls = NULL;
    PyObject *ModuleDeclarationContext_cls = NULL;
    PyObject *ModuleBodyContext_cls = NULL;
    PyObject *ModuleDirectiveContext_cls = NULL;
    PyObject *RequiresModifierContext_cls = NULL;
    PyObject *RecordDeclarationContext_cls = NULL;
    PyObject *RecordComponentListContext_cls = NULL;
    PyObject *RecordComponentContext_cls = NULL;
    PyObject *RecordBodyContext_cls = NULL;
    PyObject *RecordBodyDeclarationContext_cls = NULL;
    PyObject *BlockContext_cls = NULL;
    PyObject *BlockStatementContext_cls = NULL;
    PyObject *LocalVariableDeclarationContext_cls = NULL;
    PyObject *IdentifierContext_cls = NULL;
    PyObject *TypeIdentifierContext_cls = NULL;
    PyObject *LocalTypeDeclarationContext_cls = NULL;
    PyObject *StatementContext_cls = NULL;
    PyObject *SwitchBlockContext_cls = NULL;
    PyObject *CatchClauseContext_cls = NULL;
    PyObject *CatchTypeContext_cls = NULL;
    PyObject *FinallyBlockContext_cls = NULL;
    PyObject *ResourceSpecificationContext_cls = NULL;
    PyObject *ResourcesContext_cls = NULL;
    PyObject *ResourceContext_cls = NULL;
    PyObject *SwitchBlockStatementGroupContext_cls = NULL;
    PyObject *SwitchLabelContext_cls = NULL;
    PyObject *ForInitContext_cls = NULL;
    PyObject *ParExpressionContext_cls = NULL;
    PyObject *ExpressionListContext_cls = NULL;
    PyObject *MethodCallContext_cls = NULL;
    PyObject *PostfixExpressionContext_cls = NULL;
    PyObject *PrefixExpressionContext_cls = NULL;
    PyObject *TypeExpressionContext_cls = NULL;
    PyObject *MultiplicativeExpressionContext_cls = NULL;
    PyObject *AdditiveExpressionContext_cls = NULL;
    PyObject *ShiftExpressionContext_cls = NULL;
    PyObject *RelationalExpressionContext_cls = NULL;
    PyObject *EqualityExpressionContext_cls = NULL;
    PyObject *BitwiseAndExpressionContext_cls = NULL;
    PyObject *BitwiseXorExpressionContext_cls = NULL;
    PyObject *BitwiseOrExpressionContext_cls = NULL;
    PyObject *LogicalAndExpressionContext_cls = NULL;
    PyObject *LogicalOrExpressionContext_cls = NULL;
    PyObject *TernaryExpressionContext_cls = NULL;
    PyObject *AssignmentExpressionContext_cls = NULL;
    PyObject *ExpressionContext_cls = NULL;
    PyObject *PatternContext_cls = NULL;
    PyObject *LambdaExpressionContext_cls = NULL;
    PyObject *LambdaParametersContext_cls = NULL;
    PyObject *LambdaBodyContext_cls = NULL;
    PyObject *ExplicitGenericInvocationExpressionContext_cls = NULL;
    PyObject *ThisExpressionContext_cls = NULL;
    PyObject *MemberReferenceExpressionContext_cls = NULL;
    PyObject *MethodCallExpressionContext_cls = NULL;
    PyObject *MethodReferenceExpressionContext_cls = NULL;
    PyObject *ParExprContext_cls = NULL;
    PyObject *LiteralExpressionContext_cls = NULL;
    PyObject *ClassExpressionContext_cls = NULL;
    PyObject *SuperExpressionContext_cls = NULL;
    PyObject *ArrayAccessExpressionContext_cls = NULL;
    PyObject *IdentifierExpressionContext_cls = NULL;
    PyObject *SwitchExpressionContext_cls = NULL;
    PyObject *SwitchLabeledRuleContext_cls = NULL;
    PyObject *GuardedPatternContext_cls = NULL;
    PyObject *SwitchRuleOutcomeContext_cls = NULL;
    PyObject *ClassTypeContext_cls = NULL;
    PyObject *CreatorContext_cls = NULL;
    PyObject *ObjectCreatorContext_cls = NULL;
    PyObject *CreatedNameContext_cls = NULL;
    PyObject *CoitDiamondContext_cls = NULL;
    PyObject *InnerCreatorContext_cls = NULL;
    PyObject *DimExprContext_cls = NULL;
    PyObject *ArrayCreatorContext_cls = NULL;
    PyObject *ExplicitGenericInvocationContext_cls = NULL;
    PyObject *TypeArgumentsOrDiamondContext_cls = NULL;
    PyObject *NonWildcardTypeArgumentsOrDiamondContext_cls = NULL;
    PyObject *NonWildcardTypeArgumentsContext_cls = NULL;
    PyObject *TypeListContext_cls = NULL;
    PyObject *TypeTypeContext_cls = NULL;
    PyObject *PrimitiveTypeContext_cls = NULL;
    PyObject *TypeArgumentsContext_cls = NULL;
    PyObject *SuperSuffixContext_cls = NULL;
    PyObject *ExplicitGenericInvocationSuffixContext_cls = NULL;
    PyObject *ArgumentsContext_cls = NULL;

    public:
    SA_JavaTranslator(speedy_antlr::Translator *translator);
    ~SA_JavaTranslator();
    antlrcpp::Any visitCompilationUnit(JavaParser::CompilationUnitContext *ctx);

    antlrcpp::Any visitDeclarationStart(JavaParser::DeclarationStartContext *ctx);

    antlrcpp::Any visitStatementStart(JavaParser::StatementStartContext *ctx);

    antlrcpp::Any visitExpressionStart(JavaParser::ExpressionStartContext *ctx);

    antlrcpp::Any visitDirectiveStart(JavaParser::DirectiveStartContext *ctx);

    antlrcpp::Any visitOrdinaryCompilationUnit(JavaParser::OrdinaryCompilationUnitContext *ctx);

    antlrcpp::Any visitModularCompilationUnit(JavaParser::ModularCompilationUnitContext *ctx);

    antlrcpp::Any visitPackageDeclaration(JavaParser::PackageDeclarationContext *ctx);

    antlrcpp::Any visitImportDeclaration(JavaParser::ImportDeclarationContext *ctx);

    antlrcpp::Any visitTypeDeclaration(JavaParser::TypeDeclarationContext *ctx);

    antlrcpp::Any visitModifier(JavaParser::ModifierContext *ctx);

    antlrcpp::Any visitClassOrInterfaceModifier(JavaParser::ClassOrInterfaceModifierContext *ctx);

    antlrcpp::Any visitVariableModifier(JavaParser::VariableModifierContext *ctx);

    antlrcpp::Any visitClassDeclaration(JavaParser::ClassDeclarationContext *ctx);

    antlrcpp::Any visitClassExtends(JavaParser::ClassExtendsContext *ctx);

    antlrcpp::Any visitClassImplements(JavaParser::ClassImplementsContext *ctx);

    antlrcpp::Any visitClassPermits(JavaParser::ClassPermitsContext *ctx);

    antlrcpp::Any visitTypeParameters(JavaParser::TypeParametersContext *ctx);

    antlrcpp::Any visitTypeParameter(JavaParser::TypeParameterContext *ctx);

    antlrcpp::Any visitTypeBound(JavaParser::TypeBoundContext *ctx);

    antlrcpp::Any visitEnumDeclaration(JavaParser::EnumDeclarationContext *ctx);

    antlrcpp::Any visitEnumConstants(JavaParser::EnumConstantsContext *ctx);

    antlrcpp::Any visitEnumConstant(JavaParser::EnumConstantContext *ctx);

    antlrcpp::Any visitEnumBodyDeclarations(JavaParser::EnumBodyDeclarationsContext *ctx);

    antlrcpp::Any visitInterfaceDeclaration(JavaParser::InterfaceDeclarationContext *ctx);

    antlrcpp::Any visitClassBody(JavaParser::ClassBodyContext *ctx);

    antlrcpp::Any visitInterfaceBody(JavaParser::InterfaceBodyContext *ctx);

    antlrcpp::Any visitClassBodyDeclaration(JavaParser::ClassBodyDeclarationContext *ctx);

    antlrcpp::Any visitMemberDeclaration(JavaParser::MemberDeclarationContext *ctx);

    antlrcpp::Any visitMethodDeclaration(JavaParser::MethodDeclarationContext *ctx);

    antlrcpp::Any visitDims(JavaParser::DimsContext *ctx);

    antlrcpp::Any visitDim(JavaParser::DimContext *ctx);

    antlrcpp::Any visitThrows_(JavaParser::Throws_Context *ctx);

    antlrcpp::Any visitMethodBody(JavaParser::MethodBodyContext *ctx);

    antlrcpp::Any visitTypeTypeOrVoid(JavaParser::TypeTypeOrVoidContext *ctx);

    antlrcpp::Any visitConstructorDeclaration(JavaParser::ConstructorDeclarationContext *ctx);

    antlrcpp::Any visitCompactConstructorDeclaration(JavaParser::CompactConstructorDeclarationContext *ctx);

    antlrcpp::Any visitFieldDeclaration(JavaParser::FieldDeclarationContext *ctx);

    antlrcpp::Any visitInterfaceBodyDeclaration(JavaParser::InterfaceBodyDeclarationContext *ctx);

    antlrcpp::Any visitInterfaceMemberDeclaration(JavaParser::InterfaceMemberDeclarationContext *ctx);

    antlrcpp::Any visitConstDeclaration(JavaParser::ConstDeclarationContext *ctx);

    antlrcpp::Any visitInterfaceMethodModifier(JavaParser::InterfaceMethodModifierContext *ctx);

    antlrcpp::Any visitInterfaceMethodDeclaration(JavaParser::InterfaceMethodDeclarationContext *ctx);

    antlrcpp::Any visitVariableDeclarators(JavaParser::VariableDeclaratorsContext *ctx);

    antlrcpp::Any visitVariableDeclarator(JavaParser::VariableDeclaratorContext *ctx);

    antlrcpp::Any visitVariableDeclaratorId(JavaParser::VariableDeclaratorIdContext *ctx);

    antlrcpp::Any visitVariableInitializer(JavaParser::VariableInitializerContext *ctx);

    antlrcpp::Any visitArrayInitializer(JavaParser::ArrayInitializerContext *ctx);

    antlrcpp::Any visitClassOrInterfaceType(JavaParser::ClassOrInterfaceTypeContext *ctx);

    antlrcpp::Any visitCoit(JavaParser::CoitContext *ctx);

    antlrcpp::Any visitTypeArgument(JavaParser::TypeArgumentContext *ctx);

    antlrcpp::Any visitQualifiedNameList(JavaParser::QualifiedNameListContext *ctx);

    antlrcpp::Any visitFormalParameters(JavaParser::FormalParametersContext *ctx);

    antlrcpp::Any visitReceiverParameter(JavaParser::ReceiverParameterContext *ctx);

    antlrcpp::Any visitFormalParameterList(JavaParser::FormalParameterListContext *ctx);

    antlrcpp::Any visitFormalParameter(JavaParser::FormalParameterContext *ctx);

    antlrcpp::Any visitLastFormalParameter(JavaParser::LastFormalParameterContext *ctx);

    antlrcpp::Any visitLambdaLVTIList(JavaParser::LambdaLVTIListContext *ctx);

    antlrcpp::Any visitLambdaLVTIParameter(JavaParser::LambdaLVTIParameterContext *ctx);

    antlrcpp::Any visitQualifiedName(JavaParser::QualifiedNameContext *ctx);

    antlrcpp::Any visitLiteral(JavaParser::LiteralContext *ctx);

    antlrcpp::Any visitIntegerLiteral(JavaParser::IntegerLiteralContext *ctx);

    antlrcpp::Any visitFloatLiteral(JavaParser::FloatLiteralContext *ctx);

    antlrcpp::Any visitAnnotation(JavaParser::AnnotationContext *ctx);

    antlrcpp::Any visitElementValuePairs(JavaParser::ElementValuePairsContext *ctx);

    antlrcpp::Any visitElementValuePair(JavaParser::ElementValuePairContext *ctx);

    antlrcpp::Any visitElementValue(JavaParser::ElementValueContext *ctx);

    antlrcpp::Any visitElementValueArrayInitializer(JavaParser::ElementValueArrayInitializerContext *ctx);

    antlrcpp::Any visitAnnotationTypeDeclaration(JavaParser::AnnotationTypeDeclarationContext *ctx);

    antlrcpp::Any visitAnnotationTypeBody(JavaParser::AnnotationTypeBodyContext *ctx);

    antlrcpp::Any visitAnnotationTypeElementDeclaration(JavaParser::AnnotationTypeElementDeclarationContext *ctx);

    antlrcpp::Any visitAnnotationTypeElementRest(JavaParser::AnnotationTypeElementRestContext *ctx);

    antlrcpp::Any visitAnnotationConstantDeclaration(JavaParser::AnnotationConstantDeclarationContext *ctx);

    antlrcpp::Any visitAnnotationMethodDeclaration(JavaParser::AnnotationMethodDeclarationContext *ctx);

    antlrcpp::Any visitDefaultValue(JavaParser::DefaultValueContext *ctx);

    antlrcpp::Any visitModuleDeclaration(JavaParser::ModuleDeclarationContext *ctx);

    antlrcpp::Any visitModuleBody(JavaParser::ModuleBodyContext *ctx);

    antlrcpp::Any visitModuleDirective(JavaParser::ModuleDirectiveContext *ctx);

    antlrcpp::Any visitRequiresModifier(JavaParser::RequiresModifierContext *ctx);

    antlrcpp::Any visitRecordDeclaration(JavaParser::RecordDeclarationContext *ctx);

    antlrcpp::Any visitRecordComponentList(JavaParser::RecordComponentListContext *ctx);

    antlrcpp::Any visitRecordComponent(JavaParser::RecordComponentContext *ctx);

    antlrcpp::Any visitRecordBody(JavaParser::RecordBodyContext *ctx);

    antlrcpp::Any visitRecordBodyDeclaration(JavaParser::RecordBodyDeclarationContext *ctx);

    antlrcpp::Any visitBlock(JavaParser::BlockContext *ctx);

    antlrcpp::Any visitBlockStatement(JavaParser::BlockStatementContext *ctx);

    antlrcpp::Any visitLocalVariableDeclaration(JavaParser::LocalVariableDeclarationContext *ctx);

    antlrcpp::Any visitIdentifier(JavaParser::IdentifierContext *ctx);

    antlrcpp::Any visitTypeIdentifier(JavaParser::TypeIdentifierContext *ctx);

    antlrcpp::Any visitLocalTypeDeclaration(JavaParser::LocalTypeDeclarationContext *ctx);

    antlrcpp::Any visitStatement(JavaParser::StatementContext *ctx);

    antlrcpp::Any visitSwitchBlock(JavaParser::SwitchBlockContext *ctx);

    antlrcpp::Any visitCatchClause(JavaParser::CatchClauseContext *ctx);

    antlrcpp::Any visitCatchType(JavaParser::CatchTypeContext *ctx);

    antlrcpp::Any visitFinallyBlock(JavaParser::FinallyBlockContext *ctx);

    antlrcpp::Any visitResourceSpecification(JavaParser::ResourceSpecificationContext *ctx);

    antlrcpp::Any visitResources(JavaParser::ResourcesContext *ctx);

    antlrcpp::Any visitResource(JavaParser::ResourceContext *ctx);

    antlrcpp::Any visitSwitchBlockStatementGroup(JavaParser::SwitchBlockStatementGroupContext *ctx);

    antlrcpp::Any visitSwitchLabel(JavaParser::SwitchLabelContext *ctx);

    antlrcpp::Any visitForInit(JavaParser::ForInitContext *ctx);

    antlrcpp::Any visitParExpression(JavaParser::ParExpressionContext *ctx);

    antlrcpp::Any visitExpressionList(JavaParser::ExpressionListContext *ctx);

    antlrcpp::Any visitMethodCall(JavaParser::MethodCallContext *ctx);

    antlrcpp::Any visitPostfixExpression(JavaParser::PostfixExpressionContext *ctx);

    antlrcpp::Any visitPrefixExpression(JavaParser::PrefixExpressionContext *ctx);

    antlrcpp::Any visitTypeExpression(JavaParser::TypeExpressionContext *ctx);

    antlrcpp::Any visitMultiplicativeExpression(JavaParser::MultiplicativeExpressionContext *ctx);

    antlrcpp::Any visitAdditiveExpression(JavaParser::AdditiveExpressionContext *ctx);

    antlrcpp::Any visitShiftExpression(JavaParser::ShiftExpressionContext *ctx);

    antlrcpp::Any visitRelationalExpression(JavaParser::RelationalExpressionContext *ctx);

    antlrcpp::Any visitEqualityExpression(JavaParser::EqualityExpressionContext *ctx);

    antlrcpp::Any visitBitwiseAndExpression(JavaParser::BitwiseAndExpressionContext *ctx);

    antlrcpp::Any visitBitwiseXorExpression(JavaParser::BitwiseXorExpressionContext *ctx);

    antlrcpp::Any visitBitwiseOrExpression(JavaParser::BitwiseOrExpressionContext *ctx);

    antlrcpp::Any visitLogicalAndExpression(JavaParser::LogicalAndExpressionContext *ctx);

    antlrcpp::Any visitLogicalOrExpression(JavaParser::LogicalOrExpressionContext *ctx);

    antlrcpp::Any visitTernaryExpression(JavaParser::TernaryExpressionContext *ctx);

    antlrcpp::Any visitAssignmentExpression(JavaParser::AssignmentExpressionContext *ctx);

    antlrcpp::Any visitExpression(JavaParser::ExpressionContext *ctx);

    antlrcpp::Any visitPattern(JavaParser::PatternContext *ctx);

    antlrcpp::Any visitLambdaExpression(JavaParser::LambdaExpressionContext *ctx);

    antlrcpp::Any visitLambdaParameters(JavaParser::LambdaParametersContext *ctx);

    antlrcpp::Any visitLambdaBody(JavaParser::LambdaBodyContext *ctx);

    antlrcpp::Any visitExplicitGenericInvocationExpression(JavaParser::ExplicitGenericInvocationExpressionContext *ctx);

    antlrcpp::Any visitThisExpression(JavaParser::ThisExpressionContext *ctx);

    antlrcpp::Any visitMemberReferenceExpression(JavaParser::MemberReferenceExpressionContext *ctx);

    antlrcpp::Any visitMethodCallExpression(JavaParser::MethodCallExpressionContext *ctx);

    antlrcpp::Any visitMethodReferenceExpression(JavaParser::MethodReferenceExpressionContext *ctx);

    antlrcpp::Any visitParExpr(JavaParser::ParExprContext *ctx);

    antlrcpp::Any visitLiteralExpression(JavaParser::LiteralExpressionContext *ctx);

    antlrcpp::Any visitClassExpression(JavaParser::ClassExpressionContext *ctx);

    antlrcpp::Any visitSuperExpression(JavaParser::SuperExpressionContext *ctx);

    antlrcpp::Any visitArrayAccessExpression(JavaParser::ArrayAccessExpressionContext *ctx);

    antlrcpp::Any visitIdentifierExpression(JavaParser::IdentifierExpressionContext *ctx);

    antlrcpp::Any visitSwitchExpression(JavaParser::SwitchExpressionContext *ctx);

    antlrcpp::Any visitSwitchLabeledRule(JavaParser::SwitchLabeledRuleContext *ctx);

    antlrcpp::Any visitGuardedPattern(JavaParser::GuardedPatternContext *ctx);

    antlrcpp::Any visitSwitchRuleOutcome(JavaParser::SwitchRuleOutcomeContext *ctx);

    antlrcpp::Any visitClassType(JavaParser::ClassTypeContext *ctx);

    antlrcpp::Any visitCreator(JavaParser::CreatorContext *ctx);

    antlrcpp::Any visitObjectCreator(JavaParser::ObjectCreatorContext *ctx);

    antlrcpp::Any visitCreatedName(JavaParser::CreatedNameContext *ctx);

    antlrcpp::Any visitCoitDiamond(JavaParser::CoitDiamondContext *ctx);

    antlrcpp::Any visitInnerCreator(JavaParser::InnerCreatorContext *ctx);

    antlrcpp::Any visitDimExpr(JavaParser::DimExprContext *ctx);

    antlrcpp::Any visitArrayCreator(JavaParser::ArrayCreatorContext *ctx);

    antlrcpp::Any visitExplicitGenericInvocation(JavaParser::ExplicitGenericInvocationContext *ctx);

    antlrcpp::Any visitTypeArgumentsOrDiamond(JavaParser::TypeArgumentsOrDiamondContext *ctx);

    antlrcpp::Any visitNonWildcardTypeArgumentsOrDiamond(JavaParser::NonWildcardTypeArgumentsOrDiamondContext *ctx);

    antlrcpp::Any visitNonWildcardTypeArguments(JavaParser::NonWildcardTypeArgumentsContext *ctx);

    antlrcpp::Any visitTypeList(JavaParser::TypeListContext *ctx);

    antlrcpp::Any visitTypeType(JavaParser::TypeTypeContext *ctx);

    antlrcpp::Any visitPrimitiveType(JavaParser::PrimitiveTypeContext *ctx);

    antlrcpp::Any visitTypeArguments(JavaParser::TypeArgumentsContext *ctx);

    antlrcpp::Any visitSuperSuffix(JavaParser::SuperSuffixContext *ctx);

    antlrcpp::Any visitExplicitGenericInvocationSuffix(JavaParser::ExplicitGenericInvocationSuffixContext *ctx);

    antlrcpp::Any visitArguments(JavaParser::ArgumentsContext *ctx);

};