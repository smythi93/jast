# Generated from antlr/java/JavaParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        128,
        1991,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        303,
        8,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        315,
        8,
        1,
        10,
        1,
        12,
        1,
        318,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        324,
        8,
        1,
        10,
        1,
        12,
        1,
        327,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        336,
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        342,
        8,
        1,
        10,
        1,
        12,
        1,
        345,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        351,
        8,
        1,
        10,
        1,
        12,
        1,
        354,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        360,
        8,
        1,
        10,
        1,
        12,
        1,
        363,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        369,
        8,
        1,
        10,
        1,
        12,
        1,
        372,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        378,
        8,
        1,
        10,
        1,
        12,
        1,
        381,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        387,
        8,
        1,
        10,
        1,
        12,
        1,
        390,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        396,
        8,
        1,
        10,
        1,
        12,
        1,
        399,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        405,
        8,
        1,
        10,
        1,
        12,
        1,
        408,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        414,
        8,
        1,
        10,
        1,
        12,
        1,
        417,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        424,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        5,
        3,
        5,
        436,
        8,
        5,
        1,
        5,
        1,
        5,
        5,
        5,
        440,
        8,
        5,
        10,
        5,
        12,
        5,
        443,
        9,
        5,
        1,
        5,
        1,
        5,
        5,
        5,
        447,
        8,
        5,
        10,
        5,
        12,
        5,
        450,
        9,
        5,
        1,
        6,
        1,
        6,
        5,
        6,
        454,
        8,
        6,
        10,
        6,
        12,
        6,
        457,
        9,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        5,
        7,
        462,
        8,
        7,
        10,
        7,
        12,
        7,
        465,
        9,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        3,
        8,
        473,
        8,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        478,
        8,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        5,
        9,
        483,
        8,
        9,
        10,
        9,
        12,
        9,
        486,
        9,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        493,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        500,
        8,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        512,
        8,
        11,
        1,
        12,
        1,
        12,
        3,
        12,
        516,
        8,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        521,
        8,
        13,
        1,
        13,
        3,
        13,
        524,
        8,
        13,
        1,
        13,
        3,
        13,
        527,
        8,
        13,
        1,
        13,
        3,
        13,
        530,
        8,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        5,
        17,
        547,
        8,
        17,
        10,
        17,
        12,
        17,
        550,
        9,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        5,
        18,
        555,
        8,
        18,
        10,
        18,
        12,
        18,
        558,
        9,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        563,
        8,
        18,
        1,
        19,
        5,
        19,
        566,
        8,
        19,
        10,
        19,
        12,
        19,
        569,
        9,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        574,
        8,
        19,
        10,
        19,
        12,
        19,
        577,
        9,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        582,
        8,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        586,
        8,
        20,
        1,
        20,
        3,
        20,
        589,
        8,
        20,
        1,
        20,
        3,
        20,
        592,
        8,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        5,
        21,
        599,
        8,
        21,
        10,
        21,
        12,
        21,
        602,
        9,
        21,
        1,
        22,
        5,
        22,
        605,
        8,
        22,
        10,
        22,
        12,
        22,
        608,
        9,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        612,
        8,
        22,
        1,
        22,
        3,
        22,
        615,
        8,
        22,
        1,
        23,
        1,
        23,
        5,
        23,
        619,
        8,
        23,
        10,
        23,
        12,
        23,
        622,
        9,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        3,
        24,
        627,
        8,
        24,
        1,
        24,
        3,
        24,
        630,
        8,
        24,
        1,
        24,
        3,
        24,
        633,
        8,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        5,
        25,
        639,
        8,
        25,
        10,
        25,
        12,
        25,
        642,
        9,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        5,
        26,
        648,
        8,
        26,
        10,
        26,
        12,
        26,
        651,
        9,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        3,
        27,
        657,
        8,
        27,
        1,
        27,
        1,
        27,
        5,
        27,
        661,
        8,
        27,
        10,
        27,
        12,
        27,
        664,
        9,
        27,
        1,
        27,
        3,
        27,
        667,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        677,
        8,
        28,
        1,
        29,
        3,
        29,
        680,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        686,
        8,
        29,
        1,
        29,
        3,
        29,
        689,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        5,
        30,
        695,
        8,
        30,
        10,
        30,
        12,
        30,
        698,
        9,
        30,
        1,
        31,
        5,
        31,
        701,
        8,
        31,
        10,
        31,
        12,
        31,
        704,
        9,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        3,
        33,
        714,
        8,
        33,
        1,
        34,
        1,
        34,
        3,
        34,
        718,
        8,
        34,
        1,
        35,
        3,
        35,
        721,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        726,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        5,
        36,
        731,
        8,
        36,
        10,
        36,
        12,
        36,
        734,
        9,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        5,
        38,
        744,
        8,
        38,
        10,
        38,
        12,
        38,
        747,
        9,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        751,
        8,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        3,
        39,
        760,
        8,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        3,
        41,
        772,
        8,
        41,
        1,
        42,
        5,
        42,
        775,
        8,
        42,
        10,
        42,
        12,
        42,
        778,
        9,
        42,
        1,
        42,
        3,
        42,
        781,
        8,
        42,
        1,
        42,
        5,
        42,
        784,
        8,
        42,
        10,
        42,
        12,
        42,
        787,
        9,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        3,
        42,
        793,
        8,
        42,
        1,
        42,
        3,
        42,
        796,
        8,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        5,
        43,
        803,
        8,
        43,
        10,
        43,
        12,
        43,
        806,
        9,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        811,
        8,
        44,
        1,
        45,
        1,
        45,
        3,
        45,
        815,
        8,
        45,
        1,
        46,
        1,
        46,
        3,
        46,
        819,
        8,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        5,
        47,
        825,
        8,
        47,
        10,
        47,
        12,
        47,
        828,
        9,
        47,
        1,
        47,
        3,
        47,
        831,
        8,
        47,
        3,
        47,
        833,
        8,
        47,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        5,
        48,
        840,
        8,
        48,
        10,
        48,
        12,
        48,
        843,
        9,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        3,
        49,
        849,
        8,
        49,
        1,
        50,
        1,
        50,
        5,
        50,
        853,
        8,
        50,
        10,
        50,
        12,
        50,
        856,
        9,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        861,
        8,
        50,
        3,
        50,
        863,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        5,
        51,
        868,
        8,
        51,
        10,
        51,
        12,
        51,
        871,
        9,
        51,
        1,
        52,
        1,
        52,
        3,
        52,
        875,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        880,
        8,
        52,
        1,
        52,
        3,
        52,
        883,
        8,
        52,
        3,
        52,
        885,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        5,
        53,
        893,
        8,
        53,
        10,
        53,
        12,
        53,
        896,
        9,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        5,
        54,
        903,
        8,
        54,
        10,
        54,
        12,
        54,
        906,
        9,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        910,
        8,
        54,
        1,
        54,
        3,
        54,
        913,
        8,
        54,
        1,
        55,
        5,
        55,
        916,
        8,
        55,
        10,
        55,
        12,
        55,
        919,
        9,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        56,
        5,
        56,
        925,
        8,
        56,
        10,
        56,
        12,
        56,
        928,
        9,
        56,
        1,
        56,
        1,
        56,
        5,
        56,
        932,
        8,
        56,
        10,
        56,
        12,
        56,
        935,
        9,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        943,
        8,
        57,
        10,
        57,
        12,
        57,
        946,
        9,
        57,
        1,
        58,
        5,
        58,
        949,
        8,
        58,
        10,
        58,
        12,
        58,
        952,
        9,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        5,
        59,
        960,
        8,
        59,
        10,
        59,
        12,
        59,
        963,
        9,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        972,
        8,
        60,
        1,
        61,
        1,
        61,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        3,
        63,
        983,
        8,
        63,
        1,
        63,
        3,
        63,
        986,
        8,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        5,
        64,
        991,
        8,
        64,
        10,
        64,
        12,
        64,
        994,
        9,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        3,
        66,
        1003,
        8,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        5,
        67,
        1009,
        8,
        67,
        10,
        67,
        12,
        67,
        1012,
        9,
        67,
        3,
        67,
        1014,
        8,
        67,
        1,
        67,
        3,
        67,
        1017,
        8,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        69,
        1,
        69,
        5,
        69,
        1028,
        8,
        69,
        10,
        69,
        12,
        69,
        1031,
        9,
        69,
        1,
        69,
        1,
        69,
        1,
        70,
        5,
        70,
        1036,
        8,
        70,
        10,
        70,
        12,
        70,
        1039,
        9,
        70,
        1,
        70,
        1,
        70,
        3,
        70,
        1043,
        8,
        70,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1049,
        8,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1053,
        8,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1057,
        8,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1061,
        8,
        71,
        1,
        71,
        1,
        71,
        3,
        71,
        1065,
        8,
        71,
        3,
        71,
        1067,
        8,
        71,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        72,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        3,
        73,
        1078,
        8,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        75,
        3,
        75,
        1086,
        8,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        5,
        76,
        1094,
        8,
        76,
        10,
        76,
        12,
        76,
        1097,
        9,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        5,
        77,
        1103,
        8,
        77,
        10,
        77,
        12,
        77,
        1106,
        9,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        3,
        77,
        1115,
        8,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        3,
        77,
        1123,
        8,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        1,
        77,
        3,
        77,
        1137,
        8,
        77,
        1,
        78,
        1,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1144,
        8,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1148,
        8,
        79,
        1,
        79,
        1,
        79,
        3,
        79,
        1152,
        8,
        79,
        1,
        79,
        1,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        5,
        80,
        1159,
        8,
        80,
        10,
        80,
        12,
        80,
        1162,
        9,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        82,
        1,
        82,
        5,
        82,
        1169,
        8,
        82,
        10,
        82,
        12,
        82,
        1172,
        9,
        82,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        3,
        83,
        1178,
        8,
        83,
        1,
        84,
        1,
        84,
        5,
        84,
        1182,
        8,
        84,
        10,
        84,
        12,
        84,
        1185,
        9,
        84,
        1,
        84,
        1,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        3,
        85,
        1194,
        8,
        85,
        1,
        86,
        5,
        86,
        1197,
        8,
        86,
        10,
        86,
        12,
        86,
        1200,
        9,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        3,
        86,
        1210,
        8,
        86,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        89,
        5,
        89,
        1217,
        8,
        89,
        10,
        89,
        12,
        89,
        1220,
        9,
        89,
        1,
        89,
        1,
        89,
        1,
        89,
        3,
        89,
        1225,
        8,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1232,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1241,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1246,
        8,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1250,
        8,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1254,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        5,
        90,
        1261,
        8,
        90,
        10,
        90,
        12,
        90,
        1264,
        9,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1268,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        4,
        90,
        1289,
        8,
        90,
        11,
        90,
        12,
        90,
        1290,
        1,
        90,
        3,
        90,
        1294,
        8,
        90,
        1,
        90,
        3,
        90,
        1297,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        5,
        90,
        1303,
        8,
        90,
        10,
        90,
        12,
        90,
        1306,
        9,
        90,
        1,
        90,
        3,
        90,
        1309,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1321,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1330,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1335,
        8,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        3,
        90,
        1350,
        8,
        90,
        1,
        91,
        1,
        91,
        5,
        91,
        1354,
        8,
        91,
        10,
        91,
        12,
        91,
        1357,
        9,
        91,
        1,
        91,
        5,
        91,
        1360,
        8,
        91,
        10,
        91,
        12,
        91,
        1363,
        9,
        91,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        5,
        92,
        1370,
        8,
        92,
        10,
        92,
        12,
        92,
        1373,
        9,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        93,
        1,
        93,
        1,
        93,
        5,
        93,
        1383,
        8,
        93,
        10,
        93,
        12,
        93,
        1386,
        9,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        95,
        1,
        95,
        1,
        95,
        3,
        95,
        1394,
        8,
        95,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        5,
        96,
        1401,
        8,
        96,
        10,
        96,
        12,
        96,
        1404,
        9,
        96,
        1,
        97,
        5,
        97,
        1407,
        8,
        97,
        10,
        97,
        12,
        97,
        1410,
        9,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1417,
        8,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1423,
        8,
        97,
        1,
        98,
        4,
        98,
        1426,
        8,
        98,
        11,
        98,
        12,
        98,
        1427,
        1,
        98,
        4,
        98,
        1431,
        8,
        98,
        11,
        98,
        12,
        98,
        1432,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        3,
        99,
        1441,
        8,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        3,
        99,
        1446,
        8,
        99,
        1,
        100,
        1,
        100,
        3,
        100,
        1450,
        8,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        102,
        1,
        102,
        1,
        102,
        5,
        102,
        1459,
        8,
        102,
        10,
        102,
        12,
        102,
        1462,
        9,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        3,
        103,
        1467,
        8,
        103,
        1,
        103,
        1,
        103,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        1,
        104,
        5,
        104,
        1476,
        8,
        104,
        10,
        104,
        12,
        104,
        1479,
        9,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1484,
        8,
        105,
        1,
        106,
        1,
        106,
        5,
        106,
        1488,
        8,
        106,
        10,
        106,
        12,
        106,
        1491,
        9,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        5,
        106,
        1496,
        8,
        106,
        10,
        106,
        12,
        106,
        1499,
        9,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        1,
        106,
        3,
        106,
        1507,
        8,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        5,
        107,
        1515,
        8,
        107,
        10,
        107,
        12,
        107,
        1518,
        9,
        107,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        108,
        5,
        108,
        1526,
        8,
        108,
        10,
        108,
        12,
        108,
        1529,
        9,
        108,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        3,
        109,
        1542,
        8,
        109,
        1,
        109,
        5,
        109,
        1545,
        8,
        109,
        10,
        109,
        12,
        109,
        1548,
        9,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        3,
        110,
        1560,
        8,
        110,
        5,
        110,
        1562,
        8,
        110,
        10,
        110,
        12,
        110,
        1565,
        9,
        110,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        1,
        111,
        5,
        111,
        1573,
        8,
        111,
        10,
        111,
        12,
        111,
        1576,
        9,
        111,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        5,
        112,
        1584,
        8,
        112,
        10,
        112,
        12,
        112,
        1587,
        9,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        113,
        5,
        113,
        1595,
        8,
        113,
        10,
        113,
        12,
        113,
        1598,
        9,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        1,
        114,
        5,
        114,
        1606,
        8,
        114,
        10,
        114,
        12,
        114,
        1609,
        9,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        5,
        115,
        1617,
        8,
        115,
        10,
        115,
        12,
        115,
        1620,
        9,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        1,
        116,
        5,
        116,
        1628,
        8,
        116,
        10,
        116,
        12,
        116,
        1631,
        9,
        116,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        117,
        3,
        117,
        1646,
        8,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        118,
        3,
        118,
        1653,
        8,
        118,
        1,
        119,
        1,
        119,
        3,
        119,
        1657,
        8,
        119,
        1,
        120,
        5,
        120,
        1660,
        8,
        120,
        10,
        120,
        12,
        120,
        1663,
        9,
        120,
        1,
        120,
        1,
        120,
        5,
        120,
        1667,
        8,
        120,
        10,
        120,
        12,
        120,
        1670,
        9,
        120,
        1,
        120,
        1,
        120,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        121,
        1,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1681,
        8,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        5,
        122,
        1688,
        8,
        122,
        10,
        122,
        12,
        122,
        1691,
        9,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        1,
        122,
        3,
        122,
        1697,
        8,
        122,
        1,
        122,
        3,
        122,
        1700,
        8,
        122,
        1,
        123,
        1,
        123,
        3,
        123,
        1704,
        8,
        123,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1723,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1729,
        8,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1733,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1738,
        8,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1742,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1756,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1761,
        8,
        124,
        1,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1766,
        8,
        124,
        1,
        124,
        5,
        124,
        1769,
        8,
        124,
        10,
        124,
        12,
        124,
        1772,
        9,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        5,
        125,
        1778,
        8,
        125,
        10,
        125,
        12,
        125,
        1781,
        9,
        125,
        1,
        125,
        1,
        125,
        1,
        125,
        3,
        125,
        1786,
        8,
        125,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1792,
        8,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        1,
        126,
        3,
        126,
        1799,
        8,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1807,
        8,
        127,
        10,
        127,
        12,
        127,
        1810,
        9,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1814,
        8,
        127,
        10,
        127,
        12,
        127,
        1817,
        9,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1822,
        8,
        127,
        10,
        127,
        12,
        127,
        1825,
        9,
        127,
        3,
        127,
        1827,
        8,
        127,
        1,
        127,
        1,
        127,
        1,
        127,
        5,
        127,
        1832,
        8,
        127,
        10,
        127,
        12,
        127,
        1835,
        9,
        127,
        1,
        128,
        1,
        128,
        5,
        128,
        1839,
        8,
        128,
        10,
        128,
        12,
        128,
        1842,
        9,
        128,
        3,
        128,
        1844,
        8,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        3,
        129,
        1849,
        8,
        129,
        1,
        129,
        5,
        129,
        1852,
        8,
        129,
        10,
        129,
        12,
        129,
        1855,
        9,
        129,
        1,
        129,
        1,
        129,
        3,
        129,
        1859,
        8,
        129,
        1,
        130,
        1,
        130,
        3,
        130,
        1863,
        8,
        130,
        1,
        131,
        3,
        131,
        1866,
        8,
        131,
        1,
        131,
        1,
        131,
        1,
        131,
        3,
        131,
        1871,
        8,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        5,
        132,
        1876,
        8,
        132,
        10,
        132,
        12,
        132,
        1879,
        9,
        132,
        1,
        132,
        3,
        132,
        1882,
        8,
        132,
        1,
        133,
        1,
        133,
        3,
        133,
        1886,
        8,
        133,
        1,
        134,
        1,
        134,
        3,
        134,
        1890,
        8,
        134,
        1,
        134,
        1,
        134,
        3,
        134,
        1894,
        8,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        4,
        136,
        1906,
        8,
        136,
        11,
        136,
        12,
        136,
        1907,
        1,
        136,
        3,
        136,
        1911,
        8,
        136,
        3,
        136,
        1913,
        8,
        136,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        138,
        1,
        138,
        1,
        138,
        3,
        138,
        1921,
        8,
        138,
        1,
        139,
        1,
        139,
        1,
        139,
        3,
        139,
        1926,
        8,
        139,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        5,
        141,
        1935,
        8,
        141,
        10,
        141,
        12,
        141,
        1938,
        9,
        141,
        1,
        142,
        5,
        142,
        1941,
        8,
        142,
        10,
        142,
        12,
        142,
        1944,
        9,
        142,
        1,
        142,
        1,
        142,
        3,
        142,
        1948,
        8,
        142,
        1,
        142,
        3,
        142,
        1951,
        8,
        142,
        1,
        143,
        1,
        143,
        1,
        144,
        1,
        144,
        1,
        144,
        1,
        144,
        5,
        144,
        1959,
        8,
        144,
        10,
        144,
        12,
        144,
        1962,
        9,
        144,
        1,
        144,
        1,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        145,
        3,
        145,
        1971,
        8,
        145,
        1,
        145,
        1,
        145,
        3,
        145,
        1975,
        8,
        145,
        3,
        145,
        1977,
        8,
        145,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        146,
        3,
        146,
        1983,
        8,
        146,
        1,
        147,
        1,
        147,
        3,
        147,
        1987,
        8,
        147,
        1,
        147,
        1,
        147,
        1,
        147,
        0,
        13,
        208,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        248,
        254,
        148,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        286,
        288,
        290,
        292,
        294,
        0,
        15,
        2,
        0,
        17,
        17,
        40,
        40,
        1,
        0,
        67,
        70,
        1,
        0,
        71,
        72,
        2,
        0,
        38,
        38,
        60,
        60,
        2,
        0,
        51,
        65,
        128,
        128,
        3,
        0,
        51,
        60,
        63,
        65,
        128,
        128,
        1,
        0,
        100,
        101,
        2,
        0,
        90,
        91,
        100,
        103,
        2,
        0,
        104,
        105,
        109,
        109,
        1,
        0,
        102,
        103,
        2,
        0,
        88,
        89,
        95,
        96,
        2,
        0,
        94,
        94,
        97,
        97,
        2,
        0,
        87,
        87,
        110,
        120,
        2,
        0,
        93,
        93,
        121,
        121,
        8,
        0,
        3,
        3,
        5,
        5,
        8,
        8,
        14,
        14,
        20,
        20,
        27,
        27,
        29,
        29,
        37,
        37,
        2188,
        0,
        302,
        1,
        0,
        0,
        0,
        2,
        423,
        1,
        0,
        0,
        0,
        4,
        425,
        1,
        0,
        0,
        0,
        6,
        428,
        1,
        0,
        0,
        0,
        8,
        431,
        1,
        0,
        0,
        0,
        10,
        435,
        1,
        0,
        0,
        0,
        12,
        455,
        1,
        0,
        0,
        0,
        14,
        463,
        1,
        0,
        0,
        0,
        16,
        470,
        1,
        0,
        0,
        0,
        18,
        484,
        1,
        0,
        0,
        0,
        20,
        499,
        1,
        0,
        0,
        0,
        22,
        511,
        1,
        0,
        0,
        0,
        24,
        515,
        1,
        0,
        0,
        0,
        26,
        517,
        1,
        0,
        0,
        0,
        28,
        533,
        1,
        0,
        0,
        0,
        30,
        536,
        1,
        0,
        0,
        0,
        32,
        539,
        1,
        0,
        0,
        0,
        34,
        542,
        1,
        0,
        0,
        0,
        36,
        556,
        1,
        0,
        0,
        0,
        38,
        567,
        1,
        0,
        0,
        0,
        40,
        578,
        1,
        0,
        0,
        0,
        42,
        595,
        1,
        0,
        0,
        0,
        44,
        606,
        1,
        0,
        0,
        0,
        46,
        616,
        1,
        0,
        0,
        0,
        48,
        623,
        1,
        0,
        0,
        0,
        50,
        636,
        1,
        0,
        0,
        0,
        52,
        645,
        1,
        0,
        0,
        0,
        54,
        666,
        1,
        0,
        0,
        0,
        56,
        676,
        1,
        0,
        0,
        0,
        58,
        679,
        1,
        0,
        0,
        0,
        60,
        692,
        1,
        0,
        0,
        0,
        62,
        702,
        1,
        0,
        0,
        0,
        64,
        708,
        1,
        0,
        0,
        0,
        66,
        713,
        1,
        0,
        0,
        0,
        68,
        717,
        1,
        0,
        0,
        0,
        70,
        720,
        1,
        0,
        0,
        0,
        72,
        732,
        1,
        0,
        0,
        0,
        74,
        738,
        1,
        0,
        0,
        0,
        76,
        750,
        1,
        0,
        0,
        0,
        78,
        759,
        1,
        0,
        0,
        0,
        80,
        761,
        1,
        0,
        0,
        0,
        82,
        771,
        1,
        0,
        0,
        0,
        84,
        776,
        1,
        0,
        0,
        0,
        86,
        799,
        1,
        0,
        0,
        0,
        88,
        807,
        1,
        0,
        0,
        0,
        90,
        812,
        1,
        0,
        0,
        0,
        92,
        818,
        1,
        0,
        0,
        0,
        94,
        820,
        1,
        0,
        0,
        0,
        96,
        841,
        1,
        0,
        0,
        0,
        98,
        846,
        1,
        0,
        0,
        0,
        100,
        862,
        1,
        0,
        0,
        0,
        102,
        864,
        1,
        0,
        0,
        0,
        104,
        872,
        1,
        0,
        0,
        0,
        106,
        888,
        1,
        0,
        0,
        0,
        108,
        912,
        1,
        0,
        0,
        0,
        110,
        917,
        1,
        0,
        0,
        0,
        112,
        926,
        1,
        0,
        0,
        0,
        114,
        939,
        1,
        0,
        0,
        0,
        116,
        950,
        1,
        0,
        0,
        0,
        118,
        956,
        1,
        0,
        0,
        0,
        120,
        971,
        1,
        0,
        0,
        0,
        122,
        973,
        1,
        0,
        0,
        0,
        124,
        975,
        1,
        0,
        0,
        0,
        126,
        977,
        1,
        0,
        0,
        0,
        128,
        987,
        1,
        0,
        0,
        0,
        130,
        995,
        1,
        0,
        0,
        0,
        132,
        1002,
        1,
        0,
        0,
        0,
        134,
        1004,
        1,
        0,
        0,
        0,
        136,
        1020,
        1,
        0,
        0,
        0,
        138,
        1025,
        1,
        0,
        0,
        0,
        140,
        1042,
        1,
        0,
        0,
        0,
        142,
        1066,
        1,
        0,
        0,
        0,
        144,
        1068,
        1,
        0,
        0,
        0,
        146,
        1072,
        1,
        0,
        0,
        0,
        148,
        1081,
        1,
        0,
        0,
        0,
        150,
        1085,
        1,
        0,
        0,
        0,
        152,
        1091,
        1,
        0,
        0,
        0,
        154,
        1136,
        1,
        0,
        0,
        0,
        156,
        1138,
        1,
        0,
        0,
        0,
        158,
        1140,
        1,
        0,
        0,
        0,
        160,
        1155,
        1,
        0,
        0,
        0,
        162,
        1163,
        1,
        0,
        0,
        0,
        164,
        1166,
        1,
        0,
        0,
        0,
        166,
        1177,
        1,
        0,
        0,
        0,
        168,
        1179,
        1,
        0,
        0,
        0,
        170,
        1193,
        1,
        0,
        0,
        0,
        172,
        1198,
        1,
        0,
        0,
        0,
        174,
        1211,
        1,
        0,
        0,
        0,
        176,
        1213,
        1,
        0,
        0,
        0,
        178,
        1218,
        1,
        0,
        0,
        0,
        180,
        1349,
        1,
        0,
        0,
        0,
        182,
        1351,
        1,
        0,
        0,
        0,
        184,
        1366,
        1,
        0,
        0,
        0,
        186,
        1379,
        1,
        0,
        0,
        0,
        188,
        1387,
        1,
        0,
        0,
        0,
        190,
        1390,
        1,
        0,
        0,
        0,
        192,
        1397,
        1,
        0,
        0,
        0,
        194,
        1422,
        1,
        0,
        0,
        0,
        196,
        1425,
        1,
        0,
        0,
        0,
        198,
        1445,
        1,
        0,
        0,
        0,
        200,
        1449,
        1,
        0,
        0,
        0,
        202,
        1451,
        1,
        0,
        0,
        0,
        204,
        1455,
        1,
        0,
        0,
        0,
        206,
        1466,
        1,
        0,
        0,
        0,
        208,
        1470,
        1,
        0,
        0,
        0,
        210,
        1483,
        1,
        0,
        0,
        0,
        212,
        1506,
        1,
        0,
        0,
        0,
        214,
        1508,
        1,
        0,
        0,
        0,
        216,
        1519,
        1,
        0,
        0,
        0,
        218,
        1530,
        1,
        0,
        0,
        0,
        220,
        1549,
        1,
        0,
        0,
        0,
        222,
        1566,
        1,
        0,
        0,
        0,
        224,
        1577,
        1,
        0,
        0,
        0,
        226,
        1588,
        1,
        0,
        0,
        0,
        228,
        1599,
        1,
        0,
        0,
        0,
        230,
        1610,
        1,
        0,
        0,
        0,
        232,
        1621,
        1,
        0,
        0,
        0,
        234,
        1645,
        1,
        0,
        0,
        0,
        236,
        1652,
        1,
        0,
        0,
        0,
        238,
        1656,
        1,
        0,
        0,
        0,
        240,
        1661,
        1,
        0,
        0,
        0,
        242,
        1673,
        1,
        0,
        0,
        0,
        244,
        1699,
        1,
        0,
        0,
        0,
        246,
        1703,
        1,
        0,
        0,
        0,
        248,
        1741,
        1,
        0,
        0,
        0,
        250,
        1785,
        1,
        0,
        0,
        0,
        252,
        1798,
        1,
        0,
        0,
        0,
        254,
        1826,
        1,
        0,
        0,
        0,
        256,
        1843,
        1,
        0,
        0,
        0,
        258,
        1848,
        1,
        0,
        0,
        0,
        260,
        1862,
        1,
        0,
        0,
        0,
        262,
        1865,
        1,
        0,
        0,
        0,
        264,
        1881,
        1,
        0,
        0,
        0,
        266,
        1883,
        1,
        0,
        0,
        0,
        268,
        1887,
        1,
        0,
        0,
        0,
        270,
        1895,
        1,
        0,
        0,
        0,
        272,
        1912,
        1,
        0,
        0,
        0,
        274,
        1914,
        1,
        0,
        0,
        0,
        276,
        1920,
        1,
        0,
        0,
        0,
        278,
        1925,
        1,
        0,
        0,
        0,
        280,
        1927,
        1,
        0,
        0,
        0,
        282,
        1931,
        1,
        0,
        0,
        0,
        284,
        1942,
        1,
        0,
        0,
        0,
        286,
        1952,
        1,
        0,
        0,
        0,
        288,
        1954,
        1,
        0,
        0,
        0,
        290,
        1976,
        1,
        0,
        0,
        0,
        292,
        1982,
        1,
        0,
        0,
        0,
        294,
        1984,
        1,
        0,
        0,
        0,
        296,
        297,
        3,
        10,
        5,
        0,
        297,
        298,
        5,
        0,
        0,
        1,
        298,
        303,
        1,
        0,
        0,
        0,
        299,
        300,
        3,
        12,
        6,
        0,
        300,
        301,
        5,
        0,
        0,
        1,
        301,
        303,
        1,
        0,
        0,
        0,
        302,
        296,
        1,
        0,
        0,
        0,
        302,
        299,
        1,
        0,
        0,
        0,
        303,
        1,
        1,
        0,
        0,
        0,
        304,
        305,
        3,
        14,
        7,
        0,
        305,
        306,
        5,
        0,
        0,
        1,
        306,
        424,
        1,
        0,
        0,
        0,
        307,
        308,
        3,
        16,
        8,
        0,
        308,
        309,
        5,
        0,
        0,
        1,
        309,
        424,
        1,
        0,
        0,
        0,
        310,
        311,
        3,
        150,
        75,
        0,
        311,
        312,
        5,
        0,
        0,
        1,
        312,
        424,
        1,
        0,
        0,
        0,
        313,
        315,
        3,
        20,
        10,
        0,
        314,
        313,
        1,
        0,
        0,
        0,
        315,
        318,
        1,
        0,
        0,
        0,
        316,
        314,
        1,
        0,
        0,
        0,
        316,
        317,
        1,
        0,
        0,
        0,
        317,
        319,
        1,
        0,
        0,
        0,
        318,
        316,
        1,
        0,
        0,
        0,
        319,
        320,
        3,
        74,
        37,
        0,
        320,
        321,
        5,
        0,
        0,
        1,
        321,
        424,
        1,
        0,
        0,
        0,
        322,
        324,
        3,
        20,
        10,
        0,
        323,
        322,
        1,
        0,
        0,
        0,
        324,
        327,
        1,
        0,
        0,
        0,
        325,
        323,
        1,
        0,
        0,
        0,
        325,
        326,
        1,
        0,
        0,
        0,
        326,
        328,
        1,
        0,
        0,
        0,
        327,
        325,
        1,
        0,
        0,
        0,
        328,
        329,
        3,
        58,
        29,
        0,
        329,
        330,
        5,
        0,
        0,
        1,
        330,
        424,
        1,
        0,
        0,
        0,
        331,
        332,
        3,
        84,
        42,
        0,
        332,
        333,
        5,
        0,
        0,
        1,
        333,
        424,
        1,
        0,
        0,
        0,
        334,
        336,
        5,
        38,
        0,
        0,
        335,
        334,
        1,
        0,
        0,
        0,
        335,
        336,
        1,
        0,
        0,
        0,
        336,
        337,
        1,
        0,
        0,
        0,
        337,
        338,
        3,
        168,
        84,
        0,
        338,
        339,
        5,
        0,
        0,
        1,
        339,
        424,
        1,
        0,
        0,
        0,
        340,
        342,
        3,
        20,
        10,
        0,
        341,
        340,
        1,
        0,
        0,
        0,
        342,
        345,
        1,
        0,
        0,
        0,
        343,
        341,
        1,
        0,
        0,
        0,
        343,
        344,
        1,
        0,
        0,
        0,
        344,
        346,
        1,
        0,
        0,
        0,
        345,
        343,
        1,
        0,
        0,
        0,
        346,
        347,
        3,
        70,
        35,
        0,
        347,
        348,
        5,
        0,
        0,
        1,
        348,
        424,
        1,
        0,
        0,
        0,
        349,
        351,
        3,
        20,
        10,
        0,
        350,
        349,
        1,
        0,
        0,
        0,
        351,
        354,
        1,
        0,
        0,
        0,
        352,
        350,
        1,
        0,
        0,
        0,
        352,
        353,
        1,
        0,
        0,
        0,
        353,
        355,
        1,
        0,
        0,
        0,
        354,
        352,
        1,
        0,
        0,
        0,
        355,
        356,
        3,
        72,
        36,
        0,
        356,
        357,
        5,
        0,
        0,
        1,
        357,
        424,
        1,
        0,
        0,
        0,
        358,
        360,
        3,
        20,
        10,
        0,
        359,
        358,
        1,
        0,
        0,
        0,
        360,
        363,
        1,
        0,
        0,
        0,
        361,
        359,
        1,
        0,
        0,
        0,
        361,
        362,
        1,
        0,
        0,
        0,
        362,
        364,
        1,
        0,
        0,
        0,
        363,
        361,
        1,
        0,
        0,
        0,
        364,
        365,
        3,
        146,
        73,
        0,
        365,
        366,
        5,
        0,
        0,
        1,
        366,
        424,
        1,
        0,
        0,
        0,
        367,
        369,
        3,
        20,
        10,
        0,
        368,
        367,
        1,
        0,
        0,
        0,
        369,
        372,
        1,
        0,
        0,
        0,
        370,
        368,
        1,
        0,
        0,
        0,
        370,
        371,
        1,
        0,
        0,
        0,
        371,
        373,
        1,
        0,
        0,
        0,
        372,
        370,
        1,
        0,
        0,
        0,
        373,
        374,
        3,
        144,
        72,
        0,
        374,
        375,
        5,
        0,
        0,
        1,
        375,
        424,
        1,
        0,
        0,
        0,
        376,
        378,
        3,
        20,
        10,
        0,
        377,
        376,
        1,
        0,
        0,
        0,
        378,
        381,
        1,
        0,
        0,
        0,
        379,
        377,
        1,
        0,
        0,
        0,
        379,
        380,
        1,
        0,
        0,
        0,
        380,
        382,
        1,
        0,
        0,
        0,
        381,
        379,
        1,
        0,
        0,
        0,
        382,
        383,
        3,
        48,
        24,
        0,
        383,
        384,
        5,
        0,
        0,
        1,
        384,
        424,
        1,
        0,
        0,
        0,
        385,
        387,
        3,
        20,
        10,
        0,
        386,
        385,
        1,
        0,
        0,
        0,
        387,
        390,
        1,
        0,
        0,
        0,
        388,
        386,
        1,
        0,
        0,
        0,
        388,
        389,
        1,
        0,
        0,
        0,
        389,
        391,
        1,
        0,
        0,
        0,
        390,
        388,
        1,
        0,
        0,
        0,
        391,
        392,
        3,
        136,
        68,
        0,
        392,
        393,
        5,
        0,
        0,
        1,
        393,
        424,
        1,
        0,
        0,
        0,
        394,
        396,
        3,
        20,
        10,
        0,
        395,
        394,
        1,
        0,
        0,
        0,
        396,
        399,
        1,
        0,
        0,
        0,
        397,
        395,
        1,
        0,
        0,
        0,
        397,
        398,
        1,
        0,
        0,
        0,
        398,
        400,
        1,
        0,
        0,
        0,
        399,
        397,
        1,
        0,
        0,
        0,
        400,
        401,
        3,
        26,
        13,
        0,
        401,
        402,
        5,
        0,
        0,
        1,
        402,
        424,
        1,
        0,
        0,
        0,
        403,
        405,
        3,
        20,
        10,
        0,
        404,
        403,
        1,
        0,
        0,
        0,
        405,
        408,
        1,
        0,
        0,
        0,
        406,
        404,
        1,
        0,
        0,
        0,
        406,
        407,
        1,
        0,
        0,
        0,
        407,
        409,
        1,
        0,
        0,
        0,
        408,
        406,
        1,
        0,
        0,
        0,
        409,
        410,
        3,
        40,
        20,
        0,
        410,
        411,
        5,
        0,
        0,
        1,
        411,
        424,
        1,
        0,
        0,
        0,
        412,
        414,
        3,
        20,
        10,
        0,
        413,
        412,
        1,
        0,
        0,
        0,
        414,
        417,
        1,
        0,
        0,
        0,
        415,
        413,
        1,
        0,
        0,
        0,
        415,
        416,
        1,
        0,
        0,
        0,
        416,
        418,
        1,
        0,
        0,
        0,
        417,
        415,
        1,
        0,
        0,
        0,
        418,
        419,
        3,
        158,
        79,
        0,
        419,
        420,
        5,
        0,
        0,
        1,
        420,
        424,
        1,
        0,
        0,
        0,
        421,
        422,
        5,
        84,
        0,
        0,
        422,
        424,
        5,
        0,
        0,
        1,
        423,
        304,
        1,
        0,
        0,
        0,
        423,
        307,
        1,
        0,
        0,
        0,
        423,
        310,
        1,
        0,
        0,
        0,
        423,
        316,
        1,
        0,
        0,
        0,
        423,
        325,
        1,
        0,
        0,
        0,
        423,
        331,
        1,
        0,
        0,
        0,
        423,
        335,
        1,
        0,
        0,
        0,
        423,
        343,
        1,
        0,
        0,
        0,
        423,
        352,
        1,
        0,
        0,
        0,
        423,
        361,
        1,
        0,
        0,
        0,
        423,
        370,
        1,
        0,
        0,
        0,
        423,
        379,
        1,
        0,
        0,
        0,
        423,
        388,
        1,
        0,
        0,
        0,
        423,
        397,
        1,
        0,
        0,
        0,
        423,
        406,
        1,
        0,
        0,
        0,
        423,
        415,
        1,
        0,
        0,
        0,
        423,
        421,
        1,
        0,
        0,
        0,
        424,
        3,
        1,
        0,
        0,
        0,
        425,
        426,
        3,
        170,
        85,
        0,
        426,
        427,
        5,
        0,
        0,
        1,
        427,
        5,
        1,
        0,
        0,
        0,
        428,
        429,
        3,
        238,
        119,
        0,
        429,
        430,
        5,
        0,
        0,
        1,
        430,
        7,
        1,
        0,
        0,
        0,
        431,
        432,
        3,
        154,
        77,
        0,
        432,
        433,
        5,
        0,
        0,
        1,
        433,
        9,
        1,
        0,
        0,
        0,
        434,
        436,
        3,
        14,
        7,
        0,
        435,
        434,
        1,
        0,
        0,
        0,
        435,
        436,
        1,
        0,
        0,
        0,
        436,
        441,
        1,
        0,
        0,
        0,
        437,
        440,
        3,
        16,
        8,
        0,
        438,
        440,
        5,
        84,
        0,
        0,
        439,
        437,
        1,
        0,
        0,
        0,
        439,
        438,
        1,
        0,
        0,
        0,
        440,
        443,
        1,
        0,
        0,
        0,
        441,
        439,
        1,
        0,
        0,
        0,
        441,
        442,
        1,
        0,
        0,
        0,
        442,
        448,
        1,
        0,
        0,
        0,
        443,
        441,
        1,
        0,
        0,
        0,
        444,
        447,
        3,
        18,
        9,
        0,
        445,
        447,
        5,
        84,
        0,
        0,
        446,
        444,
        1,
        0,
        0,
        0,
        446,
        445,
        1,
        0,
        0,
        0,
        447,
        450,
        1,
        0,
        0,
        0,
        448,
        446,
        1,
        0,
        0,
        0,
        448,
        449,
        1,
        0,
        0,
        0,
        449,
        11,
        1,
        0,
        0,
        0,
        450,
        448,
        1,
        0,
        0,
        0,
        451,
        454,
        3,
        16,
        8,
        0,
        452,
        454,
        5,
        84,
        0,
        0,
        453,
        451,
        1,
        0,
        0,
        0,
        453,
        452,
        1,
        0,
        0,
        0,
        454,
        457,
        1,
        0,
        0,
        0,
        455,
        453,
        1,
        0,
        0,
        0,
        455,
        456,
        1,
        0,
        0,
        0,
        456,
        458,
        1,
        0,
        0,
        0,
        457,
        455,
        1,
        0,
        0,
        0,
        458,
        459,
        3,
        150,
        75,
        0,
        459,
        13,
        1,
        0,
        0,
        0,
        460,
        462,
        3,
        126,
        63,
        0,
        461,
        460,
        1,
        0,
        0,
        0,
        462,
        465,
        1,
        0,
        0,
        0,
        463,
        461,
        1,
        0,
        0,
        0,
        463,
        464,
        1,
        0,
        0,
        0,
        464,
        466,
        1,
        0,
        0,
        0,
        465,
        463,
        1,
        0,
        0,
        0,
        466,
        467,
        5,
        32,
        0,
        0,
        467,
        468,
        3,
        118,
        59,
        0,
        468,
        469,
        5,
        84,
        0,
        0,
        469,
        15,
        1,
        0,
        0,
        0,
        470,
        472,
        5,
        25,
        0,
        0,
        471,
        473,
        5,
        38,
        0,
        0,
        472,
        471,
        1,
        0,
        0,
        0,
        472,
        473,
        1,
        0,
        0,
        0,
        473,
        474,
        1,
        0,
        0,
        0,
        474,
        477,
        3,
        118,
        59,
        0,
        475,
        476,
        5,
        86,
        0,
        0,
        476,
        478,
        5,
        104,
        0,
        0,
        477,
        475,
        1,
        0,
        0,
        0,
        477,
        478,
        1,
        0,
        0,
        0,
        478,
        479,
        1,
        0,
        0,
        0,
        479,
        480,
        5,
        84,
        0,
        0,
        480,
        17,
        1,
        0,
        0,
        0,
        481,
        483,
        3,
        22,
        11,
        0,
        482,
        481,
        1,
        0,
        0,
        0,
        483,
        486,
        1,
        0,
        0,
        0,
        484,
        482,
        1,
        0,
        0,
        0,
        484,
        485,
        1,
        0,
        0,
        0,
        485,
        492,
        1,
        0,
        0,
        0,
        486,
        484,
        1,
        0,
        0,
        0,
        487,
        493,
        3,
        26,
        13,
        0,
        488,
        493,
        3,
        40,
        20,
        0,
        489,
        493,
        3,
        48,
        24,
        0,
        490,
        493,
        3,
        136,
        68,
        0,
        491,
        493,
        3,
        158,
        79,
        0,
        492,
        487,
        1,
        0,
        0,
        0,
        492,
        488,
        1,
        0,
        0,
        0,
        492,
        489,
        1,
        0,
        0,
        0,
        492,
        490,
        1,
        0,
        0,
        0,
        492,
        491,
        1,
        0,
        0,
        0,
        493,
        19,
        1,
        0,
        0,
        0,
        494,
        500,
        3,
        22,
        11,
        0,
        495,
        500,
        5,
        30,
        0,
        0,
        496,
        500,
        5,
        42,
        0,
        0,
        497,
        500,
        5,
        46,
        0,
        0,
        498,
        500,
        5,
        49,
        0,
        0,
        499,
        494,
        1,
        0,
        0,
        0,
        499,
        495,
        1,
        0,
        0,
        0,
        499,
        496,
        1,
        0,
        0,
        0,
        499,
        497,
        1,
        0,
        0,
        0,
        499,
        498,
        1,
        0,
        0,
        0,
        500,
        21,
        1,
        0,
        0,
        0,
        501,
        512,
        3,
        126,
        63,
        0,
        502,
        512,
        5,
        35,
        0,
        0,
        503,
        512,
        5,
        34,
        0,
        0,
        504,
        512,
        5,
        33,
        0,
        0,
        505,
        512,
        5,
        38,
        0,
        0,
        506,
        512,
        5,
        1,
        0,
        0,
        507,
        512,
        5,
        18,
        0,
        0,
        508,
        512,
        5,
        39,
        0,
        0,
        509,
        512,
        5,
        64,
        0,
        0,
        510,
        512,
        5,
        66,
        0,
        0,
        511,
        501,
        1,
        0,
        0,
        0,
        511,
        502,
        1,
        0,
        0,
        0,
        511,
        503,
        1,
        0,
        0,
        0,
        511,
        504,
        1,
        0,
        0,
        0,
        511,
        505,
        1,
        0,
        0,
        0,
        511,
        506,
        1,
        0,
        0,
        0,
        511,
        507,
        1,
        0,
        0,
        0,
        511,
        508,
        1,
        0,
        0,
        0,
        511,
        509,
        1,
        0,
        0,
        0,
        511,
        510,
        1,
        0,
        0,
        0,
        512,
        23,
        1,
        0,
        0,
        0,
        513,
        516,
        5,
        18,
        0,
        0,
        514,
        516,
        3,
        126,
        63,
        0,
        515,
        513,
        1,
        0,
        0,
        0,
        515,
        514,
        1,
        0,
        0,
        0,
        516,
        25,
        1,
        0,
        0,
        0,
        517,
        518,
        5,
        9,
        0,
        0,
        518,
        520,
        3,
        174,
        87,
        0,
        519,
        521,
        3,
        34,
        17,
        0,
        520,
        519,
        1,
        0,
        0,
        0,
        520,
        521,
        1,
        0,
        0,
        0,
        521,
        523,
        1,
        0,
        0,
        0,
        522,
        524,
        3,
        28,
        14,
        0,
        523,
        522,
        1,
        0,
        0,
        0,
        523,
        524,
        1,
        0,
        0,
        0,
        524,
        526,
        1,
        0,
        0,
        0,
        525,
        527,
        3,
        30,
        15,
        0,
        526,
        525,
        1,
        0,
        0,
        0,
        526,
        527,
        1,
        0,
        0,
        0,
        527,
        529,
        1,
        0,
        0,
        0,
        528,
        530,
        3,
        32,
        16,
        0,
        529,
        528,
        1,
        0,
        0,
        0,
        529,
        530,
        1,
        0,
        0,
        0,
        530,
        531,
        1,
        0,
        0,
        0,
        531,
        532,
        3,
        50,
        25,
        0,
        532,
        27,
        1,
        0,
        0,
        0,
        533,
        534,
        5,
        17,
        0,
        0,
        534,
        535,
        3,
        284,
        142,
        0,
        535,
        29,
        1,
        0,
        0,
        0,
        536,
        537,
        5,
        24,
        0,
        0,
        537,
        538,
        3,
        282,
        141,
        0,
        538,
        31,
        1,
        0,
        0,
        0,
        539,
        540,
        5,
        65,
        0,
        0,
        540,
        541,
        3,
        282,
        141,
        0,
        541,
        33,
        1,
        0,
        0,
        0,
        542,
        543,
        5,
        89,
        0,
        0,
        543,
        548,
        3,
        36,
        18,
        0,
        544,
        545,
        5,
        85,
        0,
        0,
        545,
        547,
        3,
        36,
        18,
        0,
        546,
        544,
        1,
        0,
        0,
        0,
        547,
        550,
        1,
        0,
        0,
        0,
        548,
        546,
        1,
        0,
        0,
        0,
        548,
        549,
        1,
        0,
        0,
        0,
        549,
        551,
        1,
        0,
        0,
        0,
        550,
        548,
        1,
        0,
        0,
        0,
        551,
        552,
        5,
        88,
        0,
        0,
        552,
        35,
        1,
        0,
        0,
        0,
        553,
        555,
        3,
        126,
        63,
        0,
        554,
        553,
        1,
        0,
        0,
        0,
        555,
        558,
        1,
        0,
        0,
        0,
        556,
        554,
        1,
        0,
        0,
        0,
        556,
        557,
        1,
        0,
        0,
        0,
        557,
        559,
        1,
        0,
        0,
        0,
        558,
        556,
        1,
        0,
        0,
        0,
        559,
        562,
        3,
        174,
        87,
        0,
        560,
        561,
        5,
        17,
        0,
        0,
        561,
        563,
        3,
        38,
        19,
        0,
        562,
        560,
        1,
        0,
        0,
        0,
        562,
        563,
        1,
        0,
        0,
        0,
        563,
        37,
        1,
        0,
        0,
        0,
        564,
        566,
        3,
        126,
        63,
        0,
        565,
        564,
        1,
        0,
        0,
        0,
        566,
        569,
        1,
        0,
        0,
        0,
        567,
        565,
        1,
        0,
        0,
        0,
        567,
        568,
        1,
        0,
        0,
        0,
        568,
        570,
        1,
        0,
        0,
        0,
        569,
        567,
        1,
        0,
        0,
        0,
        570,
        575,
        3,
        284,
        142,
        0,
        571,
        572,
        5,
        106,
        0,
        0,
        572,
        574,
        3,
        284,
        142,
        0,
        573,
        571,
        1,
        0,
        0,
        0,
        574,
        577,
        1,
        0,
        0,
        0,
        575,
        573,
        1,
        0,
        0,
        0,
        575,
        576,
        1,
        0,
        0,
        0,
        576,
        39,
        1,
        0,
        0,
        0,
        577,
        575,
        1,
        0,
        0,
        0,
        578,
        579,
        5,
        16,
        0,
        0,
        579,
        581,
        3,
        174,
        87,
        0,
        580,
        582,
        3,
        30,
        15,
        0,
        581,
        580,
        1,
        0,
        0,
        0,
        581,
        582,
        1,
        0,
        0,
        0,
        582,
        583,
        1,
        0,
        0,
        0,
        583,
        585,
        5,
        80,
        0,
        0,
        584,
        586,
        3,
        42,
        21,
        0,
        585,
        584,
        1,
        0,
        0,
        0,
        585,
        586,
        1,
        0,
        0,
        0,
        586,
        588,
        1,
        0,
        0,
        0,
        587,
        589,
        5,
        85,
        0,
        0,
        588,
        587,
        1,
        0,
        0,
        0,
        588,
        589,
        1,
        0,
        0,
        0,
        589,
        591,
        1,
        0,
        0,
        0,
        590,
        592,
        3,
        46,
        23,
        0,
        591,
        590,
        1,
        0,
        0,
        0,
        591,
        592,
        1,
        0,
        0,
        0,
        592,
        593,
        1,
        0,
        0,
        0,
        593,
        594,
        5,
        81,
        0,
        0,
        594,
        41,
        1,
        0,
        0,
        0,
        595,
        600,
        3,
        44,
        22,
        0,
        596,
        597,
        5,
        85,
        0,
        0,
        597,
        599,
        3,
        44,
        22,
        0,
        598,
        596,
        1,
        0,
        0,
        0,
        599,
        602,
        1,
        0,
        0,
        0,
        600,
        598,
        1,
        0,
        0,
        0,
        600,
        601,
        1,
        0,
        0,
        0,
        601,
        43,
        1,
        0,
        0,
        0,
        602,
        600,
        1,
        0,
        0,
        0,
        603,
        605,
        3,
        126,
        63,
        0,
        604,
        603,
        1,
        0,
        0,
        0,
        605,
        608,
        1,
        0,
        0,
        0,
        606,
        604,
        1,
        0,
        0,
        0,
        606,
        607,
        1,
        0,
        0,
        0,
        607,
        609,
        1,
        0,
        0,
        0,
        608,
        606,
        1,
        0,
        0,
        0,
        609,
        611,
        3,
        174,
        87,
        0,
        610,
        612,
        3,
        294,
        147,
        0,
        611,
        610,
        1,
        0,
        0,
        0,
        611,
        612,
        1,
        0,
        0,
        0,
        612,
        614,
        1,
        0,
        0,
        0,
        613,
        615,
        3,
        50,
        25,
        0,
        614,
        613,
        1,
        0,
        0,
        0,
        614,
        615,
        1,
        0,
        0,
        0,
        615,
        45,
        1,
        0,
        0,
        0,
        616,
        620,
        5,
        84,
        0,
        0,
        617,
        619,
        3,
        54,
        27,
        0,
        618,
        617,
        1,
        0,
        0,
        0,
        619,
        622,
        1,
        0,
        0,
        0,
        620,
        618,
        1,
        0,
        0,
        0,
        620,
        621,
        1,
        0,
        0,
        0,
        621,
        47,
        1,
        0,
        0,
        0,
        622,
        620,
        1,
        0,
        0,
        0,
        623,
        624,
        5,
        28,
        0,
        0,
        624,
        626,
        3,
        174,
        87,
        0,
        625,
        627,
        3,
        34,
        17,
        0,
        626,
        625,
        1,
        0,
        0,
        0,
        626,
        627,
        1,
        0,
        0,
        0,
        627,
        629,
        1,
        0,
        0,
        0,
        628,
        630,
        3,
        28,
        14,
        0,
        629,
        628,
        1,
        0,
        0,
        0,
        629,
        630,
        1,
        0,
        0,
        0,
        630,
        632,
        1,
        0,
        0,
        0,
        631,
        633,
        3,
        30,
        15,
        0,
        632,
        631,
        1,
        0,
        0,
        0,
        632,
        633,
        1,
        0,
        0,
        0,
        633,
        634,
        1,
        0,
        0,
        0,
        634,
        635,
        3,
        52,
        26,
        0,
        635,
        49,
        1,
        0,
        0,
        0,
        636,
        640,
        5,
        80,
        0,
        0,
        637,
        639,
        3,
        54,
        27,
        0,
        638,
        637,
        1,
        0,
        0,
        0,
        639,
        642,
        1,
        0,
        0,
        0,
        640,
        638,
        1,
        0,
        0,
        0,
        640,
        641,
        1,
        0,
        0,
        0,
        641,
        643,
        1,
        0,
        0,
        0,
        642,
        640,
        1,
        0,
        0,
        0,
        643,
        644,
        5,
        81,
        0,
        0,
        644,
        51,
        1,
        0,
        0,
        0,
        645,
        649,
        5,
        80,
        0,
        0,
        646,
        648,
        3,
        76,
        38,
        0,
        647,
        646,
        1,
        0,
        0,
        0,
        648,
        651,
        1,
        0,
        0,
        0,
        649,
        647,
        1,
        0,
        0,
        0,
        649,
        650,
        1,
        0,
        0,
        0,
        650,
        652,
        1,
        0,
        0,
        0,
        651,
        649,
        1,
        0,
        0,
        0,
        652,
        653,
        5,
        81,
        0,
        0,
        653,
        53,
        1,
        0,
        0,
        0,
        654,
        667,
        5,
        84,
        0,
        0,
        655,
        657,
        5,
        38,
        0,
        0,
        656,
        655,
        1,
        0,
        0,
        0,
        656,
        657,
        1,
        0,
        0,
        0,
        657,
        658,
        1,
        0,
        0,
        0,
        658,
        667,
        3,
        168,
        84,
        0,
        659,
        661,
        3,
        20,
        10,
        0,
        660,
        659,
        1,
        0,
        0,
        0,
        661,
        664,
        1,
        0,
        0,
        0,
        662,
        660,
        1,
        0,
        0,
        0,
        662,
        663,
        1,
        0,
        0,
        0,
        663,
        665,
        1,
        0,
        0,
        0,
        664,
        662,
        1,
        0,
        0,
        0,
        665,
        667,
        3,
        56,
        28,
        0,
        666,
        654,
        1,
        0,
        0,
        0,
        666,
        656,
        1,
        0,
        0,
        0,
        666,
        662,
        1,
        0,
        0,
        0,
        667,
        55,
        1,
        0,
        0,
        0,
        668,
        677,
        3,
        158,
        79,
        0,
        669,
        677,
        3,
        58,
        29,
        0,
        670,
        677,
        3,
        74,
        37,
        0,
        671,
        677,
        3,
        70,
        35,
        0,
        672,
        677,
        3,
        48,
        24,
        0,
        673,
        677,
        3,
        136,
        68,
        0,
        674,
        677,
        3,
        26,
        13,
        0,
        675,
        677,
        3,
        40,
        20,
        0,
        676,
        668,
        1,
        0,
        0,
        0,
        676,
        669,
        1,
        0,
        0,
        0,
        676,
        670,
        1,
        0,
        0,
        0,
        676,
        671,
        1,
        0,
        0,
        0,
        676,
        672,
        1,
        0,
        0,
        0,
        676,
        673,
        1,
        0,
        0,
        0,
        676,
        674,
        1,
        0,
        0,
        0,
        676,
        675,
        1,
        0,
        0,
        0,
        677,
        57,
        1,
        0,
        0,
        0,
        678,
        680,
        3,
        34,
        17,
        0,
        679,
        678,
        1,
        0,
        0,
        0,
        679,
        680,
        1,
        0,
        0,
        0,
        680,
        681,
        1,
        0,
        0,
        0,
        681,
        682,
        3,
        68,
        34,
        0,
        682,
        683,
        3,
        174,
        87,
        0,
        683,
        685,
        3,
        104,
        52,
        0,
        684,
        686,
        3,
        60,
        30,
        0,
        685,
        684,
        1,
        0,
        0,
        0,
        685,
        686,
        1,
        0,
        0,
        0,
        686,
        688,
        1,
        0,
        0,
        0,
        687,
        689,
        3,
        64,
        32,
        0,
        688,
        687,
        1,
        0,
        0,
        0,
        688,
        689,
        1,
        0,
        0,
        0,
        689,
        690,
        1,
        0,
        0,
        0,
        690,
        691,
        3,
        66,
        33,
        0,
        691,
        59,
        1,
        0,
        0,
        0,
        692,
        696,
        3,
        62,
        31,
        0,
        693,
        695,
        3,
        62,
        31,
        0,
        694,
        693,
        1,
        0,
        0,
        0,
        695,
        698,
        1,
        0,
        0,
        0,
        696,
        694,
        1,
        0,
        0,
        0,
        696,
        697,
        1,
        0,
        0,
        0,
        697,
        61,
        1,
        0,
        0,
        0,
        698,
        696,
        1,
        0,
        0,
        0,
        699,
        701,
        3,
        126,
        63,
        0,
        700,
        699,
        1,
        0,
        0,
        0,
        701,
        704,
        1,
        0,
        0,
        0,
        702,
        700,
        1,
        0,
        0,
        0,
        702,
        703,
        1,
        0,
        0,
        0,
        703,
        705,
        1,
        0,
        0,
        0,
        704,
        702,
        1,
        0,
        0,
        0,
        705,
        706,
        5,
        82,
        0,
        0,
        706,
        707,
        5,
        83,
        0,
        0,
        707,
        63,
        1,
        0,
        0,
        0,
        708,
        709,
        5,
        45,
        0,
        0,
        709,
        710,
        3,
        102,
        51,
        0,
        710,
        65,
        1,
        0,
        0,
        0,
        711,
        714,
        3,
        168,
        84,
        0,
        712,
        714,
        5,
        84,
        0,
        0,
        713,
        711,
        1,
        0,
        0,
        0,
        713,
        712,
        1,
        0,
        0,
        0,
        714,
        67,
        1,
        0,
        0,
        0,
        715,
        718,
        3,
        284,
        142,
        0,
        716,
        718,
        5,
        48,
        0,
        0,
        717,
        715,
        1,
        0,
        0,
        0,
        717,
        716,
        1,
        0,
        0,
        0,
        718,
        69,
        1,
        0,
        0,
        0,
        719,
        721,
        3,
        34,
        17,
        0,
        720,
        719,
        1,
        0,
        0,
        0,
        720,
        721,
        1,
        0,
        0,
        0,
        721,
        722,
        1,
        0,
        0,
        0,
        722,
        723,
        3,
        174,
        87,
        0,
        723,
        725,
        3,
        104,
        52,
        0,
        724,
        726,
        3,
        64,
        32,
        0,
        725,
        724,
        1,
        0,
        0,
        0,
        725,
        726,
        1,
        0,
        0,
        0,
        726,
        727,
        1,
        0,
        0,
        0,
        727,
        728,
        3,
        168,
        84,
        0,
        728,
        71,
        1,
        0,
        0,
        0,
        729,
        731,
        3,
        20,
        10,
        0,
        730,
        729,
        1,
        0,
        0,
        0,
        731,
        734,
        1,
        0,
        0,
        0,
        732,
        730,
        1,
        0,
        0,
        0,
        732,
        733,
        1,
        0,
        0,
        0,
        733,
        735,
        1,
        0,
        0,
        0,
        734,
        732,
        1,
        0,
        0,
        0,
        735,
        736,
        3,
        174,
        87,
        0,
        736,
        737,
        3,
        168,
        84,
        0,
        737,
        73,
        1,
        0,
        0,
        0,
        738,
        739,
        3,
        284,
        142,
        0,
        739,
        740,
        3,
        86,
        43,
        0,
        740,
        741,
        5,
        84,
        0,
        0,
        741,
        75,
        1,
        0,
        0,
        0,
        742,
        744,
        3,
        20,
        10,
        0,
        743,
        742,
        1,
        0,
        0,
        0,
        744,
        747,
        1,
        0,
        0,
        0,
        745,
        743,
        1,
        0,
        0,
        0,
        745,
        746,
        1,
        0,
        0,
        0,
        746,
        748,
        1,
        0,
        0,
        0,
        747,
        745,
        1,
        0,
        0,
        0,
        748,
        751,
        3,
        78,
        39,
        0,
        749,
        751,
        5,
        84,
        0,
        0,
        750,
        745,
        1,
        0,
        0,
        0,
        750,
        749,
        1,
        0,
        0,
        0,
        751,
        77,
        1,
        0,
        0,
        0,
        752,
        760,
        3,
        158,
        79,
        0,
        753,
        760,
        3,
        80,
        40,
        0,
        754,
        760,
        3,
        84,
        42,
        0,
        755,
        760,
        3,
        48,
        24,
        0,
        756,
        760,
        3,
        136,
        68,
        0,
        757,
        760,
        3,
        26,
        13,
        0,
        758,
        760,
        3,
        40,
        20,
        0,
        759,
        752,
        1,
        0,
        0,
        0,
        759,
        753,
        1,
        0,
        0,
        0,
        759,
        754,
        1,
        0,
        0,
        0,
        759,
        755,
        1,
        0,
        0,
        0,
        759,
        756,
        1,
        0,
        0,
        0,
        759,
        757,
        1,
        0,
        0,
        0,
        759,
        758,
        1,
        0,
        0,
        0,
        760,
        79,
        1,
        0,
        0,
        0,
        761,
        762,
        3,
        284,
        142,
        0,
        762,
        763,
        3,
        86,
        43,
        0,
        763,
        764,
        5,
        84,
        0,
        0,
        764,
        81,
        1,
        0,
        0,
        0,
        765,
        772,
        3,
        126,
        63,
        0,
        766,
        772,
        5,
        35,
        0,
        0,
        767,
        772,
        5,
        1,
        0,
        0,
        768,
        772,
        5,
        12,
        0,
        0,
        769,
        772,
        5,
        38,
        0,
        0,
        770,
        772,
        5,
        39,
        0,
        0,
        771,
        765,
        1,
        0,
        0,
        0,
        771,
        766,
        1,
        0,
        0,
        0,
        771,
        767,
        1,
        0,
        0,
        0,
        771,
        768,
        1,
        0,
        0,
        0,
        771,
        769,
        1,
        0,
        0,
        0,
        771,
        770,
        1,
        0,
        0,
        0,
        772,
        83,
        1,
        0,
        0,
        0,
        773,
        775,
        3,
        82,
        41,
        0,
        774,
        773,
        1,
        0,
        0,
        0,
        775,
        778,
        1,
        0,
        0,
        0,
        776,
        774,
        1,
        0,
        0,
        0,
        776,
        777,
        1,
        0,
        0,
        0,
        777,
        780,
        1,
        0,
        0,
        0,
        778,
        776,
        1,
        0,
        0,
        0,
        779,
        781,
        3,
        34,
        17,
        0,
        780,
        779,
        1,
        0,
        0,
        0,
        780,
        781,
        1,
        0,
        0,
        0,
        781,
        785,
        1,
        0,
        0,
        0,
        782,
        784,
        3,
        126,
        63,
        0,
        783,
        782,
        1,
        0,
        0,
        0,
        784,
        787,
        1,
        0,
        0,
        0,
        785,
        783,
        1,
        0,
        0,
        0,
        785,
        786,
        1,
        0,
        0,
        0,
        786,
        788,
        1,
        0,
        0,
        0,
        787,
        785,
        1,
        0,
        0,
        0,
        788,
        789,
        3,
        68,
        34,
        0,
        789,
        790,
        3,
        174,
        87,
        0,
        790,
        792,
        3,
        104,
        52,
        0,
        791,
        793,
        3,
        60,
        30,
        0,
        792,
        791,
        1,
        0,
        0,
        0,
        792,
        793,
        1,
        0,
        0,
        0,
        793,
        795,
        1,
        0,
        0,
        0,
        794,
        796,
        3,
        64,
        32,
        0,
        795,
        794,
        1,
        0,
        0,
        0,
        795,
        796,
        1,
        0,
        0,
        0,
        796,
        797,
        1,
        0,
        0,
        0,
        797,
        798,
        3,
        66,
        33,
        0,
        798,
        85,
        1,
        0,
        0,
        0,
        799,
        804,
        3,
        88,
        44,
        0,
        800,
        801,
        5,
        85,
        0,
        0,
        801,
        803,
        3,
        88,
        44,
        0,
        802,
        800,
        1,
        0,
        0,
        0,
        803,
        806,
        1,
        0,
        0,
        0,
        804,
        802,
        1,
        0,
        0,
        0,
        804,
        805,
        1,
        0,
        0,
        0,
        805,
        87,
        1,
        0,
        0,
        0,
        806,
        804,
        1,
        0,
        0,
        0,
        807,
        810,
        3,
        90,
        45,
        0,
        808,
        809,
        5,
        87,
        0,
        0,
        809,
        811,
        3,
        92,
        46,
        0,
        810,
        808,
        1,
        0,
        0,
        0,
        810,
        811,
        1,
        0,
        0,
        0,
        811,
        89,
        1,
        0,
        0,
        0,
        812,
        814,
        3,
        174,
        87,
        0,
        813,
        815,
        3,
        60,
        30,
        0,
        814,
        813,
        1,
        0,
        0,
        0,
        814,
        815,
        1,
        0,
        0,
        0,
        815,
        91,
        1,
        0,
        0,
        0,
        816,
        819,
        3,
        94,
        47,
        0,
        817,
        819,
        3,
        238,
        119,
        0,
        818,
        816,
        1,
        0,
        0,
        0,
        818,
        817,
        1,
        0,
        0,
        0,
        819,
        93,
        1,
        0,
        0,
        0,
        820,
        832,
        5,
        80,
        0,
        0,
        821,
        826,
        3,
        92,
        46,
        0,
        822,
        823,
        5,
        85,
        0,
        0,
        823,
        825,
        3,
        92,
        46,
        0,
        824,
        822,
        1,
        0,
        0,
        0,
        825,
        828,
        1,
        0,
        0,
        0,
        826,
        824,
        1,
        0,
        0,
        0,
        826,
        827,
        1,
        0,
        0,
        0,
        827,
        830,
        1,
        0,
        0,
        0,
        828,
        826,
        1,
        0,
        0,
        0,
        829,
        831,
        5,
        85,
        0,
        0,
        830,
        829,
        1,
        0,
        0,
        0,
        830,
        831,
        1,
        0,
        0,
        0,
        831,
        833,
        1,
        0,
        0,
        0,
        832,
        821,
        1,
        0,
        0,
        0,
        832,
        833,
        1,
        0,
        0,
        0,
        833,
        834,
        1,
        0,
        0,
        0,
        834,
        835,
        5,
        81,
        0,
        0,
        835,
        95,
        1,
        0,
        0,
        0,
        836,
        837,
        3,
        98,
        49,
        0,
        837,
        838,
        5,
        86,
        0,
        0,
        838,
        840,
        1,
        0,
        0,
        0,
        839,
        836,
        1,
        0,
        0,
        0,
        840,
        843,
        1,
        0,
        0,
        0,
        841,
        839,
        1,
        0,
        0,
        0,
        841,
        842,
        1,
        0,
        0,
        0,
        842,
        844,
        1,
        0,
        0,
        0,
        843,
        841,
        1,
        0,
        0,
        0,
        844,
        845,
        3,
        98,
        49,
        0,
        845,
        97,
        1,
        0,
        0,
        0,
        846,
        848,
        3,
        176,
        88,
        0,
        847,
        849,
        3,
        288,
        144,
        0,
        848,
        847,
        1,
        0,
        0,
        0,
        848,
        849,
        1,
        0,
        0,
        0,
        849,
        99,
        1,
        0,
        0,
        0,
        850,
        863,
        3,
        284,
        142,
        0,
        851,
        853,
        3,
        126,
        63,
        0,
        852,
        851,
        1,
        0,
        0,
        0,
        853,
        856,
        1,
        0,
        0,
        0,
        854,
        852,
        1,
        0,
        0,
        0,
        854,
        855,
        1,
        0,
        0,
        0,
        855,
        857,
        1,
        0,
        0,
        0,
        856,
        854,
        1,
        0,
        0,
        0,
        857,
        860,
        5,
        92,
        0,
        0,
        858,
        859,
        7,
        0,
        0,
        0,
        859,
        861,
        3,
        284,
        142,
        0,
        860,
        858,
        1,
        0,
        0,
        0,
        860,
        861,
        1,
        0,
        0,
        0,
        861,
        863,
        1,
        0,
        0,
        0,
        862,
        850,
        1,
        0,
        0,
        0,
        862,
        854,
        1,
        0,
        0,
        0,
        863,
        101,
        1,
        0,
        0,
        0,
        864,
        869,
        3,
        118,
        59,
        0,
        865,
        866,
        5,
        85,
        0,
        0,
        866,
        868,
        3,
        118,
        59,
        0,
        867,
        865,
        1,
        0,
        0,
        0,
        868,
        871,
        1,
        0,
        0,
        0,
        869,
        867,
        1,
        0,
        0,
        0,
        869,
        870,
        1,
        0,
        0,
        0,
        870,
        103,
        1,
        0,
        0,
        0,
        871,
        869,
        1,
        0,
        0,
        0,
        872,
        884,
        5,
        78,
        0,
        0,
        873,
        875,
        3,
        106,
        53,
        0,
        874,
        873,
        1,
        0,
        0,
        0,
        874,
        875,
        1,
        0,
        0,
        0,
        875,
        885,
        1,
        0,
        0,
        0,
        876,
        879,
        3,
        106,
        53,
        0,
        877,
        878,
        5,
        85,
        0,
        0,
        878,
        880,
        3,
        108,
        54,
        0,
        879,
        877,
        1,
        0,
        0,
        0,
        879,
        880,
        1,
        0,
        0,
        0,
        880,
        885,
        1,
        0,
        0,
        0,
        881,
        883,
        3,
        108,
        54,
        0,
        882,
        881,
        1,
        0,
        0,
        0,
        882,
        883,
        1,
        0,
        0,
        0,
        883,
        885,
        1,
        0,
        0,
        0,
        884,
        874,
        1,
        0,
        0,
        0,
        884,
        876,
        1,
        0,
        0,
        0,
        884,
        882,
        1,
        0,
        0,
        0,
        885,
        886,
        1,
        0,
        0,
        0,
        886,
        887,
        5,
        79,
        0,
        0,
        887,
        105,
        1,
        0,
        0,
        0,
        888,
        894,
        3,
        284,
        142,
        0,
        889,
        890,
        3,
        174,
        87,
        0,
        890,
        891,
        5,
        86,
        0,
        0,
        891,
        893,
        1,
        0,
        0,
        0,
        892,
        889,
        1,
        0,
        0,
        0,
        893,
        896,
        1,
        0,
        0,
        0,
        894,
        892,
        1,
        0,
        0,
        0,
        894,
        895,
        1,
        0,
        0,
        0,
        895,
        897,
        1,
        0,
        0,
        0,
        896,
        894,
        1,
        0,
        0,
        0,
        897,
        898,
        5,
        43,
        0,
        0,
        898,
        107,
        1,
        0,
        0,
        0,
        899,
        904,
        3,
        110,
        55,
        0,
        900,
        901,
        5,
        85,
        0,
        0,
        901,
        903,
        3,
        110,
        55,
        0,
        902,
        900,
        1,
        0,
        0,
        0,
        903,
        906,
        1,
        0,
        0,
        0,
        904,
        902,
        1,
        0,
        0,
        0,
        904,
        905,
        1,
        0,
        0,
        0,
        905,
        909,
        1,
        0,
        0,
        0,
        906,
        904,
        1,
        0,
        0,
        0,
        907,
        908,
        5,
        85,
        0,
        0,
        908,
        910,
        3,
        112,
        56,
        0,
        909,
        907,
        1,
        0,
        0,
        0,
        909,
        910,
        1,
        0,
        0,
        0,
        910,
        913,
        1,
        0,
        0,
        0,
        911,
        913,
        3,
        112,
        56,
        0,
        912,
        899,
        1,
        0,
        0,
        0,
        912,
        911,
        1,
        0,
        0,
        0,
        913,
        109,
        1,
        0,
        0,
        0,
        914,
        916,
        3,
        24,
        12,
        0,
        915,
        914,
        1,
        0,
        0,
        0,
        916,
        919,
        1,
        0,
        0,
        0,
        917,
        915,
        1,
        0,
        0,
        0,
        917,
        918,
        1,
        0,
        0,
        0,
        918,
        920,
        1,
        0,
        0,
        0,
        919,
        917,
        1,
        0,
        0,
        0,
        920,
        921,
        3,
        284,
        142,
        0,
        921,
        922,
        3,
        90,
        45,
        0,
        922,
        111,
        1,
        0,
        0,
        0,
        923,
        925,
        3,
        24,
        12,
        0,
        924,
        923,
        1,
        0,
        0,
        0,
        925,
        928,
        1,
        0,
        0,
        0,
        926,
        924,
        1,
        0,
        0,
        0,
        926,
        927,
        1,
        0,
        0,
        0,
        927,
        929,
        1,
        0,
        0,
        0,
        928,
        926,
        1,
        0,
        0,
        0,
        929,
        933,
        3,
        284,
        142,
        0,
        930,
        932,
        3,
        126,
        63,
        0,
        931,
        930,
        1,
        0,
        0,
        0,
        932,
        935,
        1,
        0,
        0,
        0,
        933,
        931,
        1,
        0,
        0,
        0,
        933,
        934,
        1,
        0,
        0,
        0,
        934,
        936,
        1,
        0,
        0,
        0,
        935,
        933,
        1,
        0,
        0,
        0,
        936,
        937,
        5,
        124,
        0,
        0,
        937,
        938,
        3,
        90,
        45,
        0,
        938,
        113,
        1,
        0,
        0,
        0,
        939,
        944,
        3,
        116,
        58,
        0,
        940,
        941,
        5,
        85,
        0,
        0,
        941,
        943,
        3,
        116,
        58,
        0,
        942,
        940,
        1,
        0,
        0,
        0,
        943,
        946,
        1,
        0,
        0,
        0,
        944,
        942,
        1,
        0,
        0,
        0,
        944,
        945,
        1,
        0,
        0,
        0,
        945,
        115,
        1,
        0,
        0,
        0,
        946,
        944,
        1,
        0,
        0,
        0,
        947,
        949,
        3,
        24,
        12,
        0,
        948,
        947,
        1,
        0,
        0,
        0,
        949,
        952,
        1,
        0,
        0,
        0,
        950,
        948,
        1,
        0,
        0,
        0,
        950,
        951,
        1,
        0,
        0,
        0,
        951,
        953,
        1,
        0,
        0,
        0,
        952,
        950,
        1,
        0,
        0,
        0,
        953,
        954,
        5,
        61,
        0,
        0,
        954,
        955,
        3,
        174,
        87,
        0,
        955,
        117,
        1,
        0,
        0,
        0,
        956,
        961,
        3,
        174,
        87,
        0,
        957,
        958,
        5,
        86,
        0,
        0,
        958,
        960,
        3,
        174,
        87,
        0,
        959,
        957,
        1,
        0,
        0,
        0,
        960,
        963,
        1,
        0,
        0,
        0,
        961,
        959,
        1,
        0,
        0,
        0,
        961,
        962,
        1,
        0,
        0,
        0,
        962,
        119,
        1,
        0,
        0,
        0,
        963,
        961,
        1,
        0,
        0,
        0,
        964,
        972,
        3,
        122,
        61,
        0,
        965,
        972,
        3,
        124,
        62,
        0,
        966,
        972,
        5,
        74,
        0,
        0,
        967,
        972,
        5,
        75,
        0,
        0,
        968,
        972,
        5,
        73,
        0,
        0,
        969,
        972,
        5,
        77,
        0,
        0,
        970,
        972,
        5,
        76,
        0,
        0,
        971,
        964,
        1,
        0,
        0,
        0,
        971,
        965,
        1,
        0,
        0,
        0,
        971,
        966,
        1,
        0,
        0,
        0,
        971,
        967,
        1,
        0,
        0,
        0,
        971,
        968,
        1,
        0,
        0,
        0,
        971,
        969,
        1,
        0,
        0,
        0,
        971,
        970,
        1,
        0,
        0,
        0,
        972,
        121,
        1,
        0,
        0,
        0,
        973,
        974,
        7,
        1,
        0,
        0,
        974,
        123,
        1,
        0,
        0,
        0,
        975,
        976,
        7,
        2,
        0,
        0,
        976,
        125,
        1,
        0,
        0,
        0,
        977,
        978,
        5,
        123,
        0,
        0,
        978,
        985,
        3,
        118,
        59,
        0,
        979,
        982,
        5,
        78,
        0,
        0,
        980,
        983,
        3,
        128,
        64,
        0,
        981,
        983,
        3,
        132,
        66,
        0,
        982,
        980,
        1,
        0,
        0,
        0,
        982,
        981,
        1,
        0,
        0,
        0,
        982,
        983,
        1,
        0,
        0,
        0,
        983,
        984,
        1,
        0,
        0,
        0,
        984,
        986,
        5,
        79,
        0,
        0,
        985,
        979,
        1,
        0,
        0,
        0,
        985,
        986,
        1,
        0,
        0,
        0,
        986,
        127,
        1,
        0,
        0,
        0,
        987,
        992,
        3,
        130,
        65,
        0,
        988,
        989,
        5,
        85,
        0,
        0,
        989,
        991,
        3,
        130,
        65,
        0,
        990,
        988,
        1,
        0,
        0,
        0,
        991,
        994,
        1,
        0,
        0,
        0,
        992,
        990,
        1,
        0,
        0,
        0,
        992,
        993,
        1,
        0,
        0,
        0,
        993,
        129,
        1,
        0,
        0,
        0,
        994,
        992,
        1,
        0,
        0,
        0,
        995,
        996,
        3,
        174,
        87,
        0,
        996,
        997,
        5,
        87,
        0,
        0,
        997,
        998,
        3,
        132,
        66,
        0,
        998,
        131,
        1,
        0,
        0,
        0,
        999,
        1003,
        3,
        238,
        119,
        0,
        1000,
        1003,
        3,
        126,
        63,
        0,
        1001,
        1003,
        3,
        134,
        67,
        0,
        1002,
        999,
        1,
        0,
        0,
        0,
        1002,
        1000,
        1,
        0,
        0,
        0,
        1002,
        1001,
        1,
        0,
        0,
        0,
        1003,
        133,
        1,
        0,
        0,
        0,
        1004,
        1013,
        5,
        80,
        0,
        0,
        1005,
        1010,
        3,
        132,
        66,
        0,
        1006,
        1007,
        5,
        85,
        0,
        0,
        1007,
        1009,
        3,
        132,
        66,
        0,
        1008,
        1006,
        1,
        0,
        0,
        0,
        1009,
        1012,
        1,
        0,
        0,
        0,
        1010,
        1008,
        1,
        0,
        0,
        0,
        1010,
        1011,
        1,
        0,
        0,
        0,
        1011,
        1014,
        1,
        0,
        0,
        0,
        1012,
        1010,
        1,
        0,
        0,
        0,
        1013,
        1005,
        1,
        0,
        0,
        0,
        1013,
        1014,
        1,
        0,
        0,
        0,
        1014,
        1016,
        1,
        0,
        0,
        0,
        1015,
        1017,
        5,
        85,
        0,
        0,
        1016,
        1015,
        1,
        0,
        0,
        0,
        1016,
        1017,
        1,
        0,
        0,
        0,
        1017,
        1018,
        1,
        0,
        0,
        0,
        1018,
        1019,
        5,
        81,
        0,
        0,
        1019,
        135,
        1,
        0,
        0,
        0,
        1020,
        1021,
        5,
        123,
        0,
        0,
        1021,
        1022,
        5,
        28,
        0,
        0,
        1022,
        1023,
        3,
        174,
        87,
        0,
        1023,
        1024,
        3,
        138,
        69,
        0,
        1024,
        137,
        1,
        0,
        0,
        0,
        1025,
        1029,
        5,
        80,
        0,
        0,
        1026,
        1028,
        3,
        140,
        70,
        0,
        1027,
        1026,
        1,
        0,
        0,
        0,
        1028,
        1031,
        1,
        0,
        0,
        0,
        1029,
        1027,
        1,
        0,
        0,
        0,
        1029,
        1030,
        1,
        0,
        0,
        0,
        1030,
        1032,
        1,
        0,
        0,
        0,
        1031,
        1029,
        1,
        0,
        0,
        0,
        1032,
        1033,
        5,
        81,
        0,
        0,
        1033,
        139,
        1,
        0,
        0,
        0,
        1034,
        1036,
        3,
        20,
        10,
        0,
        1035,
        1034,
        1,
        0,
        0,
        0,
        1036,
        1039,
        1,
        0,
        0,
        0,
        1037,
        1035,
        1,
        0,
        0,
        0,
        1037,
        1038,
        1,
        0,
        0,
        0,
        1038,
        1040,
        1,
        0,
        0,
        0,
        1039,
        1037,
        1,
        0,
        0,
        0,
        1040,
        1043,
        3,
        142,
        71,
        0,
        1041,
        1043,
        5,
        84,
        0,
        0,
        1042,
        1037,
        1,
        0,
        0,
        0,
        1042,
        1041,
        1,
        0,
        0,
        0,
        1043,
        141,
        1,
        0,
        0,
        0,
        1044,
        1067,
        3,
        144,
        72,
        0,
        1045,
        1067,
        3,
        146,
        73,
        0,
        1046,
        1048,
        3,
        26,
        13,
        0,
        1047,
        1049,
        5,
        84,
        0,
        0,
        1048,
        1047,
        1,
        0,
        0,
        0,
        1048,
        1049,
        1,
        0,
        0,
        0,
        1049,
        1067,
        1,
        0,
        0,
        0,
        1050,
        1052,
        3,
        48,
        24,
        0,
        1051,
        1053,
        5,
        84,
        0,
        0,
        1052,
        1051,
        1,
        0,
        0,
        0,
        1052,
        1053,
        1,
        0,
        0,
        0,
        1053,
        1067,
        1,
        0,
        0,
        0,
        1054,
        1056,
        3,
        40,
        20,
        0,
        1055,
        1057,
        5,
        84,
        0,
        0,
        1056,
        1055,
        1,
        0,
        0,
        0,
        1056,
        1057,
        1,
        0,
        0,
        0,
        1057,
        1067,
        1,
        0,
        0,
        0,
        1058,
        1060,
        3,
        136,
        68,
        0,
        1059,
        1061,
        5,
        84,
        0,
        0,
        1060,
        1059,
        1,
        0,
        0,
        0,
        1060,
        1061,
        1,
        0,
        0,
        0,
        1061,
        1067,
        1,
        0,
        0,
        0,
        1062,
        1064,
        3,
        158,
        79,
        0,
        1063,
        1065,
        5,
        84,
        0,
        0,
        1064,
        1063,
        1,
        0,
        0,
        0,
        1064,
        1065,
        1,
        0,
        0,
        0,
        1065,
        1067,
        1,
        0,
        0,
        0,
        1066,
        1044,
        1,
        0,
        0,
        0,
        1066,
        1045,
        1,
        0,
        0,
        0,
        1066,
        1046,
        1,
        0,
        0,
        0,
        1066,
        1050,
        1,
        0,
        0,
        0,
        1066,
        1054,
        1,
        0,
        0,
        0,
        1066,
        1058,
        1,
        0,
        0,
        0,
        1066,
        1062,
        1,
        0,
        0,
        0,
        1067,
        143,
        1,
        0,
        0,
        0,
        1068,
        1069,
        3,
        284,
        142,
        0,
        1069,
        1070,
        3,
        86,
        43,
        0,
        1070,
        1071,
        5,
        84,
        0,
        0,
        1071,
        145,
        1,
        0,
        0,
        0,
        1072,
        1073,
        3,
        284,
        142,
        0,
        1073,
        1074,
        3,
        174,
        87,
        0,
        1074,
        1075,
        5,
        78,
        0,
        0,
        1075,
        1077,
        5,
        79,
        0,
        0,
        1076,
        1078,
        3,
        148,
        74,
        0,
        1077,
        1076,
        1,
        0,
        0,
        0,
        1077,
        1078,
        1,
        0,
        0,
        0,
        1078,
        1079,
        1,
        0,
        0,
        0,
        1079,
        1080,
        5,
        84,
        0,
        0,
        1080,
        147,
        1,
        0,
        0,
        0,
        1081,
        1082,
        5,
        12,
        0,
        0,
        1082,
        1083,
        3,
        132,
        66,
        0,
        1083,
        149,
        1,
        0,
        0,
        0,
        1084,
        1086,
        5,
        52,
        0,
        0,
        1085,
        1084,
        1,
        0,
        0,
        0,
        1085,
        1086,
        1,
        0,
        0,
        0,
        1086,
        1087,
        1,
        0,
        0,
        0,
        1087,
        1088,
        5,
        51,
        0,
        0,
        1088,
        1089,
        3,
        118,
        59,
        0,
        1089,
        1090,
        3,
        152,
        76,
        0,
        1090,
        151,
        1,
        0,
        0,
        0,
        1091,
        1095,
        5,
        80,
        0,
        0,
        1092,
        1094,
        3,
        154,
        77,
        0,
        1093,
        1092,
        1,
        0,
        0,
        0,
        1094,
        1097,
        1,
        0,
        0,
        0,
        1095,
        1093,
        1,
        0,
        0,
        0,
        1095,
        1096,
        1,
        0,
        0,
        0,
        1096,
        1098,
        1,
        0,
        0,
        0,
        1097,
        1095,
        1,
        0,
        0,
        0,
        1098,
        1099,
        5,
        81,
        0,
        0,
        1099,
        153,
        1,
        0,
        0,
        0,
        1100,
        1104,
        5,
        53,
        0,
        0,
        1101,
        1103,
        3,
        156,
        78,
        0,
        1102,
        1101,
        1,
        0,
        0,
        0,
        1103,
        1106,
        1,
        0,
        0,
        0,
        1104,
        1102,
        1,
        0,
        0,
        0,
        1104,
        1105,
        1,
        0,
        0,
        0,
        1105,
        1107,
        1,
        0,
        0,
        0,
        1106,
        1104,
        1,
        0,
        0,
        0,
        1107,
        1108,
        3,
        118,
        59,
        0,
        1108,
        1109,
        5,
        84,
        0,
        0,
        1109,
        1137,
        1,
        0,
        0,
        0,
        1110,
        1111,
        5,
        54,
        0,
        0,
        1111,
        1114,
        3,
        118,
        59,
        0,
        1112,
        1113,
        5,
        56,
        0,
        0,
        1113,
        1115,
        3,
        118,
        59,
        0,
        1114,
        1112,
        1,
        0,
        0,
        0,
        1114,
        1115,
        1,
        0,
        0,
        0,
        1115,
        1116,
        1,
        0,
        0,
        0,
        1116,
        1117,
        5,
        84,
        0,
        0,
        1117,
        1137,
        1,
        0,
        0,
        0,
        1118,
        1119,
        5,
        55,
        0,
        0,
        1119,
        1122,
        3,
        118,
        59,
        0,
        1120,
        1121,
        5,
        56,
        0,
        0,
        1121,
        1123,
        3,
        118,
        59,
        0,
        1122,
        1120,
        1,
        0,
        0,
        0,
        1122,
        1123,
        1,
        0,
        0,
        0,
        1123,
        1124,
        1,
        0,
        0,
        0,
        1124,
        1125,
        5,
        84,
        0,
        0,
        1125,
        1137,
        1,
        0,
        0,
        0,
        1126,
        1127,
        5,
        57,
        0,
        0,
        1127,
        1128,
        3,
        118,
        59,
        0,
        1128,
        1129,
        5,
        84,
        0,
        0,
        1129,
        1137,
        1,
        0,
        0,
        0,
        1130,
        1131,
        5,
        58,
        0,
        0,
        1131,
        1132,
        3,
        118,
        59,
        0,
        1132,
        1133,
        5,
        59,
        0,
        0,
        1133,
        1134,
        3,
        118,
        59,
        0,
        1134,
        1135,
        5,
        84,
        0,
        0,
        1135,
        1137,
        1,
        0,
        0,
        0,
        1136,
        1100,
        1,
        0,
        0,
        0,
        1136,
        1110,
        1,
        0,
        0,
        0,
        1136,
        1118,
        1,
        0,
        0,
        0,
        1136,
        1126,
        1,
        0,
        0,
        0,
        1136,
        1130,
        1,
        0,
        0,
        0,
        1137,
        155,
        1,
        0,
        0,
        0,
        1138,
        1139,
        7,
        3,
        0,
        0,
        1139,
        157,
        1,
        0,
        0,
        0,
        1140,
        1141,
        5,
        63,
        0,
        0,
        1141,
        1143,
        3,
        174,
        87,
        0,
        1142,
        1144,
        3,
        34,
        17,
        0,
        1143,
        1142,
        1,
        0,
        0,
        0,
        1143,
        1144,
        1,
        0,
        0,
        0,
        1144,
        1145,
        1,
        0,
        0,
        0,
        1145,
        1147,
        5,
        78,
        0,
        0,
        1146,
        1148,
        3,
        160,
        80,
        0,
        1147,
        1146,
        1,
        0,
        0,
        0,
        1147,
        1148,
        1,
        0,
        0,
        0,
        1148,
        1149,
        1,
        0,
        0,
        0,
        1149,
        1151,
        5,
        79,
        0,
        0,
        1150,
        1152,
        3,
        30,
        15,
        0,
        1151,
        1150,
        1,
        0,
        0,
        0,
        1151,
        1152,
        1,
        0,
        0,
        0,
        1152,
        1153,
        1,
        0,
        0,
        0,
        1153,
        1154,
        3,
        164,
        82,
        0,
        1154,
        159,
        1,
        0,
        0,
        0,
        1155,
        1160,
        3,
        162,
        81,
        0,
        1156,
        1157,
        5,
        85,
        0,
        0,
        1157,
        1159,
        3,
        162,
        81,
        0,
        1158,
        1156,
        1,
        0,
        0,
        0,
        1159,
        1162,
        1,
        0,
        0,
        0,
        1160,
        1158,
        1,
        0,
        0,
        0,
        1160,
        1161,
        1,
        0,
        0,
        0,
        1161,
        161,
        1,
        0,
        0,
        0,
        1162,
        1160,
        1,
        0,
        0,
        0,
        1163,
        1164,
        3,
        284,
        142,
        0,
        1164,
        1165,
        3,
        174,
        87,
        0,
        1165,
        163,
        1,
        0,
        0,
        0,
        1166,
        1170,
        5,
        80,
        0,
        0,
        1167,
        1169,
        3,
        166,
        83,
        0,
        1168,
        1167,
        1,
        0,
        0,
        0,
        1169,
        1172,
        1,
        0,
        0,
        0,
        1170,
        1168,
        1,
        0,
        0,
        0,
        1170,
        1171,
        1,
        0,
        0,
        0,
        1171,
        1173,
        1,
        0,
        0,
        0,
        1172,
        1170,
        1,
        0,
        0,
        0,
        1173,
        1174,
        5,
        81,
        0,
        0,
        1174,
        165,
        1,
        0,
        0,
        0,
        1175,
        1178,
        3,
        54,
        27,
        0,
        1176,
        1178,
        3,
        72,
        36,
        0,
        1177,
        1175,
        1,
        0,
        0,
        0,
        1177,
        1176,
        1,
        0,
        0,
        0,
        1178,
        167,
        1,
        0,
        0,
        0,
        1179,
        1183,
        5,
        80,
        0,
        0,
        1180,
        1182,
        3,
        170,
        85,
        0,
        1181,
        1180,
        1,
        0,
        0,
        0,
        1182,
        1185,
        1,
        0,
        0,
        0,
        1183,
        1181,
        1,
        0,
        0,
        0,
        1183,
        1184,
        1,
        0,
        0,
        0,
        1184,
        1186,
        1,
        0,
        0,
        0,
        1185,
        1183,
        1,
        0,
        0,
        0,
        1186,
        1187,
        5,
        81,
        0,
        0,
        1187,
        169,
        1,
        0,
        0,
        0,
        1188,
        1189,
        3,
        172,
        86,
        0,
        1189,
        1190,
        5,
        84,
        0,
        0,
        1190,
        1194,
        1,
        0,
        0,
        0,
        1191,
        1194,
        3,
        178,
        89,
        0,
        1192,
        1194,
        3,
        180,
        90,
        0,
        1193,
        1188,
        1,
        0,
        0,
        0,
        1193,
        1191,
        1,
        0,
        0,
        0,
        1193,
        1192,
        1,
        0,
        0,
        0,
        1194,
        171,
        1,
        0,
        0,
        0,
        1195,
        1197,
        3,
        24,
        12,
        0,
        1196,
        1195,
        1,
        0,
        0,
        0,
        1197,
        1200,
        1,
        0,
        0,
        0,
        1198,
        1196,
        1,
        0,
        0,
        0,
        1198,
        1199,
        1,
        0,
        0,
        0,
        1199,
        1209,
        1,
        0,
        0,
        0,
        1200,
        1198,
        1,
        0,
        0,
        0,
        1201,
        1202,
        5,
        61,
        0,
        0,
        1202,
        1203,
        3,
        174,
        87,
        0,
        1203,
        1204,
        5,
        87,
        0,
        0,
        1204,
        1205,
        3,
        238,
        119,
        0,
        1205,
        1210,
        1,
        0,
        0,
        0,
        1206,
        1207,
        3,
        284,
        142,
        0,
        1207,
        1208,
        3,
        86,
        43,
        0,
        1208,
        1210,
        1,
        0,
        0,
        0,
        1209,
        1201,
        1,
        0,
        0,
        0,
        1209,
        1206,
        1,
        0,
        0,
        0,
        1210,
        173,
        1,
        0,
        0,
        0,
        1211,
        1212,
        7,
        4,
        0,
        0,
        1212,
        175,
        1,
        0,
        0,
        0,
        1213,
        1214,
        7,
        5,
        0,
        0,
        1214,
        177,
        1,
        0,
        0,
        0,
        1215,
        1217,
        3,
        22,
        11,
        0,
        1216,
        1215,
        1,
        0,
        0,
        0,
        1217,
        1220,
        1,
        0,
        0,
        0,
        1218,
        1216,
        1,
        0,
        0,
        0,
        1218,
        1219,
        1,
        0,
        0,
        0,
        1219,
        1224,
        1,
        0,
        0,
        0,
        1220,
        1218,
        1,
        0,
        0,
        0,
        1221,
        1225,
        3,
        26,
        13,
        0,
        1222,
        1225,
        3,
        48,
        24,
        0,
        1223,
        1225,
        3,
        158,
        79,
        0,
        1224,
        1221,
        1,
        0,
        0,
        0,
        1224,
        1222,
        1,
        0,
        0,
        0,
        1224,
        1223,
        1,
        0,
        0,
        0,
        1225,
        179,
        1,
        0,
        0,
        0,
        1226,
        1350,
        3,
        168,
        84,
        0,
        1227,
        1228,
        5,
        2,
        0,
        0,
        1228,
        1231,
        3,
        238,
        119,
        0,
        1229,
        1230,
        5,
        93,
        0,
        0,
        1230,
        1232,
        3,
        238,
        119,
        0,
        1231,
        1229,
        1,
        0,
        0,
        0,
        1231,
        1232,
        1,
        0,
        0,
        0,
        1232,
        1233,
        1,
        0,
        0,
        0,
        1233,
        1234,
        5,
        84,
        0,
        0,
        1234,
        1350,
        1,
        0,
        0,
        0,
        1235,
        1236,
        5,
        22,
        0,
        0,
        1236,
        1237,
        3,
        202,
        101,
        0,
        1237,
        1240,
        3,
        180,
        90,
        0,
        1238,
        1239,
        5,
        15,
        0,
        0,
        1239,
        1241,
        3,
        180,
        90,
        0,
        1240,
        1238,
        1,
        0,
        0,
        0,
        1240,
        1241,
        1,
        0,
        0,
        0,
        1241,
        1350,
        1,
        0,
        0,
        0,
        1242,
        1243,
        5,
        21,
        0,
        0,
        1243,
        1245,
        5,
        78,
        0,
        0,
        1244,
        1246,
        3,
        200,
        100,
        0,
        1245,
        1244,
        1,
        0,
        0,
        0,
        1245,
        1246,
        1,
        0,
        0,
        0,
        1246,
        1247,
        1,
        0,
        0,
        0,
        1247,
        1249,
        5,
        84,
        0,
        0,
        1248,
        1250,
        3,
        238,
        119,
        0,
        1249,
        1248,
        1,
        0,
        0,
        0,
        1249,
        1250,
        1,
        0,
        0,
        0,
        1250,
        1251,
        1,
        0,
        0,
        0,
        1251,
        1253,
        5,
        84,
        0,
        0,
        1252,
        1254,
        3,
        204,
        102,
        0,
        1253,
        1252,
        1,
        0,
        0,
        0,
        1253,
        1254,
        1,
        0,
        0,
        0,
        1254,
        1255,
        1,
        0,
        0,
        0,
        1255,
        1256,
        5,
        79,
        0,
        0,
        1256,
        1350,
        3,
        180,
        90,
        0,
        1257,
        1258,
        5,
        21,
        0,
        0,
        1258,
        1262,
        5,
        78,
        0,
        0,
        1259,
        1261,
        3,
        24,
        12,
        0,
        1260,
        1259,
        1,
        0,
        0,
        0,
        1261,
        1264,
        1,
        0,
        0,
        0,
        1262,
        1260,
        1,
        0,
        0,
        0,
        1262,
        1263,
        1,
        0,
        0,
        0,
        1263,
        1267,
        1,
        0,
        0,
        0,
        1264,
        1262,
        1,
        0,
        0,
        0,
        1265,
        1268,
        3,
        284,
        142,
        0,
        1266,
        1268,
        5,
        61,
        0,
        0,
        1267,
        1265,
        1,
        0,
        0,
        0,
        1267,
        1266,
        1,
        0,
        0,
        0,
        1268,
        1269,
        1,
        0,
        0,
        0,
        1269,
        1270,
        3,
        90,
        45,
        0,
        1270,
        1271,
        5,
        93,
        0,
        0,
        1271,
        1272,
        3,
        238,
        119,
        0,
        1272,
        1273,
        5,
        79,
        0,
        0,
        1273,
        1274,
        3,
        180,
        90,
        0,
        1274,
        1350,
        1,
        0,
        0,
        0,
        1275,
        1276,
        5,
        50,
        0,
        0,
        1276,
        1277,
        3,
        202,
        101,
        0,
        1277,
        1278,
        3,
        180,
        90,
        0,
        1278,
        1350,
        1,
        0,
        0,
        0,
        1279,
        1280,
        5,
        13,
        0,
        0,
        1280,
        1281,
        3,
        180,
        90,
        0,
        1281,
        1282,
        5,
        50,
        0,
        0,
        1282,
        1283,
        3,
        202,
        101,
        0,
        1283,
        1284,
        5,
        84,
        0,
        0,
        1284,
        1350,
        1,
        0,
        0,
        0,
        1285,
        1286,
        5,
        47,
        0,
        0,
        1286,
        1296,
        3,
        168,
        84,
        0,
        1287,
        1289,
        3,
        184,
        92,
        0,
        1288,
        1287,
        1,
        0,
        0,
        0,
        1289,
        1290,
        1,
        0,
        0,
        0,
        1290,
        1288,
        1,
        0,
        0,
        0,
        1290,
        1291,
        1,
        0,
        0,
        0,
        1291,
        1293,
        1,
        0,
        0,
        0,
        1292,
        1294,
        3,
        188,
        94,
        0,
        1293,
        1292,
        1,
        0,
        0,
        0,
        1293,
        1294,
        1,
        0,
        0,
        0,
        1294,
        1297,
        1,
        0,
        0,
        0,
        1295,
        1297,
        3,
        188,
        94,
        0,
        1296,
        1288,
        1,
        0,
        0,
        0,
        1296,
        1295,
        1,
        0,
        0,
        0,
        1297,
        1350,
        1,
        0,
        0,
        0,
        1298,
        1299,
        5,
        47,
        0,
        0,
        1299,
        1300,
        3,
        190,
        95,
        0,
        1300,
        1304,
        3,
        168,
        84,
        0,
        1301,
        1303,
        3,
        184,
        92,
        0,
        1302,
        1301,
        1,
        0,
        0,
        0,
        1303,
        1306,
        1,
        0,
        0,
        0,
        1304,
        1302,
        1,
        0,
        0,
        0,
        1304,
        1305,
        1,
        0,
        0,
        0,
        1305,
        1308,
        1,
        0,
        0,
        0,
        1306,
        1304,
        1,
        0,
        0,
        0,
        1307,
        1309,
        3,
        188,
        94,
        0,
        1308,
        1307,
        1,
        0,
        0,
        0,
        1308,
        1309,
        1,
        0,
        0,
        0,
        1309,
        1350,
        1,
        0,
        0,
        0,
        1310,
        1311,
        5,
        41,
        0,
        0,
        1311,
        1312,
        3,
        202,
        101,
        0,
        1312,
        1313,
        3,
        182,
        91,
        0,
        1313,
        1350,
        1,
        0,
        0,
        0,
        1314,
        1315,
        5,
        42,
        0,
        0,
        1315,
        1316,
        3,
        202,
        101,
        0,
        1316,
        1317,
        3,
        168,
        84,
        0,
        1317,
        1350,
        1,
        0,
        0,
        0,
        1318,
        1320,
        5,
        36,
        0,
        0,
        1319,
        1321,
        3,
        238,
        119,
        0,
        1320,
        1319,
        1,
        0,
        0,
        0,
        1320,
        1321,
        1,
        0,
        0,
        0,
        1321,
        1322,
        1,
        0,
        0,
        0,
        1322,
        1350,
        5,
        84,
        0,
        0,
        1323,
        1324,
        5,
        44,
        0,
        0,
        1324,
        1325,
        3,
        238,
        119,
        0,
        1325,
        1326,
        5,
        84,
        0,
        0,
        1326,
        1350,
        1,
        0,
        0,
        0,
        1327,
        1329,
        5,
        4,
        0,
        0,
        1328,
        1330,
        3,
        174,
        87,
        0,
        1329,
        1328,
        1,
        0,
        0,
        0,
        1329,
        1330,
        1,
        0,
        0,
        0,
        1330,
        1331,
        1,
        0,
        0,
        0,
        1331,
        1350,
        5,
        84,
        0,
        0,
        1332,
        1334,
        5,
        11,
        0,
        0,
        1333,
        1335,
        3,
        174,
        87,
        0,
        1334,
        1333,
        1,
        0,
        0,
        0,
        1334,
        1335,
        1,
        0,
        0,
        0,
        1335,
        1336,
        1,
        0,
        0,
        0,
        1336,
        1350,
        5,
        84,
        0,
        0,
        1337,
        1338,
        5,
        62,
        0,
        0,
        1338,
        1339,
        3,
        238,
        119,
        0,
        1339,
        1340,
        5,
        84,
        0,
        0,
        1340,
        1350,
        1,
        0,
        0,
        0,
        1341,
        1350,
        5,
        84,
        0,
        0,
        1342,
        1343,
        3,
        238,
        119,
        0,
        1343,
        1344,
        5,
        84,
        0,
        0,
        1344,
        1350,
        1,
        0,
        0,
        0,
        1345,
        1346,
        3,
        174,
        87,
        0,
        1346,
        1347,
        5,
        93,
        0,
        0,
        1347,
        1348,
        3,
        180,
        90,
        0,
        1348,
        1350,
        1,
        0,
        0,
        0,
        1349,
        1226,
        1,
        0,
        0,
        0,
        1349,
        1227,
        1,
        0,
        0,
        0,
        1349,
        1235,
        1,
        0,
        0,
        0,
        1349,
        1242,
        1,
        0,
        0,
        0,
        1349,
        1257,
        1,
        0,
        0,
        0,
        1349,
        1275,
        1,
        0,
        0,
        0,
        1349,
        1279,
        1,
        0,
        0,
        0,
        1349,
        1285,
        1,
        0,
        0,
        0,
        1349,
        1298,
        1,
        0,
        0,
        0,
        1349,
        1310,
        1,
        0,
        0,
        0,
        1349,
        1314,
        1,
        0,
        0,
        0,
        1349,
        1318,
        1,
        0,
        0,
        0,
        1349,
        1323,
        1,
        0,
        0,
        0,
        1349,
        1327,
        1,
        0,
        0,
        0,
        1349,
        1332,
        1,
        0,
        0,
        0,
        1349,
        1337,
        1,
        0,
        0,
        0,
        1349,
        1341,
        1,
        0,
        0,
        0,
        1349,
        1342,
        1,
        0,
        0,
        0,
        1349,
        1345,
        1,
        0,
        0,
        0,
        1350,
        181,
        1,
        0,
        0,
        0,
        1351,
        1355,
        5,
        80,
        0,
        0,
        1352,
        1354,
        3,
        196,
        98,
        0,
        1353,
        1352,
        1,
        0,
        0,
        0,
        1354,
        1357,
        1,
        0,
        0,
        0,
        1355,
        1353,
        1,
        0,
        0,
        0,
        1355,
        1356,
        1,
        0,
        0,
        0,
        1356,
        1361,
        1,
        0,
        0,
        0,
        1357,
        1355,
        1,
        0,
        0,
        0,
        1358,
        1360,
        3,
        198,
        99,
        0,
        1359,
        1358,
        1,
        0,
        0,
        0,
        1360,
        1363,
        1,
        0,
        0,
        0,
        1361,
        1359,
        1,
        0,
        0,
        0,
        1361,
        1362,
        1,
        0,
        0,
        0,
        1362,
        1364,
        1,
        0,
        0,
        0,
        1363,
        1361,
        1,
        0,
        0,
        0,
        1364,
        1365,
        5,
        81,
        0,
        0,
        1365,
        183,
        1,
        0,
        0,
        0,
        1366,
        1367,
        5,
        7,
        0,
        0,
        1367,
        1371,
        5,
        78,
        0,
        0,
        1368,
        1370,
        3,
        24,
        12,
        0,
        1369,
        1368,
        1,
        0,
        0,
        0,
        1370,
        1373,
        1,
        0,
        0,
        0,
        1371,
        1369,
        1,
        0,
        0,
        0,
        1371,
        1372,
        1,
        0,
        0,
        0,
        1372,
        1374,
        1,
        0,
        0,
        0,
        1373,
        1371,
        1,
        0,
        0,
        0,
        1374,
        1375,
        3,
        186,
        93,
        0,
        1375,
        1376,
        3,
        174,
        87,
        0,
        1376,
        1377,
        5,
        79,
        0,
        0,
        1377,
        1378,
        3,
        168,
        84,
        0,
        1378,
        185,
        1,
        0,
        0,
        0,
        1379,
        1384,
        3,
        118,
        59,
        0,
        1380,
        1381,
        5,
        107,
        0,
        0,
        1381,
        1383,
        3,
        118,
        59,
        0,
        1382,
        1380,
        1,
        0,
        0,
        0,
        1383,
        1386,
        1,
        0,
        0,
        0,
        1384,
        1382,
        1,
        0,
        0,
        0,
        1384,
        1385,
        1,
        0,
        0,
        0,
        1385,
        187,
        1,
        0,
        0,
        0,
        1386,
        1384,
        1,
        0,
        0,
        0,
        1387,
        1388,
        5,
        19,
        0,
        0,
        1388,
        1389,
        3,
        168,
        84,
        0,
        1389,
        189,
        1,
        0,
        0,
        0,
        1390,
        1391,
        5,
        78,
        0,
        0,
        1391,
        1393,
        3,
        192,
        96,
        0,
        1392,
        1394,
        5,
        84,
        0,
        0,
        1393,
        1392,
        1,
        0,
        0,
        0,
        1393,
        1394,
        1,
        0,
        0,
        0,
        1394,
        1395,
        1,
        0,
        0,
        0,
        1395,
        1396,
        5,
        79,
        0,
        0,
        1396,
        191,
        1,
        0,
        0,
        0,
        1397,
        1402,
        3,
        194,
        97,
        0,
        1398,
        1399,
        5,
        84,
        0,
        0,
        1399,
        1401,
        3,
        194,
        97,
        0,
        1400,
        1398,
        1,
        0,
        0,
        0,
        1401,
        1404,
        1,
        0,
        0,
        0,
        1402,
        1400,
        1,
        0,
        0,
        0,
        1402,
        1403,
        1,
        0,
        0,
        0,
        1403,
        193,
        1,
        0,
        0,
        0,
        1404,
        1402,
        1,
        0,
        0,
        0,
        1405,
        1407,
        3,
        24,
        12,
        0,
        1406,
        1405,
        1,
        0,
        0,
        0,
        1407,
        1410,
        1,
        0,
        0,
        0,
        1408,
        1406,
        1,
        0,
        0,
        0,
        1408,
        1409,
        1,
        0,
        0,
        0,
        1409,
        1416,
        1,
        0,
        0,
        0,
        1410,
        1408,
        1,
        0,
        0,
        0,
        1411,
        1412,
        3,
        96,
        48,
        0,
        1412,
        1413,
        3,
        90,
        45,
        0,
        1413,
        1417,
        1,
        0,
        0,
        0,
        1414,
        1415,
        5,
        61,
        0,
        0,
        1415,
        1417,
        3,
        174,
        87,
        0,
        1416,
        1411,
        1,
        0,
        0,
        0,
        1416,
        1414,
        1,
        0,
        0,
        0,
        1417,
        1418,
        1,
        0,
        0,
        0,
        1418,
        1419,
        5,
        87,
        0,
        0,
        1419,
        1420,
        3,
        238,
        119,
        0,
        1420,
        1423,
        1,
        0,
        0,
        0,
        1421,
        1423,
        3,
        118,
        59,
        0,
        1422,
        1408,
        1,
        0,
        0,
        0,
        1422,
        1421,
        1,
        0,
        0,
        0,
        1423,
        195,
        1,
        0,
        0,
        0,
        1424,
        1426,
        3,
        198,
        99,
        0,
        1425,
        1424,
        1,
        0,
        0,
        0,
        1426,
        1427,
        1,
        0,
        0,
        0,
        1427,
        1425,
        1,
        0,
        0,
        0,
        1427,
        1428,
        1,
        0,
        0,
        0,
        1428,
        1430,
        1,
        0,
        0,
        0,
        1429,
        1431,
        3,
        170,
        85,
        0,
        1430,
        1429,
        1,
        0,
        0,
        0,
        1431,
        1432,
        1,
        0,
        0,
        0,
        1432,
        1430,
        1,
        0,
        0,
        0,
        1432,
        1433,
        1,
        0,
        0,
        0,
        1433,
        197,
        1,
        0,
        0,
        0,
        1434,
        1440,
        5,
        6,
        0,
        0,
        1435,
        1441,
        3,
        238,
        119,
        0,
        1436,
        1441,
        5,
        128,
        0,
        0,
        1437,
        1438,
        3,
        284,
        142,
        0,
        1438,
        1439,
        3,
        174,
        87,
        0,
        1439,
        1441,
        1,
        0,
        0,
        0,
        1440,
        1435,
        1,
        0,
        0,
        0,
        1440,
        1436,
        1,
        0,
        0,
        0,
        1440,
        1437,
        1,
        0,
        0,
        0,
        1441,
        1442,
        1,
        0,
        0,
        0,
        1442,
        1446,
        5,
        93,
        0,
        0,
        1443,
        1444,
        5,
        12,
        0,
        0,
        1444,
        1446,
        5,
        93,
        0,
        0,
        1445,
        1434,
        1,
        0,
        0,
        0,
        1445,
        1443,
        1,
        0,
        0,
        0,
        1446,
        199,
        1,
        0,
        0,
        0,
        1447,
        1450,
        3,
        172,
        86,
        0,
        1448,
        1450,
        3,
        204,
        102,
        0,
        1449,
        1447,
        1,
        0,
        0,
        0,
        1449,
        1448,
        1,
        0,
        0,
        0,
        1450,
        201,
        1,
        0,
        0,
        0,
        1451,
        1452,
        5,
        78,
        0,
        0,
        1452,
        1453,
        3,
        238,
        119,
        0,
        1453,
        1454,
        5,
        79,
        0,
        0,
        1454,
        203,
        1,
        0,
        0,
        0,
        1455,
        1460,
        3,
        238,
        119,
        0,
        1456,
        1457,
        5,
        85,
        0,
        0,
        1457,
        1459,
        3,
        238,
        119,
        0,
        1458,
        1456,
        1,
        0,
        0,
        0,
        1459,
        1462,
        1,
        0,
        0,
        0,
        1460,
        1458,
        1,
        0,
        0,
        0,
        1460,
        1461,
        1,
        0,
        0,
        0,
        1461,
        205,
        1,
        0,
        0,
        0,
        1462,
        1460,
        1,
        0,
        0,
        0,
        1463,
        1467,
        3,
        174,
        87,
        0,
        1464,
        1467,
        5,
        43,
        0,
        0,
        1465,
        1467,
        5,
        40,
        0,
        0,
        1466,
        1463,
        1,
        0,
        0,
        0,
        1466,
        1464,
        1,
        0,
        0,
        0,
        1466,
        1465,
        1,
        0,
        0,
        0,
        1467,
        1468,
        1,
        0,
        0,
        0,
        1468,
        1469,
        3,
        294,
        147,
        0,
        1469,
        207,
        1,
        0,
        0,
        0,
        1470,
        1471,
        6,
        104,
        -1,
        0,
        1471,
        1472,
        3,
        250,
        125,
        0,
        1472,
        1477,
        1,
        0,
        0,
        0,
        1473,
        1474,
        10,
        2,
        0,
        0,
        1474,
        1476,
        7,
        6,
        0,
        0,
        1475,
        1473,
        1,
        0,
        0,
        0,
        1476,
        1479,
        1,
        0,
        0,
        0,
        1477,
        1475,
        1,
        0,
        0,
        0,
        1477,
        1478,
        1,
        0,
        0,
        0,
        1478,
        209,
        1,
        0,
        0,
        0,
        1479,
        1477,
        1,
        0,
        0,
        0,
        1480,
        1481,
        7,
        7,
        0,
        0,
        1481,
        1484,
        3,
        210,
        105,
        0,
        1482,
        1484,
        3,
        208,
        104,
        0,
        1483,
        1480,
        1,
        0,
        0,
        0,
        1483,
        1482,
        1,
        0,
        0,
        0,
        1484,
        211,
        1,
        0,
        0,
        0,
        1485,
        1489,
        5,
        78,
        0,
        0,
        1486,
        1488,
        3,
        126,
        63,
        0,
        1487,
        1486,
        1,
        0,
        0,
        0,
        1488,
        1491,
        1,
        0,
        0,
        0,
        1489,
        1487,
        1,
        0,
        0,
        0,
        1489,
        1490,
        1,
        0,
        0,
        0,
        1490,
        1492,
        1,
        0,
        0,
        0,
        1491,
        1489,
        1,
        0,
        0,
        0,
        1492,
        1497,
        3,
        284,
        142,
        0,
        1493,
        1494,
        5,
        106,
        0,
        0,
        1494,
        1496,
        3,
        284,
        142,
        0,
        1495,
        1493,
        1,
        0,
        0,
        0,
        1496,
        1499,
        1,
        0,
        0,
        0,
        1497,
        1495,
        1,
        0,
        0,
        0,
        1497,
        1498,
        1,
        0,
        0,
        0,
        1498,
        1500,
        1,
        0,
        0,
        0,
        1499,
        1497,
        1,
        0,
        0,
        0,
        1500,
        1501,
        5,
        79,
        0,
        0,
        1501,
        1502,
        3,
        212,
        106,
        0,
        1502,
        1507,
        1,
        0,
        0,
        0,
        1503,
        1504,
        5,
        31,
        0,
        0,
        1504,
        1507,
        3,
        260,
        130,
        0,
        1505,
        1507,
        3,
        210,
        105,
        0,
        1506,
        1485,
        1,
        0,
        0,
        0,
        1506,
        1503,
        1,
        0,
        0,
        0,
        1506,
        1505,
        1,
        0,
        0,
        0,
        1507,
        213,
        1,
        0,
        0,
        0,
        1508,
        1509,
        6,
        107,
        -1,
        0,
        1509,
        1510,
        3,
        212,
        106,
        0,
        1510,
        1516,
        1,
        0,
        0,
        0,
        1511,
        1512,
        10,
        2,
        0,
        0,
        1512,
        1513,
        7,
        8,
        0,
        0,
        1513,
        1515,
        3,
        212,
        106,
        0,
        1514,
        1511,
        1,
        0,
        0,
        0,
        1515,
        1518,
        1,
        0,
        0,
        0,
        1516,
        1514,
        1,
        0,
        0,
        0,
        1516,
        1517,
        1,
        0,
        0,
        0,
        1517,
        215,
        1,
        0,
        0,
        0,
        1518,
        1516,
        1,
        0,
        0,
        0,
        1519,
        1520,
        6,
        108,
        -1,
        0,
        1520,
        1521,
        3,
        214,
        107,
        0,
        1521,
        1527,
        1,
        0,
        0,
        0,
        1522,
        1523,
        10,
        2,
        0,
        0,
        1523,
        1524,
        7,
        9,
        0,
        0,
        1524,
        1526,
        3,
        214,
        107,
        0,
        1525,
        1522,
        1,
        0,
        0,
        0,
        1526,
        1529,
        1,
        0,
        0,
        0,
        1527,
        1525,
        1,
        0,
        0,
        0,
        1527,
        1528,
        1,
        0,
        0,
        0,
        1528,
        217,
        1,
        0,
        0,
        0,
        1529,
        1527,
        1,
        0,
        0,
        0,
        1530,
        1531,
        6,
        109,
        -1,
        0,
        1531,
        1532,
        3,
        216,
        108,
        0,
        1532,
        1546,
        1,
        0,
        0,
        0,
        1533,
        1541,
        10,
        2,
        0,
        0,
        1534,
        1535,
        5,
        89,
        0,
        0,
        1535,
        1542,
        5,
        89,
        0,
        0,
        1536,
        1537,
        5,
        88,
        0,
        0,
        1537,
        1538,
        5,
        88,
        0,
        0,
        1538,
        1542,
        5,
        88,
        0,
        0,
        1539,
        1540,
        5,
        88,
        0,
        0,
        1540,
        1542,
        5,
        88,
        0,
        0,
        1541,
        1534,
        1,
        0,
        0,
        0,
        1541,
        1536,
        1,
        0,
        0,
        0,
        1541,
        1539,
        1,
        0,
        0,
        0,
        1542,
        1543,
        1,
        0,
        0,
        0,
        1543,
        1545,
        3,
        216,
        108,
        0,
        1544,
        1533,
        1,
        0,
        0,
        0,
        1545,
        1548,
        1,
        0,
        0,
        0,
        1546,
        1544,
        1,
        0,
        0,
        0,
        1546,
        1547,
        1,
        0,
        0,
        0,
        1547,
        219,
        1,
        0,
        0,
        0,
        1548,
        1546,
        1,
        0,
        0,
        0,
        1549,
        1550,
        6,
        110,
        -1,
        0,
        1550,
        1551,
        3,
        218,
        109,
        0,
        1551,
        1563,
        1,
        0,
        0,
        0,
        1552,
        1553,
        10,
        3,
        0,
        0,
        1553,
        1554,
        7,
        10,
        0,
        0,
        1554,
        1562,
        3,
        218,
        109,
        0,
        1555,
        1556,
        10,
        2,
        0,
        0,
        1556,
        1559,
        5,
        26,
        0,
        0,
        1557,
        1560,
        3,
        284,
        142,
        0,
        1558,
        1560,
        3,
        240,
        120,
        0,
        1559,
        1557,
        1,
        0,
        0,
        0,
        1559,
        1558,
        1,
        0,
        0,
        0,
        1560,
        1562,
        1,
        0,
        0,
        0,
        1561,
        1552,
        1,
        0,
        0,
        0,
        1561,
        1555,
        1,
        0,
        0,
        0,
        1562,
        1565,
        1,
        0,
        0,
        0,
        1563,
        1561,
        1,
        0,
        0,
        0,
        1563,
        1564,
        1,
        0,
        0,
        0,
        1564,
        221,
        1,
        0,
        0,
        0,
        1565,
        1563,
        1,
        0,
        0,
        0,
        1566,
        1567,
        6,
        111,
        -1,
        0,
        1567,
        1568,
        3,
        220,
        110,
        0,
        1568,
        1574,
        1,
        0,
        0,
        0,
        1569,
        1570,
        10,
        2,
        0,
        0,
        1570,
        1571,
        7,
        11,
        0,
        0,
        1571,
        1573,
        3,
        220,
        110,
        0,
        1572,
        1569,
        1,
        0,
        0,
        0,
        1573,
        1576,
        1,
        0,
        0,
        0,
        1574,
        1572,
        1,
        0,
        0,
        0,
        1574,
        1575,
        1,
        0,
        0,
        0,
        1575,
        223,
        1,
        0,
        0,
        0,
        1576,
        1574,
        1,
        0,
        0,
        0,
        1577,
        1578,
        6,
        112,
        -1,
        0,
        1578,
        1579,
        3,
        222,
        111,
        0,
        1579,
        1585,
        1,
        0,
        0,
        0,
        1580,
        1581,
        10,
        2,
        0,
        0,
        1581,
        1582,
        5,
        106,
        0,
        0,
        1582,
        1584,
        3,
        222,
        111,
        0,
        1583,
        1580,
        1,
        0,
        0,
        0,
        1584,
        1587,
        1,
        0,
        0,
        0,
        1585,
        1583,
        1,
        0,
        0,
        0,
        1585,
        1586,
        1,
        0,
        0,
        0,
        1586,
        225,
        1,
        0,
        0,
        0,
        1587,
        1585,
        1,
        0,
        0,
        0,
        1588,
        1589,
        6,
        113,
        -1,
        0,
        1589,
        1590,
        3,
        224,
        112,
        0,
        1590,
        1596,
        1,
        0,
        0,
        0,
        1591,
        1592,
        10,
        2,
        0,
        0,
        1592,
        1593,
        5,
        108,
        0,
        0,
        1593,
        1595,
        3,
        224,
        112,
        0,
        1594,
        1591,
        1,
        0,
        0,
        0,
        1595,
        1598,
        1,
        0,
        0,
        0,
        1596,
        1594,
        1,
        0,
        0,
        0,
        1596,
        1597,
        1,
        0,
        0,
        0,
        1597,
        227,
        1,
        0,
        0,
        0,
        1598,
        1596,
        1,
        0,
        0,
        0,
        1599,
        1600,
        6,
        114,
        -1,
        0,
        1600,
        1601,
        3,
        226,
        113,
        0,
        1601,
        1607,
        1,
        0,
        0,
        0,
        1602,
        1603,
        10,
        2,
        0,
        0,
        1603,
        1604,
        5,
        107,
        0,
        0,
        1604,
        1606,
        3,
        226,
        113,
        0,
        1605,
        1602,
        1,
        0,
        0,
        0,
        1606,
        1609,
        1,
        0,
        0,
        0,
        1607,
        1605,
        1,
        0,
        0,
        0,
        1607,
        1608,
        1,
        0,
        0,
        0,
        1608,
        229,
        1,
        0,
        0,
        0,
        1609,
        1607,
        1,
        0,
        0,
        0,
        1610,
        1611,
        6,
        115,
        -1,
        0,
        1611,
        1612,
        3,
        228,
        114,
        0,
        1612,
        1618,
        1,
        0,
        0,
        0,
        1613,
        1614,
        10,
        2,
        0,
        0,
        1614,
        1615,
        5,
        98,
        0,
        0,
        1615,
        1617,
        3,
        228,
        114,
        0,
        1616,
        1613,
        1,
        0,
        0,
        0,
        1617,
        1620,
        1,
        0,
        0,
        0,
        1618,
        1616,
        1,
        0,
        0,
        0,
        1618,
        1619,
        1,
        0,
        0,
        0,
        1619,
        231,
        1,
        0,
        0,
        0,
        1620,
        1618,
        1,
        0,
        0,
        0,
        1621,
        1622,
        6,
        116,
        -1,
        0,
        1622,
        1623,
        3,
        230,
        115,
        0,
        1623,
        1629,
        1,
        0,
        0,
        0,
        1624,
        1625,
        10,
        2,
        0,
        0,
        1625,
        1626,
        5,
        99,
        0,
        0,
        1626,
        1628,
        3,
        230,
        115,
        0,
        1627,
        1624,
        1,
        0,
        0,
        0,
        1628,
        1631,
        1,
        0,
        0,
        0,
        1629,
        1627,
        1,
        0,
        0,
        0,
        1629,
        1630,
        1,
        0,
        0,
        0,
        1630,
        233,
        1,
        0,
        0,
        0,
        1631,
        1629,
        1,
        0,
        0,
        0,
        1632,
        1633,
        3,
        232,
        116,
        0,
        1633,
        1634,
        5,
        92,
        0,
        0,
        1634,
        1635,
        3,
        238,
        119,
        0,
        1635,
        1636,
        5,
        93,
        0,
        0,
        1636,
        1637,
        3,
        234,
        117,
        0,
        1637,
        1646,
        1,
        0,
        0,
        0,
        1638,
        1639,
        3,
        232,
        116,
        0,
        1639,
        1640,
        5,
        92,
        0,
        0,
        1640,
        1641,
        3,
        238,
        119,
        0,
        1641,
        1642,
        5,
        93,
        0,
        0,
        1642,
        1643,
        3,
        242,
        121,
        0,
        1643,
        1646,
        1,
        0,
        0,
        0,
        1644,
        1646,
        3,
        232,
        116,
        0,
        1645,
        1632,
        1,
        0,
        0,
        0,
        1645,
        1638,
        1,
        0,
        0,
        0,
        1645,
        1644,
        1,
        0,
        0,
        0,
        1646,
        235,
        1,
        0,
        0,
        0,
        1647,
        1648,
        3,
        234,
        117,
        0,
        1648,
        1649,
        7,
        12,
        0,
        0,
        1649,
        1650,
        3,
        238,
        119,
        0,
        1650,
        1653,
        1,
        0,
        0,
        0,
        1651,
        1653,
        3,
        234,
        117,
        0,
        1652,
        1647,
        1,
        0,
        0,
        0,
        1652,
        1651,
        1,
        0,
        0,
        0,
        1653,
        237,
        1,
        0,
        0,
        0,
        1654,
        1657,
        3,
        236,
        118,
        0,
        1655,
        1657,
        3,
        242,
        121,
        0,
        1656,
        1654,
        1,
        0,
        0,
        0,
        1656,
        1655,
        1,
        0,
        0,
        0,
        1657,
        239,
        1,
        0,
        0,
        0,
        1658,
        1660,
        3,
        24,
        12,
        0,
        1659,
        1658,
        1,
        0,
        0,
        0,
        1660,
        1663,
        1,
        0,
        0,
        0,
        1661,
        1659,
        1,
        0,
        0,
        0,
        1661,
        1662,
        1,
        0,
        0,
        0,
        1662,
        1664,
        1,
        0,
        0,
        0,
        1663,
        1661,
        1,
        0,
        0,
        0,
        1664,
        1668,
        3,
        284,
        142,
        0,
        1665,
        1667,
        3,
        126,
        63,
        0,
        1666,
        1665,
        1,
        0,
        0,
        0,
        1667,
        1670,
        1,
        0,
        0,
        0,
        1668,
        1666,
        1,
        0,
        0,
        0,
        1668,
        1669,
        1,
        0,
        0,
        0,
        1669,
        1671,
        1,
        0,
        0,
        0,
        1670,
        1668,
        1,
        0,
        0,
        0,
        1671,
        1672,
        3,
        174,
        87,
        0,
        1672,
        241,
        1,
        0,
        0,
        0,
        1673,
        1674,
        3,
        244,
        122,
        0,
        1674,
        1675,
        5,
        121,
        0,
        0,
        1675,
        1676,
        3,
        246,
        123,
        0,
        1676,
        243,
        1,
        0,
        0,
        0,
        1677,
        1700,
        3,
        174,
        87,
        0,
        1678,
        1680,
        5,
        78,
        0,
        0,
        1679,
        1681,
        3,
        108,
        54,
        0,
        1680,
        1679,
        1,
        0,
        0,
        0,
        1680,
        1681,
        1,
        0,
        0,
        0,
        1681,
        1682,
        1,
        0,
        0,
        0,
        1682,
        1700,
        5,
        79,
        0,
        0,
        1683,
        1684,
        5,
        78,
        0,
        0,
        1684,
        1689,
        3,
        174,
        87,
        0,
        1685,
        1686,
        5,
        85,
        0,
        0,
        1686,
        1688,
        3,
        174,
        87,
        0,
        1687,
        1685,
        1,
        0,
        0,
        0,
        1688,
        1691,
        1,
        0,
        0,
        0,
        1689,
        1687,
        1,
        0,
        0,
        0,
        1689,
        1690,
        1,
        0,
        0,
        0,
        1690,
        1692,
        1,
        0,
        0,
        0,
        1691,
        1689,
        1,
        0,
        0,
        0,
        1692,
        1693,
        5,
        79,
        0,
        0,
        1693,
        1700,
        1,
        0,
        0,
        0,
        1694,
        1696,
        5,
        78,
        0,
        0,
        1695,
        1697,
        3,
        114,
        57,
        0,
        1696,
        1695,
        1,
        0,
        0,
        0,
        1696,
        1697,
        1,
        0,
        0,
        0,
        1697,
        1698,
        1,
        0,
        0,
        0,
        1698,
        1700,
        5,
        79,
        0,
        0,
        1699,
        1677,
        1,
        0,
        0,
        0,
        1699,
        1678,
        1,
        0,
        0,
        0,
        1699,
        1683,
        1,
        0,
        0,
        0,
        1699,
        1694,
        1,
        0,
        0,
        0,
        1700,
        245,
        1,
        0,
        0,
        0,
        1701,
        1704,
        3,
        238,
        119,
        0,
        1702,
        1704,
        3,
        168,
        84,
        0,
        1703,
        1701,
        1,
        0,
        0,
        0,
        1703,
        1702,
        1,
        0,
        0,
        0,
        1704,
        247,
        1,
        0,
        0,
        0,
        1705,
        1706,
        6,
        124,
        -1,
        0,
        1706,
        1707,
        5,
        78,
        0,
        0,
        1707,
        1708,
        3,
        238,
        119,
        0,
        1708,
        1709,
        5,
        79,
        0,
        0,
        1709,
        1742,
        1,
        0,
        0,
        0,
        1710,
        1742,
        5,
        43,
        0,
        0,
        1711,
        1742,
        5,
        40,
        0,
        0,
        1712,
        1742,
        3,
        120,
        60,
        0,
        1713,
        1742,
        3,
        174,
        87,
        0,
        1714,
        1715,
        3,
        68,
        34,
        0,
        1715,
        1716,
        5,
        86,
        0,
        0,
        1716,
        1717,
        5,
        9,
        0,
        0,
        1717,
        1742,
        1,
        0,
        0,
        0,
        1718,
        1722,
        3,
        280,
        140,
        0,
        1719,
        1723,
        3,
        292,
        146,
        0,
        1720,
        1721,
        5,
        43,
        0,
        0,
        1721,
        1723,
        3,
        294,
        147,
        0,
        1722,
        1719,
        1,
        0,
        0,
        0,
        1722,
        1720,
        1,
        0,
        0,
        0,
        1723,
        1742,
        1,
        0,
        0,
        0,
        1724,
        1742,
        3,
        206,
        103,
        0,
        1725,
        1726,
        3,
        284,
        142,
        0,
        1726,
        1732,
        5,
        122,
        0,
        0,
        1727,
        1729,
        3,
        288,
        144,
        0,
        1728,
        1727,
        1,
        0,
        0,
        0,
        1728,
        1729,
        1,
        0,
        0,
        0,
        1729,
        1730,
        1,
        0,
        0,
        0,
        1730,
        1733,
        3,
        174,
        87,
        0,
        1731,
        1733,
        5,
        31,
        0,
        0,
        1732,
        1728,
        1,
        0,
        0,
        0,
        1732,
        1731,
        1,
        0,
        0,
        0,
        1733,
        1742,
        1,
        0,
        0,
        0,
        1734,
        1735,
        3,
        258,
        129,
        0,
        1735,
        1737,
        5,
        122,
        0,
        0,
        1736,
        1738,
        3,
        288,
        144,
        0,
        1737,
        1736,
        1,
        0,
        0,
        0,
        1737,
        1738,
        1,
        0,
        0,
        0,
        1738,
        1739,
        1,
        0,
        0,
        0,
        1739,
        1740,
        5,
        31,
        0,
        0,
        1740,
        1742,
        1,
        0,
        0,
        0,
        1741,
        1705,
        1,
        0,
        0,
        0,
        1741,
        1710,
        1,
        0,
        0,
        0,
        1741,
        1711,
        1,
        0,
        0,
        0,
        1741,
        1712,
        1,
        0,
        0,
        0,
        1741,
        1713,
        1,
        0,
        0,
        0,
        1741,
        1714,
        1,
        0,
        0,
        0,
        1741,
        1718,
        1,
        0,
        0,
        0,
        1741,
        1724,
        1,
        0,
        0,
        0,
        1741,
        1725,
        1,
        0,
        0,
        0,
        1741,
        1734,
        1,
        0,
        0,
        0,
        1742,
        1770,
        1,
        0,
        0,
        0,
        1743,
        1744,
        10,
        6,
        0,
        0,
        1744,
        1745,
        5,
        82,
        0,
        0,
        1745,
        1746,
        3,
        238,
        119,
        0,
        1746,
        1747,
        5,
        83,
        0,
        0,
        1747,
        1769,
        1,
        0,
        0,
        0,
        1748,
        1749,
        10,
        5,
        0,
        0,
        1749,
        1760,
        5,
        86,
        0,
        0,
        1750,
        1761,
        3,
        174,
        87,
        0,
        1751,
        1761,
        3,
        206,
        103,
        0,
        1752,
        1761,
        5,
        43,
        0,
        0,
        1753,
        1755,
        5,
        31,
        0,
        0,
        1754,
        1756,
        3,
        280,
        140,
        0,
        1755,
        1754,
        1,
        0,
        0,
        0,
        1755,
        1756,
        1,
        0,
        0,
        0,
        1756,
        1757,
        1,
        0,
        0,
        0,
        1757,
        1761,
        3,
        268,
        134,
        0,
        1758,
        1761,
        3,
        290,
        145,
        0,
        1759,
        1761,
        3,
        274,
        137,
        0,
        1760,
        1750,
        1,
        0,
        0,
        0,
        1760,
        1751,
        1,
        0,
        0,
        0,
        1760,
        1752,
        1,
        0,
        0,
        0,
        1760,
        1753,
        1,
        0,
        0,
        0,
        1760,
        1758,
        1,
        0,
        0,
        0,
        1760,
        1759,
        1,
        0,
        0,
        0,
        1761,
        1769,
        1,
        0,
        0,
        0,
        1762,
        1763,
        10,
        3,
        0,
        0,
        1763,
        1765,
        5,
        122,
        0,
        0,
        1764,
        1766,
        3,
        288,
        144,
        0,
        1765,
        1764,
        1,
        0,
        0,
        0,
        1765,
        1766,
        1,
        0,
        0,
        0,
        1766,
        1767,
        1,
        0,
        0,
        0,
        1767,
        1769,
        3,
        174,
        87,
        0,
        1768,
        1743,
        1,
        0,
        0,
        0,
        1768,
        1748,
        1,
        0,
        0,
        0,
        1768,
        1762,
        1,
        0,
        0,
        0,
        1769,
        1772,
        1,
        0,
        0,
        0,
        1770,
        1768,
        1,
        0,
        0,
        0,
        1770,
        1771,
        1,
        0,
        0,
        0,
        1771,
        249,
        1,
        0,
        0,
        0,
        1772,
        1770,
        1,
        0,
        0,
        0,
        1773,
        1774,
        5,
        41,
        0,
        0,
        1774,
        1775,
        3,
        202,
        101,
        0,
        1775,
        1779,
        5,
        80,
        0,
        0,
        1776,
        1778,
        3,
        252,
        126,
        0,
        1777,
        1776,
        1,
        0,
        0,
        0,
        1778,
        1781,
        1,
        0,
        0,
        0,
        1779,
        1777,
        1,
        0,
        0,
        0,
        1779,
        1780,
        1,
        0,
        0,
        0,
        1780,
        1782,
        1,
        0,
        0,
        0,
        1781,
        1779,
        1,
        0,
        0,
        0,
        1782,
        1783,
        5,
        81,
        0,
        0,
        1783,
        1786,
        1,
        0,
        0,
        0,
        1784,
        1786,
        3,
        248,
        124,
        0,
        1785,
        1773,
        1,
        0,
        0,
        0,
        1785,
        1784,
        1,
        0,
        0,
        0,
        1786,
        251,
        1,
        0,
        0,
        0,
        1787,
        1791,
        5,
        6,
        0,
        0,
        1788,
        1792,
        3,
        204,
        102,
        0,
        1789,
        1792,
        5,
        77,
        0,
        0,
        1790,
        1792,
        3,
        254,
        127,
        0,
        1791,
        1788,
        1,
        0,
        0,
        0,
        1791,
        1789,
        1,
        0,
        0,
        0,
        1791,
        1790,
        1,
        0,
        0,
        0,
        1792,
        1793,
        1,
        0,
        0,
        0,
        1793,
        1794,
        7,
        13,
        0,
        0,
        1794,
        1799,
        3,
        256,
        128,
        0,
        1795,
        1796,
        5,
        12,
        0,
        0,
        1796,
        1797,
        7,
        13,
        0,
        0,
        1797,
        1799,
        3,
        256,
        128,
        0,
        1798,
        1787,
        1,
        0,
        0,
        0,
        1798,
        1795,
        1,
        0,
        0,
        0,
        1799,
        253,
        1,
        0,
        0,
        0,
        1800,
        1801,
        6,
        127,
        -1,
        0,
        1801,
        1802,
        5,
        78,
        0,
        0,
        1802,
        1803,
        3,
        254,
        127,
        0,
        1803,
        1804,
        5,
        79,
        0,
        0,
        1804,
        1827,
        1,
        0,
        0,
        0,
        1805,
        1807,
        3,
        24,
        12,
        0,
        1806,
        1805,
        1,
        0,
        0,
        0,
        1807,
        1810,
        1,
        0,
        0,
        0,
        1808,
        1806,
        1,
        0,
        0,
        0,
        1808,
        1809,
        1,
        0,
        0,
        0,
        1809,
        1811,
        1,
        0,
        0,
        0,
        1810,
        1808,
        1,
        0,
        0,
        0,
        1811,
        1815,
        3,
        284,
        142,
        0,
        1812,
        1814,
        3,
        126,
        63,
        0,
        1813,
        1812,
        1,
        0,
        0,
        0,
        1814,
        1817,
        1,
        0,
        0,
        0,
        1815,
        1813,
        1,
        0,
        0,
        0,
        1815,
        1816,
        1,
        0,
        0,
        0,
        1816,
        1818,
        1,
        0,
        0,
        0,
        1817,
        1815,
        1,
        0,
        0,
        0,
        1818,
        1823,
        3,
        174,
        87,
        0,
        1819,
        1820,
        5,
        98,
        0,
        0,
        1820,
        1822,
        3,
        238,
        119,
        0,
        1821,
        1819,
        1,
        0,
        0,
        0,
        1822,
        1825,
        1,
        0,
        0,
        0,
        1823,
        1821,
        1,
        0,
        0,
        0,
        1823,
        1824,
        1,
        0,
        0,
        0,
        1824,
        1827,
        1,
        0,
        0,
        0,
        1825,
        1823,
        1,
        0,
        0,
        0,
        1826,
        1800,
        1,
        0,
        0,
        0,
        1826,
        1808,
        1,
        0,
        0,
        0,
        1827,
        1833,
        1,
        0,
        0,
        0,
        1828,
        1829,
        10,
        1,
        0,
        0,
        1829,
        1830,
        5,
        98,
        0,
        0,
        1830,
        1832,
        3,
        238,
        119,
        0,
        1831,
        1828,
        1,
        0,
        0,
        0,
        1832,
        1835,
        1,
        0,
        0,
        0,
        1833,
        1831,
        1,
        0,
        0,
        0,
        1833,
        1834,
        1,
        0,
        0,
        0,
        1834,
        255,
        1,
        0,
        0,
        0,
        1835,
        1833,
        1,
        0,
        0,
        0,
        1836,
        1844,
        3,
        168,
        84,
        0,
        1837,
        1839,
        3,
        170,
        85,
        0,
        1838,
        1837,
        1,
        0,
        0,
        0,
        1839,
        1842,
        1,
        0,
        0,
        0,
        1840,
        1838,
        1,
        0,
        0,
        0,
        1840,
        1841,
        1,
        0,
        0,
        0,
        1841,
        1844,
        1,
        0,
        0,
        0,
        1842,
        1840,
        1,
        0,
        0,
        0,
        1843,
        1836,
        1,
        0,
        0,
        0,
        1843,
        1840,
        1,
        0,
        0,
        0,
        1844,
        257,
        1,
        0,
        0,
        0,
        1845,
        1846,
        3,
        96,
        48,
        0,
        1846,
        1847,
        5,
        86,
        0,
        0,
        1847,
        1849,
        1,
        0,
        0,
        0,
        1848,
        1845,
        1,
        0,
        0,
        0,
        1848,
        1849,
        1,
        0,
        0,
        0,
        1849,
        1853,
        1,
        0,
        0,
        0,
        1850,
        1852,
        3,
        126,
        63,
        0,
        1851,
        1850,
        1,
        0,
        0,
        0,
        1852,
        1855,
        1,
        0,
        0,
        0,
        1853,
        1851,
        1,
        0,
        0,
        0,
        1853,
        1854,
        1,
        0,
        0,
        0,
        1854,
        1856,
        1,
        0,
        0,
        0,
        1855,
        1853,
        1,
        0,
        0,
        0,
        1856,
        1858,
        3,
        174,
        87,
        0,
        1857,
        1859,
        3,
        288,
        144,
        0,
        1858,
        1857,
        1,
        0,
        0,
        0,
        1858,
        1859,
        1,
        0,
        0,
        0,
        1859,
        259,
        1,
        0,
        0,
        0,
        1860,
        1863,
        3,
        262,
        131,
        0,
        1861,
        1863,
        3,
        272,
        136,
        0,
        1862,
        1860,
        1,
        0,
        0,
        0,
        1862,
        1861,
        1,
        0,
        0,
        0,
        1863,
        261,
        1,
        0,
        0,
        0,
        1864,
        1866,
        3,
        280,
        140,
        0,
        1865,
        1864,
        1,
        0,
        0,
        0,
        1865,
        1866,
        1,
        0,
        0,
        0,
        1866,
        1867,
        1,
        0,
        0,
        0,
        1867,
        1868,
        3,
        264,
        132,
        0,
        1868,
        1870,
        3,
        294,
        147,
        0,
        1869,
        1871,
        3,
        50,
        25,
        0,
        1870,
        1869,
        1,
        0,
        0,
        0,
        1870,
        1871,
        1,
        0,
        0,
        0,
        1871,
        263,
        1,
        0,
        0,
        0,
        1872,
        1877,
        3,
        266,
        133,
        0,
        1873,
        1874,
        5,
        86,
        0,
        0,
        1874,
        1876,
        3,
        266,
        133,
        0,
        1875,
        1873,
        1,
        0,
        0,
        0,
        1876,
        1879,
        1,
        0,
        0,
        0,
        1877,
        1875,
        1,
        0,
        0,
        0,
        1877,
        1878,
        1,
        0,
        0,
        0,
        1878,
        1882,
        1,
        0,
        0,
        0,
        1879,
        1877,
        1,
        0,
        0,
        0,
        1880,
        1882,
        3,
        286,
        143,
        0,
        1881,
        1872,
        1,
        0,
        0,
        0,
        1881,
        1880,
        1,
        0,
        0,
        0,
        1882,
        265,
        1,
        0,
        0,
        0,
        1883,
        1885,
        3,
        174,
        87,
        0,
        1884,
        1886,
        3,
        276,
        138,
        0,
        1885,
        1884,
        1,
        0,
        0,
        0,
        1885,
        1886,
        1,
        0,
        0,
        0,
        1886,
        267,
        1,
        0,
        0,
        0,
        1887,
        1889,
        3,
        174,
        87,
        0,
        1888,
        1890,
        3,
        278,
        139,
        0,
        1889,
        1888,
        1,
        0,
        0,
        0,
        1889,
        1890,
        1,
        0,
        0,
        0,
        1890,
        1891,
        1,
        0,
        0,
        0,
        1891,
        1893,
        3,
        294,
        147,
        0,
        1892,
        1894,
        3,
        50,
        25,
        0,
        1893,
        1892,
        1,
        0,
        0,
        0,
        1893,
        1894,
        1,
        0,
        0,
        0,
        1894,
        269,
        1,
        0,
        0,
        0,
        1895,
        1896,
        5,
        82,
        0,
        0,
        1896,
        1897,
        3,
        238,
        119,
        0,
        1897,
        1898,
        5,
        83,
        0,
        0,
        1898,
        271,
        1,
        0,
        0,
        0,
        1899,
        1900,
        3,
        264,
        132,
        0,
        1900,
        1901,
        3,
        60,
        30,
        0,
        1901,
        1902,
        3,
        94,
        47,
        0,
        1902,
        1913,
        1,
        0,
        0,
        0,
        1903,
        1905,
        3,
        264,
        132,
        0,
        1904,
        1906,
        3,
        270,
        135,
        0,
        1905,
        1904,
        1,
        0,
        0,
        0,
        1906,
        1907,
        1,
        0,
        0,
        0,
        1907,
        1905,
        1,
        0,
        0,
        0,
        1907,
        1908,
        1,
        0,
        0,
        0,
        1908,
        1910,
        1,
        0,
        0,
        0,
        1909,
        1911,
        3,
        60,
        30,
        0,
        1910,
        1909,
        1,
        0,
        0,
        0,
        1910,
        1911,
        1,
        0,
        0,
        0,
        1911,
        1913,
        1,
        0,
        0,
        0,
        1912,
        1899,
        1,
        0,
        0,
        0,
        1912,
        1903,
        1,
        0,
        0,
        0,
        1913,
        273,
        1,
        0,
        0,
        0,
        1914,
        1915,
        3,
        280,
        140,
        0,
        1915,
        1916,
        3,
        292,
        146,
        0,
        1916,
        275,
        1,
        0,
        0,
        0,
        1917,
        1918,
        5,
        89,
        0,
        0,
        1918,
        1921,
        5,
        88,
        0,
        0,
        1919,
        1921,
        3,
        288,
        144,
        0,
        1920,
        1917,
        1,
        0,
        0,
        0,
        1920,
        1919,
        1,
        0,
        0,
        0,
        1921,
        277,
        1,
        0,
        0,
        0,
        1922,
        1923,
        5,
        89,
        0,
        0,
        1923,
        1926,
        5,
        88,
        0,
        0,
        1924,
        1926,
        3,
        280,
        140,
        0,
        1925,
        1922,
        1,
        0,
        0,
        0,
        1925,
        1924,
        1,
        0,
        0,
        0,
        1926,
        279,
        1,
        0,
        0,
        0,
        1927,
        1928,
        5,
        89,
        0,
        0,
        1928,
        1929,
        3,
        282,
        141,
        0,
        1929,
        1930,
        5,
        88,
        0,
        0,
        1930,
        281,
        1,
        0,
        0,
        0,
        1931,
        1936,
        3,
        284,
        142,
        0,
        1932,
        1933,
        5,
        85,
        0,
        0,
        1933,
        1935,
        3,
        284,
        142,
        0,
        1934,
        1932,
        1,
        0,
        0,
        0,
        1935,
        1938,
        1,
        0,
        0,
        0,
        1936,
        1934,
        1,
        0,
        0,
        0,
        1936,
        1937,
        1,
        0,
        0,
        0,
        1937,
        283,
        1,
        0,
        0,
        0,
        1938,
        1936,
        1,
        0,
        0,
        0,
        1939,
        1941,
        3,
        126,
        63,
        0,
        1940,
        1939,
        1,
        0,
        0,
        0,
        1941,
        1944,
        1,
        0,
        0,
        0,
        1942,
        1940,
        1,
        0,
        0,
        0,
        1942,
        1943,
        1,
        0,
        0,
        0,
        1943,
        1947,
        1,
        0,
        0,
        0,
        1944,
        1942,
        1,
        0,
        0,
        0,
        1945,
        1948,
        3,
        96,
        48,
        0,
        1946,
        1948,
        3,
        286,
        143,
        0,
        1947,
        1945,
        1,
        0,
        0,
        0,
        1947,
        1946,
        1,
        0,
        0,
        0,
        1948,
        1950,
        1,
        0,
        0,
        0,
        1949,
        1951,
        3,
        60,
        30,
        0,
        1950,
        1949,
        1,
        0,
        0,
        0,
        1950,
        1951,
        1,
        0,
        0,
        0,
        1951,
        285,
        1,
        0,
        0,
        0,
        1952,
        1953,
        7,
        14,
        0,
        0,
        1953,
        287,
        1,
        0,
        0,
        0,
        1954,
        1955,
        5,
        89,
        0,
        0,
        1955,
        1960,
        3,
        100,
        50,
        0,
        1956,
        1957,
        5,
        85,
        0,
        0,
        1957,
        1959,
        3,
        100,
        50,
        0,
        1958,
        1956,
        1,
        0,
        0,
        0,
        1959,
        1962,
        1,
        0,
        0,
        0,
        1960,
        1958,
        1,
        0,
        0,
        0,
        1960,
        1961,
        1,
        0,
        0,
        0,
        1961,
        1963,
        1,
        0,
        0,
        0,
        1962,
        1960,
        1,
        0,
        0,
        0,
        1963,
        1964,
        5,
        88,
        0,
        0,
        1964,
        289,
        1,
        0,
        0,
        0,
        1965,
        1966,
        5,
        40,
        0,
        0,
        1966,
        1977,
        3,
        294,
        147,
        0,
        1967,
        1968,
        5,
        40,
        0,
        0,
        1968,
        1970,
        5,
        86,
        0,
        0,
        1969,
        1971,
        3,
        288,
        144,
        0,
        1970,
        1969,
        1,
        0,
        0,
        0,
        1970,
        1971,
        1,
        0,
        0,
        0,
        1971,
        1972,
        1,
        0,
        0,
        0,
        1972,
        1974,
        3,
        174,
        87,
        0,
        1973,
        1975,
        3,
        294,
        147,
        0,
        1974,
        1973,
        1,
        0,
        0,
        0,
        1974,
        1975,
        1,
        0,
        0,
        0,
        1975,
        1977,
        1,
        0,
        0,
        0,
        1976,
        1965,
        1,
        0,
        0,
        0,
        1976,
        1967,
        1,
        0,
        0,
        0,
        1977,
        291,
        1,
        0,
        0,
        0,
        1978,
        1983,
        3,
        290,
        145,
        0,
        1979,
        1980,
        3,
        174,
        87,
        0,
        1980,
        1981,
        3,
        294,
        147,
        0,
        1981,
        1983,
        1,
        0,
        0,
        0,
        1982,
        1978,
        1,
        0,
        0,
        0,
        1982,
        1979,
        1,
        0,
        0,
        0,
        1983,
        293,
        1,
        0,
        0,
        0,
        1984,
        1986,
        5,
        78,
        0,
        0,
        1985,
        1987,
        3,
        204,
        102,
        0,
        1986,
        1985,
        1,
        0,
        0,
        0,
        1986,
        1987,
        1,
        0,
        0,
        0,
        1987,
        1988,
        1,
        0,
        0,
        0,
        1988,
        1989,
        5,
        79,
        0,
        0,
        1989,
        295,
        1,
        0,
        0,
        0,
        245,
        302,
        316,
        325,
        335,
        343,
        352,
        361,
        370,
        379,
        388,
        397,
        406,
        415,
        423,
        435,
        439,
        441,
        446,
        448,
        453,
        455,
        463,
        472,
        477,
        484,
        492,
        499,
        511,
        515,
        520,
        523,
        526,
        529,
        548,
        556,
        562,
        567,
        575,
        581,
        585,
        588,
        591,
        600,
        606,
        611,
        614,
        620,
        626,
        629,
        632,
        640,
        649,
        656,
        662,
        666,
        676,
        679,
        685,
        688,
        696,
        702,
        713,
        717,
        720,
        725,
        732,
        745,
        750,
        759,
        771,
        776,
        780,
        785,
        792,
        795,
        804,
        810,
        814,
        818,
        826,
        830,
        832,
        841,
        848,
        854,
        860,
        862,
        869,
        874,
        879,
        882,
        884,
        894,
        904,
        909,
        912,
        917,
        926,
        933,
        944,
        950,
        961,
        971,
        982,
        985,
        992,
        1002,
        1010,
        1013,
        1016,
        1029,
        1037,
        1042,
        1048,
        1052,
        1056,
        1060,
        1064,
        1066,
        1077,
        1085,
        1095,
        1104,
        1114,
        1122,
        1136,
        1143,
        1147,
        1151,
        1160,
        1170,
        1177,
        1183,
        1193,
        1198,
        1209,
        1218,
        1224,
        1231,
        1240,
        1245,
        1249,
        1253,
        1262,
        1267,
        1290,
        1293,
        1296,
        1304,
        1308,
        1320,
        1329,
        1334,
        1349,
        1355,
        1361,
        1371,
        1384,
        1393,
        1402,
        1408,
        1416,
        1422,
        1427,
        1432,
        1440,
        1445,
        1449,
        1460,
        1466,
        1477,
        1483,
        1489,
        1497,
        1506,
        1516,
        1527,
        1541,
        1546,
        1559,
        1561,
        1563,
        1574,
        1585,
        1596,
        1607,
        1618,
        1629,
        1645,
        1652,
        1656,
        1661,
        1668,
        1680,
        1689,
        1696,
        1699,
        1703,
        1722,
        1728,
        1732,
        1737,
        1741,
        1755,
        1760,
        1765,
        1768,
        1770,
        1779,
        1785,
        1791,
        1798,
        1808,
        1815,
        1823,
        1826,
        1833,
        1840,
        1843,
        1848,
        1853,
        1858,
        1862,
        1865,
        1870,
        1877,
        1881,
        1885,
        1889,
        1893,
        1907,
        1910,
        1912,
        1920,
        1925,
        1936,
        1942,
        1947,
        1950,
        1960,
        1970,
        1974,
        1976,
        1982,
        1986,
    ]


class JavaParser(Parser):
    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'abstract'",
        "'assert'",
        "'boolean'",
        "'break'",
        "'byte'",
        "'case'",
        "'catch'",
        "'char'",
        "'class'",
        "'const'",
        "'continue'",
        "'default'",
        "'do'",
        "'double'",
        "'else'",
        "'enum'",
        "'extends'",
        "'final'",
        "'finally'",
        "'float'",
        "'for'",
        "'if'",
        "'goto'",
        "'implements'",
        "'import'",
        "'instanceof'",
        "'int'",
        "'interface'",
        "'long'",
        "'native'",
        "'new'",
        "'package'",
        "'private'",
        "'protected'",
        "'public'",
        "'return'",
        "'short'",
        "'static'",
        "'strictfp'",
        "'super'",
        "'switch'",
        "'synchronized'",
        "'this'",
        "'throw'",
        "'throws'",
        "'transient'",
        "'try'",
        "'void'",
        "'volatile'",
        "'while'",
        "'module'",
        "'open'",
        "'requires'",
        "'exports'",
        "'opens'",
        "'to'",
        "'uses'",
        "'provides'",
        "'with'",
        "'transitive'",
        "'var'",
        "'yield'",
        "'record'",
        "'sealed'",
        "'implements'",
        "'non-sealed'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'['",
        "']'",
        "';'",
        "','",
        "'.'",
        "'='",
        "'>'",
        "'<'",
        "'!'",
        "'~'",
        "'?'",
        "':'",
        "'=='",
        "'<='",
        "'>='",
        "'!='",
        "'&&'",
        "'||'",
        "'++'",
        "'--'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'&'",
        "'|'",
        "'^'",
        "'%'",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'&='",
        "'|='",
        "'^='",
        "'%='",
        "'<<='",
        "'>>='",
        "'>>>='",
        "'->'",
        "'::'",
        "'@'",
        "'...'",
    ]

    symbolicNames = [
        "<INVALID>",
        "ABSTRACT",
        "ASSERT",
        "BOOLEAN",
        "BREAK",
        "BYTE",
        "CASE",
        "CATCH",
        "CHAR",
        "CLASS",
        "CONST",
        "CONTINUE",
        "DEFAULT",
        "DO",
        "DOUBLE",
        "ELSE",
        "ENUM",
        "EXTENDS",
        "FINAL",
        "FINALLY",
        "FLOAT",
        "FOR",
        "IF",
        "GOTO",
        "IMPLEMENTS",
        "IMPORT",
        "INSTANCEOF",
        "INT",
        "INTERFACE",
        "LONG",
        "NATIVE",
        "NEW",
        "PACKAGE",
        "PRIVATE",
        "PROTECTED",
        "PUBLIC",
        "RETURN",
        "SHORT",
        "STATIC",
        "STRICTFP",
        "SUPER",
        "SWITCH",
        "SYNCHRONIZED",
        "THIS",
        "THROW",
        "THROWS",
        "TRANSIENT",
        "TRY",
        "VOID",
        "VOLATILE",
        "WHILE",
        "MODULE",
        "OPEN",
        "REQUIRES",
        "EXPORTS",
        "OPENS",
        "TO",
        "USES",
        "PROVIDES",
        "WITH",
        "TRANSITIVE",
        "VAR",
        "YIELD",
        "RECORD",
        "SEALED",
        "PERMITS",
        "NON_SEALED",
        "DECIMAL_LITERAL",
        "HEX_LITERAL",
        "OCT_LITERAL",
        "BINARY_LITERAL",
        "FLOAT_LITERAL",
        "HEX_FLOAT_LITERAL",
        "BOOL_LITERAL",
        "CHAR_LITERAL",
        "STRING_LITERAL",
        "TEXT_BLOCK",
        "NULL_LITERAL",
        "LPAREN",
        "RPAREN",
        "LBRACE",
        "RBRACE",
        "LBRACK",
        "RBRACK",
        "SEMI",
        "COMMA",
        "DOT",
        "ASSIGN",
        "GT",
        "LT",
        "BANG",
        "TILDE",
        "QUESTION",
        "COLON",
        "EQUAL",
        "LE",
        "GE",
        "NOTEQUAL",
        "AND",
        "OR",
        "INC",
        "DEC",
        "ADD",
        "SUB",
        "MUL",
        "DIV",
        "BITAND",
        "BITOR",
        "CARET",
        "MOD",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "MUL_ASSIGN",
        "DIV_ASSIGN",
        "AND_ASSIGN",
        "OR_ASSIGN",
        "XOR_ASSIGN",
        "MOD_ASSIGN",
        "LSHIFT_ASSIGN",
        "RSHIFT_ASSIGN",
        "URSHIFT_ASSIGN",
        "ARROW",
        "COLONCOLON",
        "AT",
        "ELLIPSIS",
        "WS",
        "COMMENT",
        "LINE_COMMENT",
        "IDENTIFIER",
    ]

    RULE_compilationUnit = 0
    RULE_declarationStart = 1
    RULE_statementStart = 2
    RULE_expressionStart = 3
    RULE_directiveStart = 4
    RULE_ordinaryCompilationUnit = 5
    RULE_modularCompilationUnit = 6
    RULE_packageDeclaration = 7
    RULE_importDeclaration = 8
    RULE_typeDeclaration = 9
    RULE_modifier = 10
    RULE_classOrInterfaceModifier = 11
    RULE_variableModifier = 12
    RULE_classDeclaration = 13
    RULE_classExtends = 14
    RULE_classImplements = 15
    RULE_classPermits = 16
    RULE_typeParameters = 17
    RULE_typeParameter = 18
    RULE_typeBound = 19
    RULE_enumDeclaration = 20
    RULE_enumConstants = 21
    RULE_enumConstant = 22
    RULE_enumBodyDeclarations = 23
    RULE_interfaceDeclaration = 24
    RULE_classBody = 25
    RULE_interfaceBody = 26
    RULE_classBodyDeclaration = 27
    RULE_memberDeclaration = 28
    RULE_methodDeclaration = 29
    RULE_dims = 30
    RULE_dim = 31
    RULE_throws_ = 32
    RULE_methodBody = 33
    RULE_typeTypeOrVoid = 34
    RULE_constructorDeclaration = 35
    RULE_compactConstructorDeclaration = 36
    RULE_fieldDeclaration = 37
    RULE_interfaceBodyDeclaration = 38
    RULE_interfaceMemberDeclaration = 39
    RULE_constDeclaration = 40
    RULE_interfaceMethodModifier = 41
    RULE_interfaceMethodDeclaration = 42
    RULE_variableDeclarators = 43
    RULE_variableDeclarator = 44
    RULE_variableDeclaratorId = 45
    RULE_variableInitializer = 46
    RULE_arrayInitializer = 47
    RULE_classOrInterfaceType = 48
    RULE_coit = 49
    RULE_typeArgument = 50
    RULE_qualifiedNameList = 51
    RULE_formalParameters = 52
    RULE_receiverParameter = 53
    RULE_formalParameterList = 54
    RULE_formalParameter = 55
    RULE_lastFormalParameter = 56
    RULE_lambdaLVTIList = 57
    RULE_lambdaLVTIParameter = 58
    RULE_qualifiedName = 59
    RULE_literal = 60
    RULE_integerLiteral = 61
    RULE_floatLiteral = 62
    RULE_annotation = 63
    RULE_elementValuePairs = 64
    RULE_elementValuePair = 65
    RULE_elementValue = 66
    RULE_elementValueArrayInitializer = 67
    RULE_annotationTypeDeclaration = 68
    RULE_annotationTypeBody = 69
    RULE_annotationTypeElementDeclaration = 70
    RULE_annotationTypeElementRest = 71
    RULE_annotationConstantDeclaration = 72
    RULE_annotationMethodDeclaration = 73
    RULE_defaultValue = 74
    RULE_moduleDeclaration = 75
    RULE_moduleBody = 76
    RULE_moduleDirective = 77
    RULE_requiresModifier = 78
    RULE_recordDeclaration = 79
    RULE_recordComponentList = 80
    RULE_recordComponent = 81
    RULE_recordBody = 82
    RULE_recordBodyDeclaration = 83
    RULE_block = 84
    RULE_blockStatement = 85
    RULE_localVariableDeclaration = 86
    RULE_identifier = 87
    RULE_typeIdentifier = 88
    RULE_localTypeDeclaration = 89
    RULE_statement = 90
    RULE_switchBlock = 91
    RULE_catchClause = 92
    RULE_catchType = 93
    RULE_finallyBlock = 94
    RULE_resourceSpecification = 95
    RULE_resources = 96
    RULE_resource = 97
    RULE_switchBlockStatementGroup = 98
    RULE_switchLabel = 99
    RULE_forInit = 100
    RULE_parExpression = 101
    RULE_expressionList = 102
    RULE_methodCall = 103
    RULE_postfixExpression = 104
    RULE_prefixExpression = 105
    RULE_typeExpression = 106
    RULE_multiplicativeExpression = 107
    RULE_additiveExpression = 108
    RULE_shiftExpression = 109
    RULE_relationalExpression = 110
    RULE_equalityExpression = 111
    RULE_bitwiseAndExpression = 112
    RULE_bitwiseXorExpression = 113
    RULE_bitwiseOrExpression = 114
    RULE_logicalAndExpression = 115
    RULE_logicalOrExpression = 116
    RULE_ternaryExpression = 117
    RULE_assignmentExpression = 118
    RULE_expression = 119
    RULE_pattern = 120
    RULE_lambdaExpression = 121
    RULE_lambdaParameters = 122
    RULE_lambdaBody = 123
    RULE_primary = 124
    RULE_switchExpression = 125
    RULE_switchLabeledRule = 126
    RULE_guardedPattern = 127
    RULE_switchRuleOutcome = 128
    RULE_classType = 129
    RULE_creator = 130
    RULE_objectCreator = 131
    RULE_createdName = 132
    RULE_coitDiamond = 133
    RULE_innerCreator = 134
    RULE_dimExpr = 135
    RULE_arrayCreator = 136
    RULE_explicitGenericInvocation = 137
    RULE_typeArgumentsOrDiamond = 138
    RULE_nonWildcardTypeArgumentsOrDiamond = 139
    RULE_nonWildcardTypeArguments = 140
    RULE_typeList = 141
    RULE_typeType = 142
    RULE_primitiveType = 143
    RULE_typeArguments = 144
    RULE_superSuffix = 145
    RULE_explicitGenericInvocationSuffix = 146
    RULE_arguments = 147

    ruleNames = [
        "compilationUnit",
        "declarationStart",
        "statementStart",
        "expressionStart",
        "directiveStart",
        "ordinaryCompilationUnit",
        "modularCompilationUnit",
        "packageDeclaration",
        "importDeclaration",
        "typeDeclaration",
        "modifier",
        "classOrInterfaceModifier",
        "variableModifier",
        "classDeclaration",
        "classExtends",
        "classImplements",
        "classPermits",
        "typeParameters",
        "typeParameter",
        "typeBound",
        "enumDeclaration",
        "enumConstants",
        "enumConstant",
        "enumBodyDeclarations",
        "interfaceDeclaration",
        "classBody",
        "interfaceBody",
        "classBodyDeclaration",
        "memberDeclaration",
        "methodDeclaration",
        "dims",
        "dim",
        "throws_",
        "methodBody",
        "typeTypeOrVoid",
        "constructorDeclaration",
        "compactConstructorDeclaration",
        "fieldDeclaration",
        "interfaceBodyDeclaration",
        "interfaceMemberDeclaration",
        "constDeclaration",
        "interfaceMethodModifier",
        "interfaceMethodDeclaration",
        "variableDeclarators",
        "variableDeclarator",
        "variableDeclaratorId",
        "variableInitializer",
        "arrayInitializer",
        "classOrInterfaceType",
        "coit",
        "typeArgument",
        "qualifiedNameList",
        "formalParameters",
        "receiverParameter",
        "formalParameterList",
        "formalParameter",
        "lastFormalParameter",
        "lambdaLVTIList",
        "lambdaLVTIParameter",
        "qualifiedName",
        "literal",
        "integerLiteral",
        "floatLiteral",
        "annotation",
        "elementValuePairs",
        "elementValuePair",
        "elementValue",
        "elementValueArrayInitializer",
        "annotationTypeDeclaration",
        "annotationTypeBody",
        "annotationTypeElementDeclaration",
        "annotationTypeElementRest",
        "annotationConstantDeclaration",
        "annotationMethodDeclaration",
        "defaultValue",
        "moduleDeclaration",
        "moduleBody",
        "moduleDirective",
        "requiresModifier",
        "recordDeclaration",
        "recordComponentList",
        "recordComponent",
        "recordBody",
        "recordBodyDeclaration",
        "block",
        "blockStatement",
        "localVariableDeclaration",
        "identifier",
        "typeIdentifier",
        "localTypeDeclaration",
        "statement",
        "switchBlock",
        "catchClause",
        "catchType",
        "finallyBlock",
        "resourceSpecification",
        "resources",
        "resource",
        "switchBlockStatementGroup",
        "switchLabel",
        "forInit",
        "parExpression",
        "expressionList",
        "methodCall",
        "postfixExpression",
        "prefixExpression",
        "typeExpression",
        "multiplicativeExpression",
        "additiveExpression",
        "shiftExpression",
        "relationalExpression",
        "equalityExpression",
        "bitwiseAndExpression",
        "bitwiseXorExpression",
        "bitwiseOrExpression",
        "logicalAndExpression",
        "logicalOrExpression",
        "ternaryExpression",
        "assignmentExpression",
        "expression",
        "pattern",
        "lambdaExpression",
        "lambdaParameters",
        "lambdaBody",
        "primary",
        "switchExpression",
        "switchLabeledRule",
        "guardedPattern",
        "switchRuleOutcome",
        "classType",
        "creator",
        "objectCreator",
        "createdName",
        "coitDiamond",
        "innerCreator",
        "dimExpr",
        "arrayCreator",
        "explicitGenericInvocation",
        "typeArgumentsOrDiamond",
        "nonWildcardTypeArgumentsOrDiamond",
        "nonWildcardTypeArguments",
        "typeList",
        "typeType",
        "primitiveType",
        "typeArguments",
        "superSuffix",
        "explicitGenericInvocationSuffix",
        "arguments",
    ]

    EOF = Token.EOF
    ABSTRACT = 1
    ASSERT = 2
    BOOLEAN = 3
    BREAK = 4
    BYTE = 5
    CASE = 6
    CATCH = 7
    CHAR = 8
    CLASS = 9
    CONST = 10
    CONTINUE = 11
    DEFAULT = 12
    DO = 13
    DOUBLE = 14
    ELSE = 15
    ENUM = 16
    EXTENDS = 17
    FINAL = 18
    FINALLY = 19
    FLOAT = 20
    FOR = 21
    IF = 22
    GOTO = 23
    IMPLEMENTS = 24
    IMPORT = 25
    INSTANCEOF = 26
    INT = 27
    INTERFACE = 28
    LONG = 29
    NATIVE = 30
    NEW = 31
    PACKAGE = 32
    PRIVATE = 33
    PROTECTED = 34
    PUBLIC = 35
    RETURN = 36
    SHORT = 37
    STATIC = 38
    STRICTFP = 39
    SUPER = 40
    SWITCH = 41
    SYNCHRONIZED = 42
    THIS = 43
    THROW = 44
    THROWS = 45
    TRANSIENT = 46
    TRY = 47
    VOID = 48
    VOLATILE = 49
    WHILE = 50
    MODULE = 51
    OPEN = 52
    REQUIRES = 53
    EXPORTS = 54
    OPENS = 55
    TO = 56
    USES = 57
    PROVIDES = 58
    WITH = 59
    TRANSITIVE = 60
    VAR = 61
    YIELD = 62
    RECORD = 63
    SEALED = 64
    PERMITS = 65
    NON_SEALED = 66
    DECIMAL_LITERAL = 67
    HEX_LITERAL = 68
    OCT_LITERAL = 69
    BINARY_LITERAL = 70
    FLOAT_LITERAL = 71
    HEX_FLOAT_LITERAL = 72
    BOOL_LITERAL = 73
    CHAR_LITERAL = 74
    STRING_LITERAL = 75
    TEXT_BLOCK = 76
    NULL_LITERAL = 77
    LPAREN = 78
    RPAREN = 79
    LBRACE = 80
    RBRACE = 81
    LBRACK = 82
    RBRACK = 83
    SEMI = 84
    COMMA = 85
    DOT = 86
    ASSIGN = 87
    GT = 88
    LT = 89
    BANG = 90
    TILDE = 91
    QUESTION = 92
    COLON = 93
    EQUAL = 94
    LE = 95
    GE = 96
    NOTEQUAL = 97
    AND = 98
    OR = 99
    INC = 100
    DEC = 101
    ADD = 102
    SUB = 103
    MUL = 104
    DIV = 105
    BITAND = 106
    BITOR = 107
    CARET = 108
    MOD = 109
    ADD_ASSIGN = 110
    SUB_ASSIGN = 111
    MUL_ASSIGN = 112
    DIV_ASSIGN = 113
    AND_ASSIGN = 114
    OR_ASSIGN = 115
    XOR_ASSIGN = 116
    MOD_ASSIGN = 117
    LSHIFT_ASSIGN = 118
    RSHIFT_ASSIGN = 119
    URSHIFT_ASSIGN = 120
    ARROW = 121
    COLONCOLON = 122
    AT = 123
    ELLIPSIS = 124
    WS = 125
    COMMENT = 126
    LINE_COMMENT = 127
    IDENTIFIER = 128

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class CompilationUnitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinaryCompilationUnit(self):
            return self.getTypedRuleContext(
                JavaParser.OrdinaryCompilationUnitContext, 0
            )

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def modularCompilationUnit(self):
            return self.getTypedRuleContext(JavaParser.ModularCompilationUnitContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompilationUnit"):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompilationUnit"):
                listener.exitCompilationUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompilationUnit"):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)

    def compilationUnit(self):
        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.ordinaryCompilationUnit()
                self.state = 297
                self.match(JavaParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.modularCompilationUnit()
                self.state = 300
                self.match(JavaParser.EOF)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationStartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext, 0)

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def importDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ImportDeclarationContext, 0)

        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext, 0)

        def modifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext, 0)

        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.InterfaceMethodDeclarationContext, 0
            )

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext, 0)

        def compactConstructorDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.CompactConstructorDeclarationContext, 0
            )

        def annotationMethodDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationMethodDeclarationContext, 0
            )

        def annotationConstantDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationConstantDeclarationContext, 0
            )

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeDeclarationContext, 0
            )

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_declarationStart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationStart"):
                listener.enterDeclarationStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationStart"):
                listener.exitDeclarationStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarationStart"):
                return visitor.visitDeclarationStart(self)
            else:
                return visitor.visitChildren(self)

    def declarationStart(self):
        localctx = JavaParser.DeclarationStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declarationStart)
        self._la = 0  # Token type
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.packageDeclaration()
                self.state = 305
                self.match(JavaParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.importDeclaration()
                self.state = 308
                self.match(JavaParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 310
                self.moduleDeclaration()
                self.state = 311
                self.match(JavaParser.EOF)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 313
                        self.modifier()
                    self.state = 318
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)

                self.state = 319
                self.fieldDeclaration()
                self.state = 320
                self.match(JavaParser.EOF)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 322
                        self.modifier()
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

                self.state = 328
                self.methodDeclaration()
                self.state = 329
                self.match(JavaParser.EOF)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 331
                self.interfaceMethodDeclaration()
                self.state = 332
                self.match(JavaParser.EOF)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 38:
                    self.state = 334
                    self.match(JavaParser.STATIC)

                self.state = 337
                self.block()
                self.state = 338
                self.match(JavaParser.EOF)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 340
                        self.modifier()
                    self.state = 345
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

                self.state = 346
                self.constructorDeclaration()
                self.state = 347
                self.match(JavaParser.EOF)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 349
                        self.modifier()
                    self.state = 354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

                self.state = 355
                self.compactConstructorDeclaration()
                self.state = 356
                self.match(JavaParser.EOF)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 358
                        self.modifier()
                    self.state = 363
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 364
                self.annotationMethodDeclaration()
                self.state = 365
                self.match(JavaParser.EOF)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 367
                        self.modifier()
                    self.state = 372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)

                self.state = 373
                self.annotationConstantDeclaration()
                self.state = 374
                self.match(JavaParser.EOF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 638602581377026) != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & 576460752303423493) != 0
                ):
                    self.state = 376
                    self.modifier()
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 382
                self.interfaceDeclaration()
                self.state = 383
                self.match(JavaParser.EOF)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 385
                        self.modifier()
                    self.state = 390
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                self.state = 391
                self.annotationTypeDeclaration()
                self.state = 392
                self.match(JavaParser.EOF)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 638602581377026) != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & 576460752303423493) != 0
                ):
                    self.state = 394
                    self.modifier()
                    self.state = 399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 400
                self.classDeclaration()
                self.state = 401
                self.match(JavaParser.EOF)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 638602581377026) != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & 576460752303423493) != 0
                ):
                    self.state = 403
                    self.modifier()
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 409
                self.enumDeclaration()
                self.state = 410
                self.match(JavaParser.EOF)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 638602581377026) != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & 576460752303423493) != 0
                ):
                    self.state = 412
                    self.modifier()
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 418
                self.recordDeclaration()
                self.state = 419
                self.match(JavaParser.EOF)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 421
                self.match(JavaParser.SEMI)
                self.state = 422
                self.match(JavaParser.EOF)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementStartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(JavaParser.BlockStatementContext, 0)

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_statementStart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementStart"):
                listener.enterStatementStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementStart"):
                listener.exitStatementStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatementStart"):
                return visitor.visitStatementStart(self)
            else:
                return visitor.visitChildren(self)

    def statementStart(self):
        localctx = JavaParser.StatementStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statementStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.blockStatement()
            self.state = 426
            self.match(JavaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionStart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionStart"):
                listener.enterExpressionStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionStart"):
                listener.exitExpressionStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionStart"):
                return visitor.visitExpressionStart(self)
            else:
                return visitor.visitChildren(self)

    def expressionStart(self):
        localctx = JavaParser.ExpressionStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.expression()
            self.state = 429
            self.match(JavaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectiveStartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDirective(self):
            return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext, 0)

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_directiveStart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDirectiveStart"):
                listener.enterDirectiveStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDirectiveStart"):
                listener.exitDirectiveStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectiveStart"):
                return visitor.visitDirectiveStart(self)
            else:
                return visitor.visitChildren(self)

    def directiveStart(self):
        localctx = JavaParser.DirectiveStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_directiveStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.moduleDirective()
            self.state = 432
            self.match(JavaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrdinaryCompilationUnitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext, 0)

        def importDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_ordinaryCompilationUnit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrdinaryCompilationUnit"):
                listener.enterOrdinaryCompilationUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrdinaryCompilationUnit"):
                listener.exitOrdinaryCompilationUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrdinaryCompilationUnit"):
                return visitor.visitOrdinaryCompilationUnit(self)
            else:
                return visitor.visitChildren(self)

    def ordinaryCompilationUnit(self):
        localctx = JavaParser.OrdinaryCompilationUnitContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 10, self.RULE_ordinaryCompilationUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
            if la_ == 1:
                self.state = 434
                self.packageDeclaration()

            self.state = 441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 439
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [25]:
                        self.state = 437
                        self.importDeclaration()
                        pass
                    elif token in [84]:
                        self.state = 438
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & -9223371151822749182) != 0
            ) or (
                (((_la - 64)) & ~0x3F) == 0
                and ((1 << (_la - 64)) & 576460752304472069) != 0
            ):
                self.state = 446
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 9, 16, 18, 28, 33, 34, 35, 38, 39, 63, 64, 66, 123]:
                    self.state = 444
                    self.typeDeclaration()
                    pass
                elif token in [84]:
                    self.state = 445
                    self.match(JavaParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModularCompilationUnitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext, 0)

        def importDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_modularCompilationUnit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModularCompilationUnit"):
                listener.enterModularCompilationUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModularCompilationUnit"):
                listener.exitModularCompilationUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModularCompilationUnit"):
                return visitor.visitModularCompilationUnit(self)
            else:
                return visitor.visitChildren(self)

    def modularCompilationUnit(self):
        localctx = JavaParser.ModularCompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_modularCompilationUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 25 or _la == 84:
                self.state = 453
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 451
                    self.importDeclaration()
                    pass
                elif token in [84]:
                    self.state = 452
                    self.match(JavaParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 458
            self.moduleDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPackageDeclaration"):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPackageDeclaration"):
                listener.exitPackageDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPackageDeclaration"):
                return visitor.visitPackageDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def packageDeclaration(self):
        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_packageDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 460
                self.annotation()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 466
            self.match(JavaParser.PACKAGE)
            self.state = 467
            self.qualifiedName()
            self.state = 468
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportDeclaration"):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportDeclaration"):
                listener.exitImportDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportDeclaration"):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def importDeclaration(self):
        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(JavaParser.IMPORT)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 38:
                self.state = 471
                self.match(JavaParser.STATIC)

            self.state = 474
            self.qualifiedName()
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 475
                self.match(JavaParser.DOT)
                self.state = 476
                self.match(JavaParser.MUL)

            self.state = 479
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeDeclarationContext, 0
            )

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def classOrInterfaceModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.ClassOrInterfaceModifierContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.ClassOrInterfaceModifierContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeDeclaration"):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeDeclaration"):
                listener.exitTypeDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeDeclaration"):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def typeDeclaration(self):
        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 481
                    self.classOrInterfaceModifier()
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)

            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 487
                self.classDeclaration()
                pass
            elif token in [16]:
                self.state = 488
                self.enumDeclaration()
                pass
            elif token in [28]:
                self.state = 489
                self.interfaceDeclaration()
                pass
            elif token in [123]:
                self.state = 490
                self.annotationTypeDeclaration()
                pass
            elif token in [63]:
                self.state = 491
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(
                JavaParser.ClassOrInterfaceModifierContext, 0
            )

        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifier"):
                listener.enterModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifier"):
                listener.exitModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifier"):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)

    def modifier(self):
        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_modifier)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 18, 33, 34, 35, 38, 39, 64, 66, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.classOrInterfaceModifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(JavaParser.NATIVE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassOrInterfaceModifier"):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassOrInterfaceModifier"):
                listener.exitClassOrInterfaceModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassOrInterfaceModifier"):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)

    def classOrInterfaceModifier(self):
        localctx = JavaParser.ClassOrInterfaceModifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 22, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(JavaParser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.match(JavaParser.PRIVATE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.match(JavaParser.STATIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 506
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 507
                self.match(JavaParser.FINAL)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 8)
                self.state = 508
                self.match(JavaParser.STRICTFP)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 9)
                self.state = 509
                self.match(JavaParser.SEALED)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 10)
                self.state = 510
                self.match(JavaParser.NON_SEALED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableModifier"):
                listener.enterVariableModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableModifier"):
                listener.exitVariableModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableModifier"):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)

    def variableModifier(self):
        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_variableModifier)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(JavaParser.FINAL)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def classExtends(self):
            return self.getTypedRuleContext(JavaParser.ClassExtendsContext, 0)

        def classImplements(self):
            return self.getTypedRuleContext(JavaParser.ClassImplementsContext, 0)

        def classPermits(self):
            return self.getTypedRuleContext(JavaParser.ClassPermitsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassDeclaration"):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassDeclaration"):
                listener.exitClassDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassDeclaration"):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def classDeclaration(self):
        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(JavaParser.CLASS)
            self.state = 518
            self.identifier()
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 519
                self.typeParameters()

            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 17:
                self.state = 522
                self.classExtends()

            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 24:
                self.state = 525
                self.classImplements()

            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 65:
                self.state = 528
                self.classPermits()

            self.state = 531
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassExtendsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classExtends

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassExtends"):
                listener.enterClassExtends(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassExtends"):
                listener.exitClassExtends(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassExtends"):
                return visitor.visitClassExtends(self)
            else:
                return visitor.visitChildren(self)

    def classExtends(self):
        localctx = JavaParser.ClassExtendsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classExtends)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(JavaParser.EXTENDS)
            self.state = 534
            self.typeType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassImplementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classImplements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassImplements"):
                listener.enterClassImplements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassImplements"):
                listener.exitClassImplements(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassImplements"):
                return visitor.visitClassImplements(self)
            else:
                return visitor.visitChildren(self)

    def classImplements(self):
        localctx = JavaParser.ClassImplementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classImplements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(JavaParser.IMPLEMENTS)
            self.state = 537
            self.typeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassPermitsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classPermits

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassPermits"):
                listener.enterClassPermits(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassPermits"):
                listener.exitClassPermits(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassPermits"):
                return visitor.visitClassPermits(self)
            else:
                return visitor.visitChildren(self)

    def classPermits(self):
        localctx = JavaParser.ClassPermitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classPermits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(JavaParser.PERMITS)
            self.state = 540
            self.typeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext, i)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeParameters"):
                listener.enterTypeParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeParameters"):
                listener.exitTypeParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeParameters"):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)

    def typeParameters(self):
        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(JavaParser.LT)
            self.state = 543
            self.typeParameter()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 544
                self.match(JavaParser.COMMA)
                self.state = 545
                self.typeParameter()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 551
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeParameter"):
                listener.enterTypeParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeParameter"):
                listener.exitTypeParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeParameter"):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)

    def typeParameter(self):
        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 553
                self.annotation()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 559
            self.identifier()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 17:
                self.state = 560
                self.match(JavaParser.EXTENDS)
                self.state = 561
                self.typeBound()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext, i)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def BITAND(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeBound"):
                listener.enterTypeBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeBound"):
                listener.exitTypeBound(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeBound"):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)

    def typeBound(self):
        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeBound)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 564
                    self.annotation()
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)

            self.state = 570
            self.typeType()
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 106:
                self.state = 571
                self.match(JavaParser.BITAND)
                self.state = 572
                self.typeType()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classImplements(self):
            return self.getTypedRuleContext(JavaParser.ClassImplementsContext, 0)

        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext, 0)

        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumDeclaration"):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumDeclaration"):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumDeclaration"):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def enumDeclaration(self):
        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_enumDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(JavaParser.ENUM)
            self.state = 579
            self.identifier()
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 24:
                self.state = 580
                self.classImplements()

            self.state = 583
            self.match(JavaParser.LBRACE)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 32767) != 0)
                or _la == 123
                or _la == 128
            ):
                self.state = 584
                self.enumConstants()

            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 587
                self.match(JavaParser.COMMA)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 84:
                self.state = 590
                self.enumBodyDeclarations()

            self.state = 593
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumConstants"):
                listener.enterEnumConstants(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumConstants"):
                listener.exitEnumConstants(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumConstants"):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)

    def enumConstants(self):
        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.enumConstant()
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 596
                    self.match(JavaParser.COMMA)
                    self.state = 597
                    self.enumConstant()
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumConstant"):
                listener.enterEnumConstant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumConstant"):
                listener.exitEnumConstant(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumConstant"):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)

    def enumConstant(self):
        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_enumConstant)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 603
                self.annotation()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self.identifier()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 78:
                self.state = 610
                self.arguments()

            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 80:
                self.state = 613
                self.classBody()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(
                    JavaParser.ClassBodyDeclarationContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumBodyDeclarations"):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumBodyDeclarations"):
                listener.exitEnumBodyDeclarations(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumBodyDeclarations"):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)

    def enumBodyDeclarations(self):
        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumBodyDeclarations)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(JavaParser.SEMI)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -665791937994347) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141660685729789) != 0
            ):
                self.state = 617
                self.classBodyDeclaration()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def classExtends(self):
            return self.getTypedRuleContext(JavaParser.ClassExtendsContext, 0)

        def classImplements(self):
            return self.getTypedRuleContext(JavaParser.ClassImplementsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceDeclaration"):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceDeclaration"):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceDeclaration"):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def interfaceDeclaration(self):
        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_interfaceDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(JavaParser.INTERFACE)
            self.state = 624
            self.identifier()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 625
                self.typeParameters()

            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 17:
                self.state = 628
                self.classExtends()

            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 24:
                self.state = 631
                self.classImplements()

            self.state = 634
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(
                    JavaParser.ClassBodyDeclarationContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassBody"):
                listener.enterClassBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassBody"):
                listener.exitClassBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassBody"):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)

    def classBody(self):
        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_classBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(JavaParser.LBRACE)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -665791937994347) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141660685729789) != 0
            ):
                self.state = 637
                self.classBodyDeclaration()
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.InterfaceBodyDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.InterfaceBodyDeclarationContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceBody"):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceBody"):
                listener.exitInterfaceBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceBody"):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)

    def interfaceBody(self):
        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_interfaceBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(JavaParser.LBRACE)
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -3459430305758533227) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141660685762557) != 0
            ):
                self.state = 646
                self.interfaceBodyDeclaration()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 652
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext, 0)

        def modifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassBodyDeclaration"):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassBodyDeclaration"):
                listener.exitClassBodyDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassBodyDeclaration"):
                return visitor.visitClassBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def classBodyDeclaration(self):
        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_classBodyDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 38:
                    self.state = 655
                    self.match(JavaParser.STATIC)

                self.state = 658
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 659
                        self.modifier()
                    self.state = 664
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)

                self.state = 665
                self.memberDeclaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext, 0)

        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext, 0)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeDeclarationContext, 0
            )

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberDeclaration"):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberDeclaration"):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMemberDeclaration"):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def memberDeclaration(self):
        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_memberDeclaration)
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 672
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 673
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 674
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 675
                self.enumDeclaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext, 0)

        def throws_(self):
            return self.getTypedRuleContext(JavaParser.Throws_Context, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodDeclaration"):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodDeclaration"):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodDeclaration"):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def methodDeclaration(self):
        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_methodDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 678
                self.typeParameters()

            self.state = 681
            self.typeTypeOrVoid()
            self.state = 682
            self.identifier()
            self.state = 683
            self.formalParameters()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82 or _la == 123:
                self.state = 684
                self.dims()

            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 45:
                self.state = 687
                self.throws_()

            self.state = 690
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dim(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.DimContext)
            else:
                return self.getTypedRuleContext(JavaParser.DimContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_dims

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDims"):
                listener.enterDims(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDims"):
                listener.exitDims(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDims"):
                return visitor.visitDims(self)
            else:
                return visitor.visitChildren(self)

    def dims(self):
        localctx = JavaParser.DimsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dims)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.dim()
            self.state = 696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 693
                    self.dim()
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_dim

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDim"):
                listener.enterDim(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDim"):
                listener.exitDim(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDim"):
                return visitor.visitDim(self)
            else:
                return visitor.visitChildren(self)

    def dim(self):
        localctx = JavaParser.DimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dim)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 699
                self.annotation()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self.match(JavaParser.LBRACK)
            self.state = 706
            self.match(JavaParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Throws_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_throws_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThrows_"):
                listener.enterThrows_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThrows_"):
                listener.exitThrows_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitThrows_"):
                return visitor.visitThrows_(self)
            else:
                return visitor.visitChildren(self)

    def throws_(self):
        localctx = JavaParser.Throws_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_throws_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(JavaParser.THROWS)
            self.state = 709
            self.qualifiedNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodBody"):
                listener.enterMethodBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodBody"):
                listener.exitMethodBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodBody"):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)

    def methodBody(self):
        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_methodBody)
        try:
            self.state = 713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.block()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeTypeOrVoid"):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeTypeOrVoid"):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeTypeOrVoid"):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)

    def typeTypeOrVoid(self):
        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typeTypeOrVoid)
        try:
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                37,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                65,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.typeType()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None  # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def throws_(self):
            return self.getTypedRuleContext(JavaParser.Throws_Context, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstructorDeclaration"):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstructorDeclaration"):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstructorDeclaration"):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def constructorDeclaration(self):
        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constructorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 719
                self.typeParameters()

            self.state = 722
            self.identifier()
            self.state = 723
            self.formalParameters()
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 45:
                self.state = 724
                self.throws_()

            self.state = 727
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None  # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def modifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompactConstructorDeclaration"):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompactConstructorDeclaration"):
                listener.exitCompactConstructorDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompactConstructorDeclaration"):
                return visitor.visitCompactConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def compactConstructorDeclaration(self):
        localctx = JavaParser.CompactConstructorDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 72, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 729
                    self.modifier()
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

            self.state = 735
            self.identifier()
            self.state = 736
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldDeclaration"):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldDeclaration"):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldDeclaration"):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def fieldDeclaration(self):
        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.typeType()
            self.state = 739
            self.variableDeclarators()
            self.state = 740
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.InterfaceMemberDeclarationContext, 0
            )

        def modifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceBodyDeclaration"):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceBodyDeclaration"):
                listener.exitInterfaceBodyDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceBodyDeclaration"):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def interfaceBodyDeclaration(self):
        localctx = JavaParser.InterfaceBodyDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 76, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                3,
                5,
                8,
                9,
                12,
                14,
                16,
                18,
                20,
                27,
                28,
                29,
                30,
                33,
                34,
                35,
                37,
                38,
                39,
                42,
                46,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                65,
                66,
                89,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 742
                        self.modifier()
                    self.state = 747
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)

                self.state = 748
                self.interfaceMemberDeclaration()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext, 0)

        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.InterfaceMethodDeclarationContext, 0
            )

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeDeclarationContext, 0
            )

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceMemberDeclaration"):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceMemberDeclaration"):
                listener.exitInterfaceMemberDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceMemberDeclaration"):
                return visitor.visitInterfaceMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def interfaceMemberDeclaration(self):
        localctx = JavaParser.InterfaceMemberDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 78, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 755
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 756
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 757
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 758
                self.enumDeclaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstDeclaration"):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstDeclaration"):
                listener.exitConstDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstDeclaration"):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def constDeclaration(self):
        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.typeType()
            self.state = 762
            self.variableDeclarators()
            self.state = 763
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceMethodModifier"):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceMethodModifier"):
                listener.exitInterfaceMethodModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceMethodModifier"):
                return visitor.visitInterfaceMethodModifier(self)
            else:
                return visitor.visitChildren(self)

    def interfaceMethodModifier(self):
        localctx = JavaParser.InterfaceMethodModifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 82, self.RULE_interfaceMethodModifier)
        try:
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 768
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 769
                self.match(JavaParser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 770
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext, 0)

        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext, 0)

        def interfaceMethodModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.InterfaceMethodModifierContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.InterfaceMethodModifierContext, i
                )

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext, 0)

        def throws_(self):
            return self.getTypedRuleContext(JavaParser.Throws_Context, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterfaceMethodDeclaration"):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterfaceMethodDeclaration"):
                listener.exitInterfaceMethodDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterfaceMethodDeclaration"):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def interfaceMethodDeclaration(self):
        localctx = JavaParser.InterfaceMethodDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 84, self.RULE_interfaceMethodDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 773
                    self.interfaceMethodModifier()
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)

            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 779
                self.typeParameters()

            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 782
                    self.annotation()
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

            self.state = 788
            self.typeTypeOrVoid()
            self.state = 789
            self.identifier()
            self.state = 790
            self.formalParameters()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82 or _la == 123:
                self.state = 791
                self.dims()

            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 45:
                self.state = 794
                self.throws_()

            self.state = 797
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarators"):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarators"):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclarators"):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclarators(self):
        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_variableDeclarators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.variableDeclarator()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 800
                self.match(JavaParser.COMMA)
                self.state = 801
                self.variableDeclarator()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarator"):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarator"):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclarator"):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclarator(self):
        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableDeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.variableDeclaratorId()
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 87:
                self.state = 808
                self.match(JavaParser.ASSIGN)
                self.state = 809
                self.variableInitializer()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclaratorId"):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclaratorId"):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclaratorId"):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclaratorId(self):
        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_variableDeclaratorId)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.identifier()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 82 or _la == 123:
                self.state = 813
                self.dims()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableInitializer"):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableInitializer"):
                listener.exitVariableInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableInitializer"):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)

    def variableInitializer(self):
        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_variableInitializer)
        try:
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.arrayInitializer()
                pass
            elif token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                31,
                37,
                40,
                41,
                43,
                48,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                89,
                90,
                91,
                100,
                101,
                102,
                103,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(
                    JavaParser.VariableInitializerContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayInitializer"):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayInitializer"):
                listener.exitArrayInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayInitializer"):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)

    def arrayInitializer(self):
        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arrayInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(JavaParser.LBRACE)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 3)) & ~0x3F) == 0
                and ((1 << (_la - 3)) & 9223127275610966053) != 0
            ) or (
                (((_la - 67)) & ~0x3F) == 0
                and ((1 << (_la - 67)) & 2377900732130013183) != 0
            ):
                self.state = 821
                self.variableInitializer()
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 822
                        self.match(JavaParser.COMMA)
                        self.state = 823
                        self.variableInitializer()
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)

                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 829
                    self.match(JavaParser.COMMA)

            self.state = 834
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coit(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CoitContext)
            else:
                return self.getTypedRuleContext(JavaParser.CoitContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassOrInterfaceType"):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassOrInterfaceType"):
                listener.exitClassOrInterfaceType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassOrInterfaceType"):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)

    def classOrInterfaceType(self):
        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 836
                    self.coit()
                    self.state = 837
                    self.match(JavaParser.DOT)
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

            self.state = 844
            self.coit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CoitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaParser.TypeIdentifierContext, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_coit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoit"):
                listener.enterCoit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoit"):
                listener.exitCoit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoit"):
                return visitor.visitCoit(self)
            else:
                return visitor.visitChildren(self)

    def coit(self):
        localctx = JavaParser.CoitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_coit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.typeIdentifier()
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.state = 847
                self.typeArguments()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeArgument"):
                listener.enterTypeArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeArgument"):
                listener.exitTypeArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeArgument"):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)

    def typeArgument(self):
        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typeArgument)
        self._la = 0  # Token type
        try:
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 123:
                    self.state = 851
                    self.annotation()
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 857
                self.match(JavaParser.QUESTION)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 17 or _la == 40:
                    self.state = 858
                    _la = self._input.LA(1)
                    if not (_la == 17 or _la == 40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 859
                    self.typeType()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedNameList"):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedNameList"):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQualifiedNameList"):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)

    def qualifiedNameList(self):
        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_qualifiedNameList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.qualifiedName()
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 865
                self.match(JavaParser.COMMA)
                self.state = 866
                self.qualifiedName()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext, 0)

        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormalParameters"):
                listener.enterFormalParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormalParameters"):
                listener.exitFormalParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormalParameters"):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)

    def formalParameters(self):
        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_formalParameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(JavaParser.LPAREN)
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        (((_la - 3)) & ~0x3F) == 0
                        and ((1 << (_la - 3)) & 8358399450686818341) != 0
                    )
                    or _la == 123
                    or _la == 128
                ):
                    self.state = 873
                    self.receiverParameter()

                pass

            elif la_ == 2:
                self.state = 876
                self.receiverParameter()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 877
                    self.match(JavaParser.COMMA)
                    self.state = 878
                    self.formalParameterList()

                pass

            elif la_ == 3:
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        (((_la - 3)) & ~0x3F) == 0
                        and ((1 << (_la - 3)) & 8358399450686851109) != 0
                    )
                    or _la == 123
                    or _la == 128
                ):
                    self.state = 881
                    self.formalParameterList()

                pass

            self.state = 886
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReceiverParameter"):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReceiverParameter"):
                listener.exitReceiverParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReceiverParameter"):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)

    def receiverParameter(self):
        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_receiverParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.typeType()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 32767) != 0
            ) or _la == 128:
                self.state = 889
                self.identifier()
                self.state = 890
                self.match(JavaParser.DOT)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 897
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormalParameterList"):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormalParameterList"):
                listener.exitFormalParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormalParameterList"):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)

    def formalParameterList(self):
        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_formalParameterList)
        self._la = 0  # Token type
        try:
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.formalParameter()
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 900
                        self.match(JavaParser.COMMA)
                        self.state = 901
                        self.formalParameter()
                    self.state = 906
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 85:
                    self.state = 907
                    self.match(JavaParser.COMMA)
                    self.state = 908
                    self.lastFormalParameter()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.lastFormalParameter()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormalParameter"):
                listener.enterFormalParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormalParameter"):
                listener.exitFormalParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormalParameter"):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)

    def formalParameter(self):
        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 914
                    self.variableModifier()
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)

            self.state = 920
            self.typeType()
            self.state = 921
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLastFormalParameter"):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLastFormalParameter"):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLastFormalParameter"):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)

    def lastFormalParameter(self):
        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lastFormalParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 923
                    self.variableModifier()
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

            self.state = 929
            self.typeType()
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 930
                self.annotation()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 936
            self.match(JavaParser.ELLIPSIS)
            self.state = 937
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(
                    JavaParser.LambdaLVTIParameterContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdaLVTIList"):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdaLVTIList"):
                listener.exitLambdaLVTIList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdaLVTIList"):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)

    def lambdaLVTIList(self):
        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_lambdaLVTIList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.lambdaLVTIParameter()
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 940
                self.match(JavaParser.COMMA)
                self.state = 941
                self.lambdaLVTIParameter()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdaLVTIParameter"):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdaLVTIParameter"):
                listener.exitLambdaLVTIParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdaLVTIParameter"):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)

    def lambdaLVTIParameter(self):
        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_lambdaLVTIParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 18 or _la == 123:
                self.state = 947
                self.variableModifier()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self.match(JavaParser.VAR)
            self.state = 954
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedName"):
                listener.enterQualifiedName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedName"):
                listener.exitQualifiedName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQualifiedName"):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)

    def qualifiedName(self):
        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.identifier()
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 957
                    self.match(JavaParser.DOT)
                    self.state = 958
                    self.identifier()
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext, 0)

        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext, 0)

        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)

    def literal(self):
        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.integerLiteral()
                pass
            elif token in [71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.floatLiteral()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 966
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 967
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 968
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 969
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 7)
                self.state = 970
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntegerLiteral"):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)

    def integerLiteral(self):
        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_integerLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not (((((_la - 67)) & ~0x3F) == 0 and ((1 << (_la - 67)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFloatLiteral"):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFloatLiteral"):
                listener.exitFloatLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFloatLiteral"):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)

    def floatLiteral(self):
        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_floatLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not (_la == 71 or _la == 72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotation"):
                listener.enterAnnotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotation"):
                listener.exitAnnotation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotation"):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)

    def annotation(self):
        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(JavaParser.AT)
            self.state = 978
            self.qualifiedName()
            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 78:
                self.state = 979
                self.match(JavaParser.LPAREN)
                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 980
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 981
                    self.elementValue()

                self.state = 984
                self.match(JavaParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementValuePairs"):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementValuePairs"):
                listener.exitElementValuePairs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementValuePairs"):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)

    def elementValuePairs(self):
        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elementValuePairs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.elementValuePair()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 988
                self.match(JavaParser.COMMA)
                self.state = 989
                self.elementValuePair()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementValuePair"):
                listener.enterElementValuePair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementValuePair"):
                listener.exitElementValuePair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementValuePair"):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)

    def elementValuePair(self):
        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.identifier()
            self.state = 996
            self.match(JavaParser.ASSIGN)
            self.state = 997
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext, 0)

        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(
                JavaParser.ElementValueArrayInitializerContext, 0
            )

        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementValue"):
                listener.enterElementValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementValue"):
                listener.exitElementValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementValue"):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)

    def elementValue(self):
        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_elementValue)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.elementValueArrayInitializer()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementValueArrayInitializer"):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementValueArrayInitializer"):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementValueArrayInitializer"):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)

    def elementValueArrayInitializer(self):
        localctx = JavaParser.ElementValueArrayInitializerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 134, self.RULE_elementValueArrayInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(JavaParser.LBRACE)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 3)) & ~0x3F) == 0
                and ((1 << (_la - 3)) & 9223127275610966053) != 0
            ) or (
                (((_la - 67)) & ~0x3F) == 0
                and ((1 << (_la - 67)) & 2377900732130013183) != 0
            ):
                self.state = 1005
                self.elementValue()
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1006
                        self.match(JavaParser.COMMA)
                        self.state = 1007
                        self.elementValue()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)

            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 1015
                self.match(JavaParser.COMMA)

            self.state = 1018
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationTypeDeclaration"):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationTypeDeclaration"):
                listener.exitAnnotationTypeDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationTypeDeclaration"):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def annotationTypeDeclaration(self):
        localctx = JavaParser.AnnotationTypeDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 136, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(JavaParser.AT)
            self.state = 1021
            self.match(JavaParser.INTERFACE)
            self.state = 1022
            self.identifier()
            self.state = 1023
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.AnnotationTypeElementDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.AnnotationTypeElementDeclarationContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationTypeBody"):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationTypeBody"):
                listener.exitAnnotationTypeBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationTypeBody"):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)

    def annotationTypeBody(self):
        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotationTypeBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(JavaParser.LBRACE)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -3459571043246890603) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141660702539773) != 0
            ):
                self.state = 1026
                self.annotationTypeElementDeclaration()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1032
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeElementRestContext, 0
            )

        def modifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext, i)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationTypeElementDeclaration"):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationTypeElementDeclaration"):
                listener.exitAnnotationTypeElementDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationTypeElementDeclaration"):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def annotationTypeElementDeclaration(self):
        localctx = JavaParser.AnnotationTypeElementDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 140, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                1,
                3,
                5,
                8,
                9,
                14,
                16,
                18,
                20,
                27,
                28,
                29,
                30,
                33,
                34,
                35,
                37,
                38,
                39,
                42,
                46,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                65,
                66,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1034
                        self.modifier()
                    self.state = 1039
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)

                self.state = 1040
                self.annotationTypeElementRest()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationConstantDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationConstantDeclarationContext, 0
            )

        def annotationMethodDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationMethodDeclarationContext, 0
            )

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext, 0)

        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.AnnotationTypeDeclarationContext, 0
            )

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationTypeElementRest"):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationTypeElementRest"):
                listener.exitAnnotationTypeElementRest(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationTypeElementRest"):
                return visitor.visitAnnotationTypeElementRest(self)
            else:
                return visitor.visitChildren(self)

    def annotationTypeElementRest(self):
        localctx = JavaParser.AnnotationTypeElementRestContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 142, self.RULE_annotationTypeElementRest)
        try:
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.annotationConstantDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.annotationMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.classDeclaration()
                self.state = 1048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 1047
                    self.match(JavaParser.SEMI)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1050
                self.interfaceDeclaration()
                self.state = 1052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
                if la_ == 1:
                    self.state = 1051
                    self.match(JavaParser.SEMI)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1054
                self.enumDeclaration()
                self.state = 1056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
                if la_ == 1:
                    self.state = 1055
                    self.match(JavaParser.SEMI)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1058
                self.annotationTypeDeclaration()
                self.state = 1060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 116, self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.match(JavaParser.SEMI)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1062
                self.recordDeclaration()
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
                if la_ == 1:
                    self.state = 1063
                    self.match(JavaParser.SEMI)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationConstantDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationConstantDeclaration"):
                listener.enterAnnotationConstantDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationConstantDeclaration"):
                listener.exitAnnotationConstantDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationConstantDeclaration"):
                return visitor.visitAnnotationConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def annotationConstantDeclaration(self):
        localctx = JavaParser.AnnotationConstantDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 144, self.RULE_annotationConstantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.typeType()
            self.state = 1069
            self.variableDeclarators()
            self.state = 1070
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotationMethodDeclaration"):
                listener.enterAnnotationMethodDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotationMethodDeclaration"):
                listener.exitAnnotationMethodDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnnotationMethodDeclaration"):
                return visitor.visitAnnotationMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def annotationMethodDeclaration(self):
        localctx = JavaParser.AnnotationMethodDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 146, self.RULE_annotationMethodDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.typeType()
            self.state = 1073
            self.identifier()
            self.state = 1074
            self.match(JavaParser.LPAREN)
            self.state = 1075
            self.match(JavaParser.RPAREN)
            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 12:
                self.state = 1076
                self.defaultValue()

            self.state = 1079
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultValue"):
                listener.enterDefaultValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultValue"):
                listener.exitDefaultValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefaultValue"):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)

    def defaultValue(self):
        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(JavaParser.DEFAULT)
            self.state = 1082
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def moduleBody(self):
            return self.getTypedRuleContext(JavaParser.ModuleBodyContext, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuleDeclaration"):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuleDeclaration"):
                listener.exitModuleDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuleDeclaration"):
                return visitor.visitModuleDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def moduleDeclaration(self):
        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_moduleDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 52:
                self.state = 1084
                self.match(JavaParser.OPEN)

            self.state = 1087
            self.match(JavaParser.MODULE)
            self.state = 1088
            self.qualifiedName()
            self.state = 1089
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def moduleDirective(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuleBody"):
                listener.enterModuleBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuleBody"):
                listener.exitModuleBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuleBody"):
                return visitor.visitModuleBody(self)
            else:
                return visitor.visitChildren(self)

    def moduleBody(self):
        localctx = JavaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_moduleBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(JavaParser.LBRACE)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 495395959010754560) != 0:
                self.state = 1092
                self.moduleDirective()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1098
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext, i)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext, i)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuleDirective"):
                listener.enterModuleDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuleDirective"):
                listener.exitModuleDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuleDirective"):
                return visitor.visitModuleDirective(self)
            else:
                return visitor.visitChildren(self)

    def moduleDirective(self):
        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_moduleDirective)
        self._la = 0  # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.match(JavaParser.REQUIRES)
                self.state = 1104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 122, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1101
                        self.requiresModifier()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 122, self._ctx)

                self.state = 1107
                self.qualifiedName()
                self.state = 1108
                self.match(JavaParser.SEMI)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1110
                self.match(JavaParser.EXPORTS)
                self.state = 1111
                self.qualifiedName()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 56:
                    self.state = 1112
                    self.match(JavaParser.TO)
                    self.state = 1113
                    self.qualifiedName()

                self.state = 1116
                self.match(JavaParser.SEMI)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.match(JavaParser.OPENS)
                self.state = 1119
                self.qualifiedName()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 56:
                    self.state = 1120
                    self.match(JavaParser.TO)
                    self.state = 1121
                    self.qualifiedName()

                self.state = 1124
                self.match(JavaParser.SEMI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1126
                self.match(JavaParser.USES)
                self.state = 1127
                self.qualifiedName()
                self.state = 1128
                self.match(JavaParser.SEMI)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1130
                self.match(JavaParser.PROVIDES)
                self.state = 1131
                self.qualifiedName()
                self.state = 1132
                self.match(JavaParser.WITH)
                self.state = 1133
                self.qualifiedName()
                self.state = 1134
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequiresModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRequiresModifier"):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRequiresModifier"):
                listener.exitRequiresModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRequiresModifier"):
                return visitor.visitRequiresModifier(self)
            else:
                return visitor.visitChildren(self)

    def requiresModifier(self):
        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_requiresModifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            _la = self._input.LA(1)
            if not (_la == 38 or _la == 60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext, 0)

        def classImplements(self):
            return self.getTypedRuleContext(JavaParser.ClassImplementsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordDeclaration"):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordDeclaration"):
                listener.exitRecordDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordDeclaration"):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def recordDeclaration(self):
        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_recordDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(JavaParser.RECORD)
            self.state = 1141
            self.identifier()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 1142
                self.typeParameters()

            self.state = 1145
            self.match(JavaParser.LPAREN)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    (((_la - 3)) & ~0x3F) == 0
                    and ((1 << (_la - 3)) & 8358399450686818341) != 0
                )
                or _la == 123
                or _la == 128
            ):
                self.state = 1146
                self.recordComponentList()

            self.state = 1149
            self.match(JavaParser.RPAREN)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 24:
                self.state = 1150
                self.classImplements()

            self.state = 1153
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordComponentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordComponentList"):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordComponentList"):
                listener.exitRecordComponentList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordComponentList"):
                return visitor.visitRecordComponentList(self)
            else:
                return visitor.visitChildren(self)

    def recordComponentList(self):
        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_recordComponentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.recordComponent()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 1156
                self.match(JavaParser.COMMA)
                self.state = 1157
                self.recordComponent()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordComponentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordComponent"):
                listener.enterRecordComponent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordComponent"):
                listener.exitRecordComponent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordComponent"):
                return visitor.visitRecordComponent(self)
            else:
                return visitor.visitChildren(self)

    def recordComponent(self):
        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.typeType()
            self.state = 1164
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def recordBodyDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.RecordBodyDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.RecordBodyDeclarationContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordBody"):
                listener.enterRecordBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordBody"):
                listener.exitRecordBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordBody"):
                return visitor.visitRecordBody(self)
            else:
                return visitor.visitChildren(self)

    def recordBody(self):
        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_recordBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(JavaParser.LBRACE)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -665791937994347) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141660685729789) != 0
            ):
                self.state = 1167
                self.recordBodyDeclaration()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1173
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordBodyDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext, 0)

        def compactConstructorDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.CompactConstructorDeclarationContext, 0
            )

        def getRuleIndex(self):
            return JavaParser.RULE_recordBodyDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordBodyDeclaration"):
                listener.enterRecordBodyDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordBodyDeclaration"):
                listener.exitRecordBodyDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordBodyDeclaration"):
                return visitor.visitRecordBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def recordBodyDeclaration(self):
        localctx = JavaParser.RecordBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_recordBodyDeclaration)
        try:
            self.state = 1177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self.classBodyDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.compactConstructorDeclaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):
        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(JavaParser.LBRACE)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and ((1 << (_la - 1)) & -334254282492513) != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and ((1 << (_la - 65)) & -8935141145188974593) != 0
            ):
                self.state = 1180
                self.blockStatement()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1186
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.LocalVariableDeclarationContext, 0
            )

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlockStatement"):
                listener.enterBlockStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlockStatement"):
                listener.exitBlockStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlockStatement"):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)

    def blockStatement(self):
        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_blockStatement)
        try:
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1188
                self.localVariableDeclaration()
                self.state = 1189
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1191
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1192
                self.statement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocalVariableDeclaration"):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocalVariableDeclaration"):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocalVariableDeclaration"):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def localVariableDeclaration(self):
        localctx = JavaParser.LocalVariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 172, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1195
                    self.variableModifier()
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)

            self.state = 1209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 1201
                self.match(JavaParser.VAR)
                self.state = 1202
                self.identifier()
                self.state = 1203
                self.match(JavaParser.ASSIGN)
                self.state = 1204
                self.expression()
                pass
            elif token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                37,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                65,
                123,
                128,
            ]:
                self.state = 1206
                self.typeType()
                self.state = 1207
                self.variableDeclarators()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):
        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_identifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            _la = self._input.LA(1)
            if not (
                ((((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 32767) != 0)
                or _la == 128
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeIdentifier"):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeIdentifier"):
                listener.exitTypeIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeIdentifier"):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def typeIdentifier(self):
        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_typeIdentifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            _la = self._input.LA(1)
            if not (
                ((((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 29695) != 0)
                or _la == 128
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext, 0)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext, 0)

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext, 0)

        def classOrInterfaceModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.ClassOrInterfaceModifierContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.ClassOrInterfaceModifierContext, i
                )

        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocalTypeDeclaration"):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocalTypeDeclaration"):
                listener.exitLocalTypeDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocalTypeDeclaration"):
                return visitor.visitLocalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def localTypeDeclaration(self):
        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_localTypeDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3F) == 0 and ((1 << _la) & 884763525122) != 0) or (
                (((_la - 64)) & ~0x3F) == 0
                and ((1 << (_la - 64)) & 576460752303423493) != 0
            ):
                self.state = 1215
                self.classOrInterfaceModifier()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1221
                self.classDeclaration()
                pass
            elif token in [28]:
                self.state = 1222
                self.interfaceDeclaration()
                pass
            elif token in [63]:
                self.state = 1223
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None  # BlockContext
            self.forUpdate = None  # ExpressionListContext
            self.statementExpression = None  # ExpressionContext
            self.identifierLabel = None  # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext, i)

        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext, 0)

        def catchClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext, i)

        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext, 0)

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(JavaParser.SwitchBlockContext, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):
        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 153, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1227
                self.match(JavaParser.ASSERT)
                self.state = 1228
                self.expression()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 93:
                    self.state = 1229
                    self.match(JavaParser.COLON)
                    self.state = 1230
                    self.expression()

                self.state = 1233
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1235
                self.match(JavaParser.IF)
                self.state = 1236
                self.parExpression()
                self.state = 1237
                self.statement()
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.match(JavaParser.ELSE)
                    self.state = 1239
                    self.statement()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1242
                self.match(JavaParser.FOR)
                self.state = 1243
                self.match(JavaParser.LPAREN)
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 3)) & ~0x3F) == 0
                    and ((1 << (_la - 3)) & 9223127275610998821) != 0
                ) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2377900732130004991) != 0
                ):
                    self.state = 1244
                    self.forInit()

                self.state = 1247
                self.match(JavaParser.SEMI)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 3)) & ~0x3F) == 0
                    and ((1 << (_la - 3)) & 9223127275610966053) != 0
                ) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2377900732130004991) != 0
                ):
                    self.state = 1248
                    self.expression()

                self.state = 1251
                self.match(JavaParser.SEMI)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 3)) & ~0x3F) == 0
                    and ((1 << (_la - 3)) & 9223127275610966053) != 0
                ) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2377900732130004991) != 0
                ):
                    self.state = 1252
                    localctx.forUpdate = self.expressionList()

                self.state = 1255
                self.match(JavaParser.RPAREN)
                self.state = 1256
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1257
                self.match(JavaParser.FOR)
                self.state = 1258
                self.match(JavaParser.LPAREN)
                self.state = 1262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1259
                        self.variableModifier()
                    self.state = 1264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

                self.state = 1267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    3,
                    5,
                    8,
                    14,
                    20,
                    27,
                    29,
                    37,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    63,
                    64,
                    65,
                    123,
                    128,
                ]:
                    self.state = 1265
                    self.typeType()
                    pass
                elif token in [61]:
                    self.state = 1266
                    self.match(JavaParser.VAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1269
                self.variableDeclaratorId()
                self.state = 1270
                self.match(JavaParser.COLON)
                self.state = 1271
                self.expression()
                self.state = 1272
                self.match(JavaParser.RPAREN)
                self.state = 1273
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1275
                self.match(JavaParser.WHILE)
                self.state = 1276
                self.parExpression()
                self.state = 1277
                self.statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1279
                self.match(JavaParser.DO)
                self.state = 1280
                self.statement()
                self.state = 1281
                self.match(JavaParser.WHILE)
                self.state = 1282
                self.parExpression()
                self.state = 1283
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1285
                self.match(JavaParser.TRY)
                self.state = 1286
                self.block()
                self.state = 1296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1287
                        self.catchClause()
                        self.state = 1290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == 7):
                            break

                    self.state = 1293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 19:
                        self.state = 1292
                        self.finallyBlock()

                    pass
                elif token in [19]:
                    self.state = 1295
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1298
                self.match(JavaParser.TRY)
                self.state = 1299
                self.resourceSpecification()
                self.state = 1300
                self.block()
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 7:
                    self.state = 1301
                    self.catchClause()
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 19:
                    self.state = 1307
                    self.finallyBlock()

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1310
                self.match(JavaParser.SWITCH)
                self.state = 1311
                self.parExpression()
                self.state = 1312
                self.switchBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1314
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1315
                self.parExpression()
                self.state = 1316
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1318
                self.match(JavaParser.RETURN)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 3)) & ~0x3F) == 0
                    and ((1 << (_la - 3)) & 9223127275610966053) != 0
                ) or (
                    (((_la - 67)) & ~0x3F) == 0
                    and ((1 << (_la - 67)) & 2377900732130004991) != 0
                ):
                    self.state = 1319
                    self.expression()

                self.state = 1322
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1323
                self.match(JavaParser.THROW)
                self.state = 1324
                self.expression()
                self.state = 1325
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1327
                self.match(JavaParser.BREAK)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 32767) != 0
                ) or _la == 128:
                    self.state = 1328
                    self.identifier()

                self.state = 1331
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1332
                self.match(JavaParser.CONTINUE)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 51)) & ~0x3F) == 0 and ((1 << (_la - 51)) & 32767) != 0
                ) or _la == 128:
                    self.state = 1333
                    self.identifier()

                self.state = 1336
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1337
                self.match(JavaParser.YIELD)
                self.state = 1338
                self.expression()
                self.state = 1339
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1341
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1342
                localctx.statementExpression = self.expression()
                self.state = 1343
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1345
                localctx.identifierLabel = self.identifier()
                self.state = 1346
                self.match(JavaParser.COLON)
                self.state = 1347
                self.statement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    JavaParser.SwitchBlockStatementGroupContext
                )
            else:
                return self.getTypedRuleContext(
                    JavaParser.SwitchBlockStatementGroupContext, i
                )

        def switchLabel(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_switchBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchBlock"):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchBlock"):
                listener.exitSwitchBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchBlock"):
                return visitor.visitSwitchBlock(self)
            else:
                return visitor.visitChildren(self)

    def switchBlock(self):
        localctx = JavaParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_switchBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(JavaParser.LBRACE)
            self.state = 1355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1352
                    self.switchBlockStatementGroup()
                self.state = 1357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 6 or _la == 12:
                self.state = 1358
                self.switchLabel()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1364
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatchClause"):
                listener.enterCatchClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatchClause"):
                listener.exitCatchClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatchClause"):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)

    def catchClause(self):
        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_catchClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(JavaParser.CATCH)
            self.state = 1367
            self.match(JavaParser.LPAREN)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 18 or _la == 123:
                self.state = 1368
                self.variableModifier()
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1374
            self.catchType()
            self.state = 1375
            self.identifier()
            self.state = 1376
            self.match(JavaParser.RPAREN)
            self.state = 1377
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext, i)

        def BITOR(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatchType"):
                listener.enterCatchType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatchType"):
                listener.exitCatchType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatchType"):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)

    def catchType(self):
        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_catchType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.qualifiedName()
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 107:
                self.state = 1380
                self.match(JavaParser.BITOR)
                self.state = 1381
                self.qualifiedName()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFinallyBlock"):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFinallyBlock"):
                listener.exitFinallyBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFinallyBlock"):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)

    def finallyBlock(self):
        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(JavaParser.FINALLY)
            self.state = 1388
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResourceSpecification"):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResourceSpecification"):
                listener.exitResourceSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResourceSpecification"):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)

    def resourceSpecification(self):
        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_resourceSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(JavaParser.LPAREN)
            self.state = 1391
            self.resources()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 84:
                self.state = 1392
                self.match(JavaParser.SEMI)

            self.state = 1395
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourcesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResources"):
                listener.enterResources(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResources"):
                listener.exitResources(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResources"):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)

    def resources(self):
        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.resource()
            self.state = 1402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1398
                    self.match(JavaParser.SEMI)
                    self.state = 1399
                    self.resource()
                self.state = 1404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResource"):
                listener.enterResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResource"):
                listener.exitResource(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResource"):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)

    def resource(self):
        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_resource)
        self._la = 0  # Token type
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 18 or _la == 123:
                    self.state = 1405
                    self.variableModifier()
                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1416
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 128]:
                    self.state = 1411
                    self.classOrInterfaceType()
                    self.state = 1412
                    self.variableDeclaratorId()
                    pass
                elif token in [61]:
                    self.state = 1414
                    self.match(JavaParser.VAR)
                    self.state = 1415
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1418
                self.match(JavaParser.ASSIGN)
                self.state = 1419
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1421
                self.qualifiedName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext, i)

        def blockStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchBlockStatementGroup"):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchBlockStatementGroup"):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchBlockStatementGroup"):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)

    def switchBlockStatementGroup(self):
        localctx = JavaParser.SwitchBlockStatementGroupContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 196, self.RULE_switchBlockStatementGroup)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1424
                self.switchLabel()
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 6 or _la == 12):
                    break

            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1429
                self.blockStatement()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 1)) & ~0x3F) == 0
                        and ((1 << (_la - 1)) & -334254282492513) != 0
                    )
                    or (
                        (((_la - 65)) & ~0x3F) == 0
                        and ((1 << (_la - 65)) & -8935141145188974593) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None  # ExpressionContext
            self.enumConstantName = None  # Token
            self.varName = None  # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchLabel"):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchLabel"):
                listener.exitSwitchLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchLabel"):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)

    def switchLabel(self):
        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_switchLabel)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(JavaParser.CASE)
                self.state = 1440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
                if la_ == 1:
                    self.state = 1435
                    localctx.constantExpression = self.expression()
                    pass

                elif la_ == 2:
                    self.state = 1436
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1437
                    self.typeType()
                    self.state = 1438
                    localctx.varName = self.identifier()
                    pass

                self.state = 1442
                self.match(JavaParser.COLON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1443
                self.match(JavaParser.DEFAULT)
                self.state = 1444
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(
                JavaParser.LocalVariableDeclarationContext, 0
            )

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForInit"):
                listener.enterForInit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForInit"):
                listener.exitForInit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForInit"):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)

    def forInit(self):
        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_forInit)
        try:
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1447
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.expressionList()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParExpression"):
                listener.enterParExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParExpression"):
                listener.exitParExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParExpression"):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)

    def parExpression(self):
        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(JavaParser.LPAREN)
            self.state = 1452
            self.expression()
            self.state = 1453
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionList"):
                listener.enterExpressionList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionList"):
                listener.exitExpressionList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionList"):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)

    def expressionList(self):
        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_expressionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.expression()
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 1456
                self.match(JavaParser.COMMA)
                self.state = 1457
                self.expression()
                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodCall"):
                listener.enterMethodCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodCall"):
                listener.exitMethodCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodCall"):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)

    def methodCall(self):
        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                128,
            ]:
                self.state = 1463
                self.identifier()
                pass
            elif token in [43]:
                self.state = 1464
                self.match(JavaParser.THIS)
                pass
            elif token in [40]:
                self.state = 1465
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1468
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.postfix = None  # Token

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext, 0)

        def postfixExpression(self):
            return self.getTypedRuleContext(JavaParser.PostfixExpressionContext, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_postfixExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixExpression"):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixExpression"):
                listener.exitPostfixExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostfixExpression"):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)

    def postfixExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 208
        self.enterRecursionRule(localctx, 208, self.RULE_postfixExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.switchExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 170, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.PostfixExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_postfixExpression
                    )
                    self.state = 1473
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1474
                    localctx.postfix = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == 100 or _la == 101):
                        localctx.postfix = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 1479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 170, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrefixExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None  # Token

        def prefixExpression(self):
            return self.getTypedRuleContext(JavaParser.PrefixExpressionContext, 0)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def postfixExpression(self):
            return self.getTypedRuleContext(JavaParser.PostfixExpressionContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_prefixExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrefixExpression"):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrefixExpression"):
                listener.exitPrefixExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrefixExpression"):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)

    def prefixExpression(self):
        localctx = JavaParser.PrefixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_prefixExpression)
        self._la = 0  # Token type
        try:
            self.state = 1483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90, 91, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1480
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    ((((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 15363) != 0)
                ):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1481
                self.prefixExpression()
                pass
            elif token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                37,
                40,
                41,
                43,
                48,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                89,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1482
                self.postfixExpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def typeType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext, i)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(JavaParser.TypeExpressionContext, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def BITAND(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext, 0)

        def prefixExpression(self):
            return self.getTypedRuleContext(JavaParser.PrefixExpressionContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeExpression"):
                listener.enterTypeExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeExpression"):
                listener.exitTypeExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeExpression"):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)

    def typeExpression(self):
        localctx = JavaParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_typeExpression)
        self._la = 0  # Token type
        try:
            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.match(JavaParser.LPAREN)
                self.state = 1489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1486
                        self.annotation()
                    self.state = 1491
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)

                self.state = 1492
                self.typeType()
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 106:
                    self.state = 1493
                    self.match(JavaParser.BITAND)
                    self.state = 1494
                    self.typeType()
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1500
                self.match(JavaParser.RPAREN)
                self.state = 1501
                self.typeExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1503
                self.match(JavaParser.NEW)
                self.state = 1504
                self.creator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1505
                self.prefixExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def typeExpression(self):
            return self.getTypedRuleContext(JavaParser.TypeExpressionContext, 0)

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(
                JavaParser.MultiplicativeExpressionContext, 0
            )

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_multiplicativeExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeExpression"):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeExpression"):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultiplicativeExpression"):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)

    def multiplicativeExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.MultiplicativeExpressionContext(
            self, self._ctx, _parentState
        )
        _prevctx = localctx
        _startState = 214
        self.enterRecursionRule(localctx, 214, self.RULE_multiplicativeExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.typeExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.MultiplicativeExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_multiplicativeExpression
                    )
                    self.state = 1511
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1512
                    localctx.bop = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 104)) & ~0x3F) == 0
                            and ((1 << (_la - 104)) & 35) != 0
                        )
                    ):
                        localctx.bop = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1513
                    self.typeExpression()
                self.state = 1518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(
                JavaParser.MultiplicativeExpressionContext, 0
            )

        def additiveExpression(self):
            return self.getTypedRuleContext(JavaParser.AdditiveExpressionContext, 0)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_additiveExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveExpression"):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveExpression"):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdditiveExpression"):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)

    def additiveExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 216
        self.enterRecursionRule(localctx, 216, self.RULE_additiveExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.AdditiveExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_additiveExpression
                    )
                    self.state = 1522
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1523
                    localctx.bop = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == 102 or _la == 103):
                        localctx.bop = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1524
                    self.multiplicativeExpression(0)
                self.state = 1529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(JavaParser.AdditiveExpressionContext, 0)

        def shiftExpression(self):
            return self.getTypedRuleContext(JavaParser.ShiftExpressionContext, 0)

        def LT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_shiftExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftExpression"):
                listener.enterShiftExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftExpression"):
                listener.exitShiftExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShiftExpression"):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)

    def shiftExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.ShiftExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_shiftExpression
                    )
                    self.state = 1533
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1541
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
                    if la_ == 1:
                        self.state = 1534
                        self.match(JavaParser.LT)
                        self.state = 1535
                        self.match(JavaParser.LT)
                        pass

                    elif la_ == 2:
                        self.state = 1536
                        self.match(JavaParser.GT)
                        self.state = 1537
                        self.match(JavaParser.GT)
                        self.state = 1538
                        self.match(JavaParser.GT)
                        pass

                    elif la_ == 3:
                        self.state = 1539
                        self.match(JavaParser.GT)
                        self.state = 1540
                        self.match(JavaParser.GT)
                        pass

                    self.state = 1543
                    self.additiveExpression(0)
                self.state = 1548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def shiftExpression(self):
            return self.getTypedRuleContext(JavaParser.ShiftExpressionContext, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(JavaParser.RelationalExpressionContext, 0)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_relationalExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalExpression"):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalExpression"):
                listener.exitRelationalExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalExpression"):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)

    def relationalExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_relationalExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1561
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.RelationalExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_relationalExpression
                        )
                        self.state = 1552
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1553
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 88)) & ~0x3F) == 0
                                and ((1 << (_la - 88)) & 387) != 0
                            )
                        ):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1554
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.RelationalExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_relationalExpression
                        )
                        self.state = 1555
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1556
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1559
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
                        if la_ == 1:
                            self.state = 1557
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1558
                            self.pattern()
                            pass

                        pass

                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def relationalExpression(self):
            return self.getTypedRuleContext(JavaParser.RelationalExpressionContext, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(JavaParser.EqualityExpressionContext, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_equalityExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityExpression"):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityExpression"):
                listener.exitEqualityExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqualityExpression"):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)

    def equalityExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 222
        self.enterRecursionRule(localctx, 222, self.RULE_equalityExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 182, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.EqualityExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_equalityExpression
                    )
                    self.state = 1569
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1570
                    localctx.bop = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == 94 or _la == 97):
                        localctx.bop = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1571
                    self.relationalExpression(0)
                self.state = 1576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 182, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitwiseAndExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(JavaParser.EqualityExpressionContext, 0)

        def bitwiseAndExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseAndExpressionContext, 0)

        def BITAND(self):
            return self.getToken(JavaParser.BITAND, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_bitwiseAndExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwiseAndExpression"):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwiseAndExpression"):
                listener.exitBitwiseAndExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwiseAndExpression"):
                return visitor.visitBitwiseAndExpression(self)
            else:
                return visitor.visitChildren(self)

    def bitwiseAndExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.BitwiseAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_bitwiseAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.BitwiseAndExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwiseAndExpression
                    )
                    self.state = 1580
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1581
                    self.match(JavaParser.BITAND)
                    self.state = 1582
                    self.equalityExpression(0)
                self.state = 1587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitwiseXorExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseAndExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseAndExpressionContext, 0)

        def bitwiseXorExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseXorExpressionContext, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_bitwiseXorExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwiseXorExpression"):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwiseXorExpression"):
                listener.exitBitwiseXorExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwiseXorExpression"):
                return visitor.visitBitwiseXorExpression(self)
            else:
                return visitor.visitChildren(self)

    def bitwiseXorExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.BitwiseXorExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_bitwiseXorExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.bitwiseAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.BitwiseXorExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwiseXorExpression
                    )
                    self.state = 1591
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1592
                    self.match(JavaParser.CARET)
                    self.state = 1593
                    self.bitwiseAndExpression(0)
                self.state = 1598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitwiseOrExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseXorExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseXorExpressionContext, 0)

        def bitwiseOrExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseOrExpressionContext, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_bitwiseOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwiseOrExpression"):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwiseOrExpression"):
                listener.exitBitwiseOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitwiseOrExpression"):
                return visitor.visitBitwiseOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def bitwiseOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.BitwiseOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_bitwiseOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.bitwiseXorExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.BitwiseOrExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitwiseOrExpression
                    )
                    self.state = 1602
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1603
                    self.match(JavaParser.BITOR)
                    self.state = 1604
                    self.bitwiseXorExpression(0)
                self.state = 1609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseOrExpression(self):
            return self.getTypedRuleContext(JavaParser.BitwiseOrExpressionContext, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(JavaParser.LogicalAndExpressionContext, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_logicalAndExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalAndExpression"):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalAndExpression"):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalAndExpression"):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)

    def logicalAndExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.bitwiseOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.LogicalAndExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_logicalAndExpression
                    )
                    self.state = 1613
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1614
                    self.match(JavaParser.AND)
                    self.state = 1615
                    self.bitwiseOrExpression(0)
                self.state = 1620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(JavaParser.LogicalAndExpressionContext, 0)

        def logicalOrExpression(self):
            return self.getTypedRuleContext(JavaParser.LogicalOrExpressionContext, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_logicalOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalOrExpression"):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalOrExpression"):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalOrExpression"):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def logicalOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 232
        self.enterRecursionRule(localctx, 232, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.LogicalOrExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_logicalOrExpression
                    )
                    self.state = 1624
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1625
                    self.match(JavaParser.OR)
                    self.state = 1626
                    self.logicalAndExpression(0)
                self.state = 1631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def logicalOrExpression(self):
            return self.getTypedRuleContext(JavaParser.LogicalOrExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def ternaryExpression(self):
            return self.getTypedRuleContext(JavaParser.TernaryExpressionContext, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_ternaryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryExpression"):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryExpression"):
                listener.exitTernaryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTernaryExpression"):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)

    def ternaryExpression(self):
        localctx = JavaParser.TernaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_ternaryExpression)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self.logicalOrExpression(0)
                self.state = 1633
                localctx.bop = self.match(JavaParser.QUESTION)
                self.state = 1634
                self.expression()
                self.state = 1635
                self.match(JavaParser.COLON)
                self.state = 1636
                self.ternaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.logicalOrExpression(0)
                self.state = 1639
                localctx.bop = self.match(JavaParser.QUESTION)
                self.state = 1640
                self.expression()
                self.state = 1641
                self.match(JavaParser.COLON)
                self.state = 1642
                self.lambdaExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1644
                self.logicalOrExpression(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bop = None  # Token

        def ternaryExpression(self):
            return self.getTypedRuleContext(JavaParser.TernaryExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_assignmentExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentExpression"):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentExpression"):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentExpression"):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)

    def assignmentExpression(self):
        localctx = JavaParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_assignmentExpression)
        self._la = 0  # Token type
        try:
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.ternaryExpression()
                self.state = 1648
                localctx.bop = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 87)) & ~0x3F) == 0
                        and ((1 << (_la - 87)) & 17171480577) != 0
                    )
                ):
                    localctx.bop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1649
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.ternaryExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(JavaParser.AssignmentExpressionContext, 0)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):
        localctx = JavaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_expression)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.lambdaExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPattern"):
                listener.enterPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPattern"):
                listener.exitPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPattern"):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)

    def pattern(self):
        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1658
                    self.variableModifier()
                self.state = 1663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)

            self.state = 1664
            self.typeType()
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 1665
                self.annotation()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1671
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext, 0)

        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdaExpression"):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdaExpression"):
                listener.exitLambdaExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdaExpression"):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)

    def lambdaExpression(self):
        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.lambdaParameters()
            self.state = 1674
            self.match(JavaParser.ARROW)
            self.state = 1675
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext, i)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdaParameters"):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdaParameters"):
                listener.exitLambdaParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdaParameters"):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)

    def lambdaParameters(self):
        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_lambdaParameters)
        self._la = 0  # Token type
        try:
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1677
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1678
                self.match(JavaParser.LPAREN)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        (((_la - 3)) & ~0x3F) == 0
                        and ((1 << (_la - 3)) & 8358399450686851109) != 0
                    )
                    or _la == 123
                    or _la == 128
                ):
                    self.state = 1679
                    self.formalParameterList()

                self.state = 1682
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1683
                self.match(JavaParser.LPAREN)
                self.state = 1684
                self.identifier()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 85:
                    self.state = 1685
                    self.match(JavaParser.COMMA)
                    self.state = 1686
                    self.identifier()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1692
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1694
                self.match(JavaParser.LPAREN)
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18 or _la == 61 or _la == 123:
                    self.state = 1695
                    self.lambdaLVTIList()

                self.state = 1698
                self.match(JavaParser.RPAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdaBody"):
                listener.enterLambdaBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdaBody"):
                listener.exitLambdaBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdaBody"):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)

    def lambdaBody(self):
        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_lambdaBody)
        try:
            self.state = 1703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                31,
                37,
                40,
                41,
                43,
                48,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                89,
                90,
                91,
                100,
                101,
                102,
                103,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self.expression()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1702
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ExplicitGenericInvocationExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsContext, 0
            )

        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(
                JavaParser.ExplicitGenericInvocationSuffixContext, 0
            )

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitGenericInvocationExpression"):
                listener.enterExplicitGenericInvocationExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitGenericInvocationExpression"):
                listener.exitExplicitGenericInvocationExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExplicitGenericInvocationExpression"):
                return visitor.visitExplicitGenericInvocationExpression(self)
            else:
                return visitor.visitChildren(self)

    class ThisExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThisExpression"):
                listener.enterThisExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThisExpression"):
                listener.exitThisExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitThisExpression"):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)

    class MemberReferenceExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.bop = None  # Token
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext, 0)

        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(
                JavaParser.ExplicitGenericInvocationContext, 0
            )

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberReferenceExpression"):
                listener.enterMemberReferenceExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberReferenceExpression"):
                listener.exitMemberReferenceExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMemberReferenceExpression"):
                return visitor.visitMemberReferenceExpression(self)
            else:
                return visitor.visitChildren(self)

    class MethodCallExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodCallExpression"):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodCallExpression"):
                listener.exitMethodCallExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodCallExpression"):
                return visitor.visitMethodCallExpression(self)
            else:
                return visitor.visitChildren(self)

    class MethodReferenceExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext, 0)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodReferenceExpression"):
                listener.enterMethodReferenceExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodReferenceExpression"):
                listener.exitMethodReferenceExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodReferenceExpression"):
                return visitor.visitMethodReferenceExpression(self)
            else:
                return visitor.visitChildren(self)

    class ParExprContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParExpr"):
                listener.enterParExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParExpr"):
                listener.exitParExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParExpr"):
                return visitor.visitParExpr(self)
            else:
                return visitor.visitChildren(self)

    class LiteralExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteralExpression"):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteralExpression"):
                listener.exitLiteralExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteralExpression"):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)

    class ClassExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassExpression"):
                listener.enterClassExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassExpression"):
                listener.exitClassExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassExpression"):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)

    class SuperExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSuperExpression"):
                listener.enterSuperExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSuperExpression"):
                listener.exitSuperExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSuperExpression"):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)

    class ArrayAccessExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext, 0)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayAccessExpression"):
                listener.enterArrayAccessExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayAccessExpression"):
                listener.exitArrayAccessExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayAccessExpression"):
                return visitor.visitArrayAccessExpression(self)
            else:
                return visitor.visitChildren(self)

    class IdentifierExpressionContext(PrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a JavaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierExpression"):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierExpression"):
                listener.exitIdentifierExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierExpression"):
                return visitor.visitIdentifierExpression(self)
            else:
                return visitor.visitChildren(self)

    def primary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 248
        self.enterRecursionRule(localctx, 248, self.RULE_primary, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 202, self._ctx)
            if la_ == 1:
                localctx = JavaParser.ParExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1706
                self.match(JavaParser.LPAREN)
                self.state = 1707
                self.expression()
                self.state = 1708
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = JavaParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1710
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                localctx = JavaParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1711
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                localctx = JavaParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1712
                self.literal()
                pass

            elif la_ == 5:
                localctx = JavaParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1713
                self.identifier()
                pass

            elif la_ == 6:
                localctx = JavaParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1714
                self.typeTypeOrVoid()
                self.state = 1715
                self.match(JavaParser.DOT)
                self.state = 1716
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                localctx = JavaParser.ExplicitGenericInvocationExpressionContext(
                    self, localctx
                )
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1718
                self.nonWildcardTypeArguments()
                self.state = 1722
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    40,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    128,
                ]:
                    self.state = 1719
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [43]:
                    self.state = 1720
                    self.match(JavaParser.THIS)
                    self.state = 1721
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                localctx = JavaParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1724
                self.methodCall()
                pass

            elif la_ == 9:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1725
                self.typeType()
                self.state = 1726
                self.match(JavaParser.COLONCOLON)
                self.state = 1732
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    89,
                    128,
                ]:
                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 89:
                        self.state = 1727
                        self.typeArguments()

                    self.state = 1730
                    self.identifier()
                    pass
                elif token in [31]:
                    self.state = 1731
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1734
                self.classType()
                self.state = 1735
                self.match(JavaParser.COLONCOLON)
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 89:
                    self.state = 1736
                    self.typeArguments()

                self.state = 1739
                self.match(JavaParser.NEW)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ArrayAccessExpressionContext(
                            self,
                            JavaParser.PrimaryContext(self, _parentctx, _parentState),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 1743
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 1744
                        self.match(JavaParser.LBRACK)
                        self.state = 1745
                        self.expression()
                        self.state = 1746
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.MemberReferenceExpressionContext(
                            self,
                            JavaParser.PrimaryContext(self, _parentctx, _parentState),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 1748
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 1749
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1760
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 204, self._ctx)
                        if la_ == 1:
                            self.state = 1750
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1751
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1752
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1753
                            self.match(JavaParser.NEW)
                            self.state = 1755
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 89:
                                self.state = 1754
                                self.nonWildcardTypeArguments()

                            self.state = 1757
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1758
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1759
                            self.explicitGenericInvocation()
                            pass

                        pass

                    elif la_ == 3:
                        localctx = JavaParser.MethodReferenceExpressionContext(
                            self,
                            JavaParser.PrimaryContext(self, _parentctx, _parentState),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primary
                        )
                        self.state = 1762
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1763
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1765
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 89:
                            self.state = 1764
                            self.typeArguments()

                        self.state = 1767
                        self.identifier()
                        pass

                self.state = 1772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext, i)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchExpression"):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchExpression"):
                listener.exitSwitchExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchExpression"):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)

    def switchExpression(self):
        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_switchExpression)
        self._la = 0  # Token type
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(JavaParser.SWITCH)
                self.state = 1774
                self.parExpression()
                self.state = 1775
                self.match(JavaParser.LBRACE)
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 6 or _la == 12:
                    self.state = 1776
                    self.switchLabeledRule()
                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1782
                self.match(JavaParser.RBRACE)
                pass
            elif token in [
                3,
                5,
                8,
                14,
                20,
                27,
                29,
                37,
                40,
                43,
                48,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                89,
                123,
                128,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext, 0)

        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchLabeledRule"):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchLabeledRule"):
                listener.exitSwitchLabeledRule(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchLabeledRule"):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)

    def switchLabeledRule(self):
        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_switchLabeledRule)
        self._la = 0  # Token type
        try:
            self.state = 1798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1787
                self.match(JavaParser.CASE)
                self.state = 1791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 210, self._ctx)
                if la_ == 1:
                    self.state = 1788
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1789
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1790
                    self.guardedPattern(0)
                    pass

                self.state = 1793
                _la = self._input.LA(1)
                if not (_la == 93 or _la == 121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1794
                self.switchRuleOutcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.match(JavaParser.DEFAULT)
                self.state = 1796
                _la = self._input.LA(1)
                if not (_la == 93 or _la == 121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1797
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardedPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def variableModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext, i)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_guardedPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGuardedPattern"):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGuardedPattern"):
                listener.exitGuardedPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGuardedPattern"):
                return visitor.visitGuardedPattern(self)
            else:
                return visitor.visitChildren(self)

    def guardedPattern(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_guardedPattern, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 1801
                self.match(JavaParser.LPAREN)
                self.state = 1802
                self.guardedPattern(0)
                self.state = 1803
                self.match(JavaParser.RPAREN)
                pass
            elif token in [
                3,
                5,
                8,
                14,
                18,
                20,
                27,
                29,
                37,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                65,
                123,
                128,
            ]:
                self.state = 1808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 212, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1805
                        self.variableModifier()
                    self.state = 1810
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 212, self._ctx)

                self.state = 1811
                self.typeType()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 123:
                    self.state = 1812
                    self.annotation()
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1818
                self.identifier()
                self.state = 1823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 214, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1819
                        self.match(JavaParser.AND)
                        self.state = 1820
                        self.expression()
                    self.state = 1825
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 214, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.GuardedPatternContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_guardedPattern
                    )
                    self.state = 1828
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 1829
                    self.match(JavaParser.AND)
                    self.state = 1830
                    self.expression()
                self.state = 1835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext, 0)

        def blockStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchRuleOutcome"):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchRuleOutcome"):
                listener.exitSwitchRuleOutcome(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchRuleOutcome"):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)

    def switchRuleOutcome(self):
        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_switchRuleOutcome)
        self._la = 0  # Token type
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (((_la - 1)) & ~0x3F) == 0
                    and ((1 << (_la - 1)) & -334254282492513) != 0
                ) or (
                    (((_la - 65)) & ~0x3F) == 0
                    and ((1 << (_la - 65)) & -8935141145188974593) != 0
                ):
                    self.state = 1837
                    self.blockStatement()
                    self.state = 1842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassType"):
                listener.enterClassType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassType"):
                listener.exitClassType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassType"):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)

    def classType(self):
        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_classType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.state = 1845
                self.classOrInterfaceType()
                self.state = 1846
                self.match(JavaParser.DOT)

            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 1850
                self.annotation()
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1856
            self.identifier()
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 1857
                self.typeArguments()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectCreator(self):
            return self.getTypedRuleContext(JavaParser.ObjectCreatorContext, 0)

        def arrayCreator(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreator"):
                listener.enterCreator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreator"):
                listener.exitCreator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCreator"):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)

    def creator(self):
        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_creator)
        try:
            self.state = 1862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.objectCreator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.arrayCreator()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectCreatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsContext, 0
            )

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_objectCreator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectCreator"):
                listener.enterObjectCreator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectCreator"):
                listener.exitObjectCreator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectCreator"):
                return visitor.visitObjectCreator(self)
            else:
                return visitor.visitChildren(self)

    def objectCreator(self):
        localctx = JavaParser.ObjectCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_objectCreator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 1864
                self.nonWildcardTypeArguments()

            self.state = 1867
            self.createdName()
            self.state = 1868
            self.arguments()
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
            if la_ == 1:
                self.state = 1869
                self.classBody()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coitDiamond(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CoitDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.CoitDiamondContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreatedName"):
                listener.enterCreatedName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreatedName"):
                listener.exitCreatedName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCreatedName"):
                return visitor.visitCreatedName(self)
            else:
                return visitor.visitChildren(self)

    def createdName(self):
        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_createdName)
        self._la = 0  # Token type
        try:
            self.state = 1881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                128,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.coitDiamond()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 86:
                    self.state = 1873
                    self.match(JavaParser.DOT)
                    self.state = 1874
                    self.coitDiamond()
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CoitDiamondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_coitDiamond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoitDiamond"):
                listener.enterCoitDiamond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoitDiamond"):
                listener.exitCoitDiamond(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoitDiamond"):
                return visitor.visitCoitDiamond(self)
            else:
                return visitor.visitChildren(self)

    def coitDiamond(self):
        localctx = JavaParser.CoitDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_coitDiamond)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.identifier()
            self.state = 1885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 1884
                self.typeArgumentsOrDiamond()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerCreatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsOrDiamondContext, 0
            )

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInnerCreator"):
                listener.enterInnerCreator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInnerCreator"):
                listener.exitInnerCreator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInnerCreator"):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)

    def innerCreator(self):
        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_innerCreator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.identifier()
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 89:
                self.state = 1888
                self.nonWildcardTypeArgumentsOrDiamond()

            self.state = 1891
            self.arguments()
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
            if la_ == 1:
                self.state = 1892
                self.classBody()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_dimExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDimExpr"):
                listener.enterDimExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDimExpr"):
                listener.exitDimExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDimExpr"):
                return visitor.visitDimExpr(self)
            else:
                return visitor.visitChildren(self)

    def dimExpr(self):
        localctx = JavaParser.DimExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_dimExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(JavaParser.LBRACK)
            self.state = 1896
            self.expression()
            self.state = 1897
            self.match(JavaParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext, 0)

        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext, 0)

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext, 0)

        def dimExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.DimExprContext)
            else:
                return self.getTypedRuleContext(JavaParser.DimExprContext, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayCreator"):
                listener.enterArrayCreator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayCreator"):
                listener.exitArrayCreator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayCreator"):
                return visitor.visitArrayCreator(self)
            else:
                return visitor.visitChildren(self)

    def arrayCreator(self):
        localctx = JavaParser.ArrayCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_arrayCreator)
        try:
            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 232, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                self.createdName()
                self.state = 1900
                self.dims()
                self.state = 1901
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.createdName()
                self.state = 1905
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1904
                        self.dimExpr()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1907
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 230, self._ctx)

                self.state = 1910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1909
                    self.dims()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsContext, 0
            )

        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(
                JavaParser.ExplicitGenericInvocationSuffixContext, 0
            )

        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitGenericInvocation"):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitGenericInvocation"):
                listener.exitExplicitGenericInvocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExplicitGenericInvocation"):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)

    def explicitGenericInvocation(self):
        localctx = JavaParser.ExplicitGenericInvocationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 274, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.nonWildcardTypeArguments()
            self.state = 1915
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeArgumentsOrDiamond"):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeArgumentsOrDiamond"):
                listener.exitTypeArgumentsOrDiamond(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeArgumentsOrDiamond"):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)

    def typeArgumentsOrDiamond(self):
        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1917
                self.match(JavaParser.LT)
                self.state = 1918
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.typeArguments()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(
                JavaParser.NonWildcardTypeArgumentsContext, 0
            )

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonWildcardTypeArgumentsOrDiamond"):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonWildcardTypeArgumentsOrDiamond"):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonWildcardTypeArgumentsOrDiamond"):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)

    def nonWildcardTypeArgumentsOrDiamond(self):
        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 278, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 234, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.match(JavaParser.LT)
                self.state = 1923
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.nonWildcardTypeArguments()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonWildcardTypeArguments"):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonWildcardTypeArguments"):
                listener.exitNonWildcardTypeArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonWildcardTypeArguments"):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)

    def nonWildcardTypeArguments(self):
        localctx = JavaParser.NonWildcardTypeArgumentsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 280, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.match(JavaParser.LT)
            self.state = 1928
            self.typeList()
            self.state = 1929
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeList"):
                listener.enterTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeList"):
                listener.exitTypeList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeList"):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)

    def typeList(self):
        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_typeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.typeType()
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 1932
                self.match(JavaParser.COMMA)
                self.state = 1933
                self.typeType()
                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext, 0)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext, i)

        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeType"):
                listener.enterTypeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeType"):
                listener.exitTypeType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeType"):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)

    def typeType(self):
        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_typeType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 123:
                self.state = 1939
                self.annotation()
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 128]:
                self.state = 1945
                self.classOrInterfaceType()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.state = 1946
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
            if la_ == 1:
                self.state = 1949
                self.dims()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveType"):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveType"):
                listener.exitPrimitiveType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveType"):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)

    def primitiveType(self):
        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_primitiveType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 138111107368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext, i)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeArguments"):
                listener.enterTypeArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeArguments"):
                listener.exitTypeArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeArguments"):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)

    def typeArguments(self):
        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_typeArguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954
            self.match(JavaParser.LT)
            self.state = 1955
            self.typeArgument()
            self.state = 1960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 85:
                self.state = 1956
                self.match(JavaParser.COMMA)
                self.state = 1957
                self.typeArgument()
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1963
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperSuffixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSuperSuffix"):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSuperSuffix"):
                listener.exitSuperSuffix(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSuperSuffix"):
                return visitor.visitSuperSuffix(self)
            else:
                return visitor.visitChildren(self)

    def superSuffix(self):
        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_superSuffix)
        self._la = 0  # Token type
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1965
                self.match(JavaParser.SUPER)
                self.state = 1966
                self.arguments()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1967
                self.match(JavaParser.SUPER)
                self.state = 1968
                self.match(JavaParser.DOT)
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 89:
                    self.state = 1969
                    self.typeArguments()

                self.state = 1972
                self.identifier()
                self.state = 1974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                if la_ == 1:
                    self.state = 1973
                    self.arguments()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitGenericInvocationSuffix"):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitGenericInvocationSuffix"):
                listener.exitExplicitGenericInvocationSuffix(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExplicitGenericInvocationSuffix"):
                return visitor.visitExplicitGenericInvocationSuffix(self)
            else:
                return visitor.visitChildren(self)

    def explicitGenericInvocationSuffix(self):
        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 292, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1978
                self.superSuffix()
                pass
            elif token in [
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                128,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1979
                self.identifier()
                self.state = 1980
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):
        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(JavaParser.LPAREN)
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 3)) & ~0x3F) == 0
                and ((1 << (_la - 3)) & 9223127275610966053) != 0
            ) or (
                (((_la - 67)) & ~0x3F) == 0
                and ((1 << (_la - 67)) & 2377900732130004991) != 0
            ):
                self.state = 1985
                self.expressionList()

            self.state = 1988
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[104] = self.postfixExpression_sempred
        self._predicates[107] = self.multiplicativeExpression_sempred
        self._predicates[108] = self.additiveExpression_sempred
        self._predicates[109] = self.shiftExpression_sempred
        self._predicates[110] = self.relationalExpression_sempred
        self._predicates[111] = self.equalityExpression_sempred
        self._predicates[112] = self.bitwiseAndExpression_sempred
        self._predicates[113] = self.bitwiseXorExpression_sempred
        self._predicates[114] = self.bitwiseOrExpression_sempred
        self._predicates[115] = self.logicalAndExpression_sempred
        self._predicates[116] = self.logicalOrExpression_sempred
        self._predicates[124] = self.primary_sempred
        self._predicates[127] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixExpression_sempred(
        self, localctx: PostfixExpressionContext, predIndex: int
    ):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

    def multiplicativeExpression_sempred(
        self, localctx: MultiplicativeExpressionContext, predIndex: int
    ):
        if predIndex == 1:
            return self.precpred(self._ctx, 2)

    def additiveExpression_sempred(
        self, localctx: AdditiveExpressionContext, predIndex: int
    ):
        if predIndex == 2:
            return self.precpred(self._ctx, 2)

    def shiftExpression_sempred(self, localctx: ShiftExpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 2)

    def relationalExpression_sempred(
        self, localctx: RelationalExpressionContext, predIndex: int
    ):
        if predIndex == 4:
            return self.precpred(self._ctx, 3)

        if predIndex == 5:
            return self.precpred(self._ctx, 2)

    def equalityExpression_sempred(
        self, localctx: EqualityExpressionContext, predIndex: int
    ):
        if predIndex == 6:
            return self.precpred(self._ctx, 2)

    def bitwiseAndExpression_sempred(
        self, localctx: BitwiseAndExpressionContext, predIndex: int
    ):
        if predIndex == 7:
            return self.precpred(self._ctx, 2)

    def bitwiseXorExpression_sempred(
        self, localctx: BitwiseXorExpressionContext, predIndex: int
    ):
        if predIndex == 8:
            return self.precpred(self._ctx, 2)

    def bitwiseOrExpression_sempred(
        self, localctx: BitwiseOrExpressionContext, predIndex: int
    ):
        if predIndex == 9:
            return self.precpred(self._ctx, 2)

    def logicalAndExpression_sempred(
        self, localctx: LogicalAndExpressionContext, predIndex: int
    ):
        if predIndex == 10:
            return self.precpred(self._ctx, 2)

    def logicalOrExpression_sempred(
        self, localctx: LogicalOrExpressionContext, predIndex: int
    ):
        if predIndex == 11:
            return self.precpred(self._ctx, 2)

    def primary_sempred(self, localctx: PrimaryContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 6)

        if predIndex == 13:
            return self.precpred(self._ctx, 5)

        if predIndex == 14:
            return self.precpred(self._ctx, 3)

    def guardedPattern_sempred(self, localctx: GuardedPatternContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 1)
