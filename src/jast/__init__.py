"""
    jast
    ~~~

    The `jast` module helps Python applications to process trees of the Java
    abstract syntax grammar.

    An abstract syntax tree can be generated by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `jast.JAST`.

    A modified abstract syntax tree can be written back to Java source code
    by using the `unparse()` function.  This function takes a tree of objects
    and returns a string with the Java source code.

    Additionally various helper functions are provided that make working with
    the trees simpler. The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with Java.


    :copyright: Copyright 2025 by Marius Smytzek and Martin Eberlein.
    :license: MIT License.
"""

from jast._jast import (
    JAST,
    Identifier,
    QualifiedName,
    Literal,
    IntegerLiteral,
    FloatLiteral,
    BoolLiteral,
    CharLiteral,
    StringLiteral,
    TextBlock,
    NullLiteral,
    Modifier,
    Transitive,
    Static,
    Public,
    Protected,
    Private,
    Abstract,
    Final,
    Sealed,
    NonSealed,
    Strictfp,
    Transient,
    Volatile,
    Synchronized,
    Native,
    Default,
    ElementValuePair,
    ElementValueArrayInitializer,
    Annotation,
    Type,
    Void,
    Var,
    PrimitiveType,
    Boolean,
    Byte,
    Short,
    Int,
    Long,
    Char,
    Float,
    Double,
    WildcardBound,
    Wildcard,
    TypeArguments,
    Coit,
    ClassType,
    Dim,
    ArrayType,
    VariableDeclaratorId,
    TypeBound,
    TypeParameter,
    TypeParameters,
    Pattern,
    GuardedPattern,
    OP,
    AssignmentOP,
    Assign,
    AddAssign,
    SubAssign,
    MulAssign,
    DivAssign,
    ModAssign,
    AndAssign,
    OrAssign,
    XorAssign,
    LShiftAssign,
    RShiftAssign,
    URShiftAssign,
    Operator,
    Or,
    And,
    BitOr,
    BitXor,
    BitAnd,
    Eq,
    NotEq,
    Lt,
    LtE,
    Gt,
    GtE,
    LShift,
    RShift,
    URShift,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    UnaryOperator,
    PreInc,
    PreDec,
    UAdd,
    USub,
    Invert,
    Not,
    PostOperator,
    PostInc,
    PostDec,
    Expr,
    Call,
    Lambda,
    Assignment,
    IfExp,
    BinOp,
    InstanceOf,
    UnaryOp,
    PostUnaryOp,
    Cast,
    NewObject,
    NewInnerObject,
    DimExpr,
    NewArray,
    SwitchExprLabel,
    ExprCase,
    ExprDefault,
    SwitchExprRule,
    SwitchExpr,
    This,
    Super,
    Constant,
    Name,
    Class,
    ExplicitGenericInvocation,
    ArrayAccess,
    Member,
    Reference,
    ArrayInitializer,
    ReceiverParameter,
    Parameter,
    VariableArityParameter,
    FormalParameters,
    Statement,
    LocalClassDeclaration,
    LocalInterfaceDeclaration,
    LocalRecordDeclaration,
    LocalVariableDeclaration,
    Block,
    Compound,
    Empty,
    Labeled,
    Expression,
    If,
    Assert,
    SwitchLabel,
    Match,
    Case,
    DefaultCase,
    Throw,
    SwitchGroup,
    SwitchBlock,
    Switch,
    While,
    DoWhile,
    For,
    ForEach,
    Break,
    Continue,
    Return,
    Synch,
    CatchClause,
    Try,
    Resource,
    TryWithResources,
    Yield,
    Declaration,
    PackageDeclaration,
    ImportDeclaration,
    EmptyDeclaration,
    ModuleDirective,
    RequiresDirective,
    ExportsDirective,
    OpensDirective,
    UsesDirective,
    ProvidesDirective,
    ModuleDeclaration,
    VariableDeclarator,
    FieldDeclaration,
    MethodDeclaration,
    InterfaceMethodDeclaration,
    Initializer,
    StaticInitializer,
    ConstructorDeclaration,
    CompactConstructorDeclaration,
    ConstantDeclaration,
    InterfaceDeclaration,
    AnnotationMethodDeclaration,
    AnnotationConstantDeclaration,
    AnnotationDeclaration,
)
from jast._parse import parse, ParseMode
from jast._unparse import unparse
from jast._visitors import JNodeVisitor, JNodeTransformer

__all__ = [
    "JAST",
    "Identifier",
    "QualifiedName",
    "Literal",
    "IntegerLiteral",
    "FloatLiteral",
    "BoolLiteral",
    "CharLiteral",
    "StringLiteral",
    "TextBlock",
    "NullLiteral",
    "Modifier",
    "Transitive",
    "Static",
    "Public",
    "Protected",
    "Private",
    "Abstract",
    "Final",
    "Sealed",
    "NonSealed",
    "Strictfp",
    "Transient",
    "Volatile",
    "Synchronized",
    "Native",
    "Default",
    "ElementValuePair",
    "ElementValueArrayInitializer",
    "Annotation",
    "Type",
    "Void",
    "Var",
    "PrimitiveType",
    "Boolean",
    "Byte",
    "Short",
    "Int",
    "Long",
    "Char",
    "Float",
    "Double",
    "WildcardBound",
    "Wildcard",
    "TypeArguments",
    "Coit",
    "ClassType",
    "Dim",
    "ArrayType",
    "VariableDeclaratorId",
    "TypeBound",
    "TypeParameter",
    "TypeParameters",
    "Pattern",
    "GuardedPattern",
    "OP",
    "AssignmentOP",
    "Assign",
    "AddAssign",
    "SubAssign",
    "MulAssign",
    "DivAssign",
    "ModAssign",
    "AndAssign",
    "OrAssign",
    "XorAssign",
    "LShiftAssign",
    "RShiftAssign",
    "URShiftAssign",
    "Operator",
    "Or",
    "And",
    "BitOr",
    "BitXor",
    "BitAnd",
    "Eq",
    "NotEq",
    "Lt",
    "LtE",
    "Gt",
    "GtE",
    "LShift",
    "RShift",
    "URShift",
    "Add",
    "Sub",
    "Mul",
    "Div",
    "Mod",
    "UnaryOperator",
    "PreInc",
    "PreDec",
    "UAdd",
    "USub",
    "Invert",
    "Not",
    "PostOperator",
    "PostInc",
    "PostDec",
    "Expr",
    "Call",
    "Lambda",
    "Assignment",
    "IfExp",
    "BinOp",
    "InstanceOf",
    "UnaryOp",
    "PostUnaryOp",
    "Cast",
    "NewObject",
    "NewInnerObject",
    "DimExpr",
    "NewArray",
    "SwitchExprLabel",
    "ExprCase",
    "ExprDefault",
    "SwitchExprRule",
    "SwitchExpr",
    "This",
    "Super",
    "Constant",
    "Name",
    "Class",
    "ExplicitGenericInvocation",
    "ArrayAccess",
    "Member",
    "Reference",
    "ArrayInitializer",
    "ReceiverParameter",
    "Parameter",
    "VariableArityParameter",
    "FormalParameters",
    "Statement",
    "LocalClassDeclaration",
    "LocalInterfaceDeclaration",
    "LocalRecordDeclaration",
    "LocalVariableDeclaration",
    "Block",
    "Compound",
    "Empty",
    "Labeled",
    "Expression",
    "If",
    "Assert",
    "SwitchLabel",
    "Match",
    "Case",
    "DefaultCase",
    "Throw",
    "SwitchGroup",
    "SwitchBlock",
    "Switch",
    "While",
    "DoWhile",
    "For",
    "ForEach",
    "Break",
    "Continue",
    "Return",
    "Synch",
    "CatchClause",
    "Try",
    "Resource",
    "TryWithResources",
    "Yield",
    "Declaration",
    "PackageDeclaration",
    "ImportDeclaration",
    "EmptyDeclaration",
    "ModuleDirective",
    "RequiresDirective",
    "ExportsDirective",
    "OpensDirective",
    "UsesDirective",
    "ProvidesDirective",
    "ModuleDeclaration",
    "VariableDeclarator",
    "FieldDeclaration",
    "MethodDeclaration",
    "InterfaceMethodDeclaration",
    "Initializer",
    "StaticInitializer",
    "ConstructorDeclaration",
    "CompactConstructorDeclaration",
    "ConstantDeclaration",
    "InterfaceDeclaration",
    "AnnotationMethodDeclaration",
    "AnnotationConstantDeclaration",
    "AnnotationDeclaration",
    "JNodeVisitor",
    "JNodeTransformer",
    "parse",
    "ParseMode",
    "unparse",
]
