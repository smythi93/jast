from typing import Any

import jast._jast as jast

class JNodeVisitor:
    def visit(self, node: jast.JAST): ...
    def generic_visit(self, node: jast.JAST): ...
    def default_result(self) -> Any: ...
    def aggregate_result(self, aggregate, result) -> Any: ...

    # Names
    def visit_Identifier(self, node: jast.Identifier): ...
    def visit_QualifiedName(self, node: jast.QualifiedName): ...

    # Literals
    def visit_IntegerLiteral(self, node: jast.IntegerLiteral): ...
    def visit_FloatLiteral(self, node: jast.FloatLiteral): ...
    def visit_BoolLiteral(self, node: jast.BoolLiteral): ...
    def visit_CharLiteral(self, node: jast.CharLiteral): ...
    def visit_StringLiteral(self, node: jast.StringLiteral): ...
    def visit_TextBlock(self, node: jast.TextBlock): ...
    def visit_NullLiteral(self, node: jast.NullLiteral): ...

    # Modifiers
    def visit_Transitive(self, node: jast.Transitive): ...
    def visit_Static(self, node: jast.Static): ...
    def visit_Public(self, node: jast.Public): ...
    def visit_Protected(self, node: jast.Protected): ...
    def visit_Private(self, node: jast.Private): ...
    def visit_Abstract(self, node: jast.Abstract): ...
    def visit_Final(self, node: jast.Final): ...
    def visit_Sealed(self, node: jast.Sealed): ...
    def visit_NonSealed(self, node: jast.NonSealed): ...
    def visit_Strictfp(self, node: jast.Strictfp): ...
    def visit_Transient(self, node: jast.Transient): ...
    def visit_Volatile(self, node: jast.Volatile): ...
    def visit_Synchronized(self, node: jast.Synchronized): ...
    def visit_Native(self, node: jast.Native): ...
    def visit_Default(self, node: jast.Default): ...

    def visit_ElementValuePair(self, node: jast.ElementValuePair): ...
    def visit_ElementValueArrayInitializer(self, node: jast.ElementValueArrayInitializer): ...

    def visit_Annotation(self, node: jast.Annotation): ...

    # Types
    def visit_Void(self, node: jast.Void): ...
    def visit_Var(self, node: jast.Var): ...
    def visit_Boolean(self, node: jast.Boolean): ...
    def visit_Byte(self, node: jast.Byte): ...
    def visit_Short(self, node: jast.Short): ...
    def visit_Int(self, node: jast.Int): ...
    def visit_Long(self, node: jast.Long): ...
    def visit_Char(self, node: jast.Char): ...
    def visit_Float(self, node: jast.Float): ...
    def visit_Double(self, node: jast.Double): ...

    def visit_WildcardBound(self, node: jast.WildcardBound): ...
    def visit_Wildcard(self, node: jast.Wildcard): ...
    def visit_TypeArguments(self, node: jast.TypeArguments): ...
    def visit_Coit(self, node: jast.Coit): ...
    def visit_ClassType(self, node: jast.ClassType): ...
    def visit_Dim(self, node: jast.Dim): ...
    def visit_ArrayType(self, node: jast.ArrayType): ...

    # Type Parameters
    def visit_TypeBound(self, node: jast.TypeBound): ...
    def visit_TypeParameter(self, node: jast.TypeParameter): ...
    def visit_TypeParameters(self, node: jast.TypeParameters): ...

    # Pattern
    def visit_Pattern(self, node: jast.Pattern): ...
    def visit_GuardedPattern(self, node: jast.GuardedPattern): ...

    # Operators
    def visit_Assign(self, node: jast.Assign): ...
    def visit_AddAssign(self, node: jast.AddAssign): ...
    def visit_SubAssign(self, node: jast.SubAssign): ...
    def visit_MulAssign(self, node: jast.MulAssign): ...
    def visit_DivAssign(self, node: jast.DivAssign): ...
    def visit_ModAssign(self, node: jast.ModAssign): ...
    def visit_AndAssign(self, node: jast.AndAssign): ...
    def visit_OrAssign(self, node: jast.OrAssign): ...
    def visit_XorAssign(self, node: jast.XorAssign): ...
    def visit_LShiftAssign(self, node: jast.LShiftAssign): ...
    def visit_RShiftAssign(self, node: jast.RShiftAssign): ...
    def visit_URShiftAssign(self, node: jast.URShiftAssign): ...
    def visit_Or(self, node: jast.Or): ...
    def visit_And(self, node: jast.And): ...
    def visit_BitOr(self, node: jast.BitOr): ...
    def visit_BitXor(self, node: jast.BitXor): ...
    def visit_BitAnd(self, node: jast.BitAnd): ...
    def visit_Eq(self, node: jast.Eq): ...
    def visit_NotEq(self, node: jast.NotEq): ...
    def visit_Lt(self, node: jast.Lt): ...
    def visit_LtE(self, node: jast.LtE): ...
    def visit_Gt(self, node: jast.Gt): ...
    def visit_GtE(self, node: jast.GtE): ...
    def visit_LShift(self, node: jast.LShift): ...
    def visit_RShift(self, node: jast.RShift): ...
    def visit_URShift(self, node: jast.URShift): ...
    def visit_Add(self, node: jast.Add): ...
    def visit_Sub(self, node: jast.Sub): ...
    def visit_Mul(self, node: jast.Mul): ...
    def visit_Div(self, node: jast.Div): ...
    def visit_Mod(self, node: jast.Mod): ...
    def visit_PreInc(self, node: jast.PreInc): ...
    def visit_PreDec(self, node: jast.PreDec): ...
    def visit_UAdd(self, node: jast.UAdd): ...
    def visit_USub(self, node: jast.USub): ...
    def visit_Invert(self, node: jast.Invert): ...
    def visit_Not(self, node: jast.Not): ...
    def visit_PostInc(self, node: jast.PostInc): ...
    def visit_PostDec(self, node: jast.PostDec): ...

    # Expressions
    def visit_Lambda(self, node: jast.Lambda): ...
    def visit_Assignment(self, node: jast.Assignment): ...
    def visit_IfExp(self, node: jast.IfExp): ...
    def visit_BinOp(self, node: jast.BinOp): ...
    def visit_InstanceOf(self, node: jast.InstanceOf): ...
    def visit_NewObject(self, node: jast.NewObject): ...
    def visit_NewArray(self, node: jast.NewArray): ...
    def visit_Cast(self, node: jast.Cast): ...
    def visit_UnaryOp(self, node: jast.UnaryOp): ...
    def visit_PostUnaryOp(self, node: jast.PostUnaryOp): ...

    def visit_SwitchExpr(self, node: jast.SwitchExpr): ...
    def visit_Reference(self, node: jast.Reference): ...
    def visit_Call(self, node: jast.Call): ...
    def visit_Member(self, node: jast.Member): ...
    def visit_ArrayAccess(self, node: jast.ArrayAccess): ...

    def visit_This(self, node: jast.This): ...
    def visit_Super(self, node: jast.Super): ...
    def visit_Constant(self, node: jast.Constant): ...
    def visit_Name(self, node: jast.Name): ...
    def visit_Class(self, node: jast.Class): ...
    def visit_ExplictGenericInvocation(self, node: jast.ExplicitGenericInvocation): ...
    def visit_NewInnerObject(self, node: jast.NewInnerObject): ...

    # Expressions Utils
    def visit_DimExpr(self, node: jast.DimExpr): ...
    def visit_ExprCase(self, node: jast.ExprCase): ...
    def visit_ExprDefault(self, node: jast.ExprDefault): ...
    def visit_SwitchExprRule(self, node: jast.SwitchExprRule): ...

    # Arrays
    def visit_ArrayInitializer(self, node: jast.ArrayInitializer): ...

    # Parameters
    def visit_ReceiverParameter(self, node: jast.ReceiverParameter): ...
    def visit_Parameter(self, node: jast.Parameter): ...
    def visit_VariableArityParameter(self, node: jast.VariableArityParameter): ...
    def visit_FormalParameters(self, node: jast.FormalParameters): ...

    # Statements
    def visit_LocalClassDeclaration(self, node: jast.LocalClassDeclaration): ...
    def visit_LocalInterfaceDeclaration(self, node: jast.LocalInterfaceDeclaration): ...
    def visit_LocalRecordDeclaration(self, node: jast.LocalRecordDeclaration): ...
    def visit_LocalVariableDeclaration(self, node: jast.LocalVariableDeclaration): ...

    def visit_Block(self, node: jast.Block): ...
    def visit_Compound(self, node: jast.Compound): ...

    def visit_Empty(self, node: jast.Empty): ...

    def visit_Labeled(self, node: jast.Labeled): ...

    def visit_Expression(self, node: jast.Expression): ...

    def visit_If(self, node: jast.If): ...
    def visit_Assert(self, node: jast.Assert): ...
    def visit_Throw(self, node: jast.Throw): ...
    def visit_Switch(self, node: jast.Switch): ...
    def visit_While(self, node: jast.While): ...
    def visit_DoWhile(self, node: jast.DoWhile): ...
    def visit_For(self, node: jast.For): ...
    def visit_ForEach(self, node: jast.ForEach): ...
    def visit_Break(self, node: jast.Break): ...
    def visit_Continue(self, node: jast.Continue): ...
    def visit_Return(self, node: jast.Return): ...
    def visit_Synch(self, node: jast.Synch): ...
    def visit_Try(self, node: jast.Try): ...
    def visit_TryWithResources(self, node: jast.TryWithResources): ...
    def visit_Yield(self, node: jast.Yield): ...


    # Statements Utils
    def visit_Match(self, node: jast.Match): ...
    def visit_Case(self, node: jast.Case): ...
    def visit_DefaultCase(self, node: jast.DefaultCase): ...
    def visit_SwitchGroup(self, node: jast.SwitchGroup): ...
    def visit_SwitchBlock(self, node: jast.SwitchBlock): ...
    def visit_CatchClause(self, node: jast.CatchClause): ...
    def visit_Resource(self, node: jast.Resource): ...

    # Declarations
    def visit_PackageDeclaration(self, node: jast.PackageDeclaration): ...
    def visit_ImportDeclaration(self, node: jast.ImportDeclaration): ...
    def visit_EmptyDeclaration(self, node: jast.EmptyDeclaration): ...
    def visit_ModuleDeclaration(self, node: jast.ModuleDeclaration): ...
    def visit_FieldDeclaration(self, node: jast.FieldDeclaration): ...
    def visit_MethodDeclaration(self, node: jast.MethodDeclaration): ...
    def visit_InterfaceMethodDeclaration(self, node: jast.InterfaceMethodDeclaration): ...
    def visit_AnnotationMethodDeclaration(self, node: jast.AnnotationMethodDeclaration): ...
    def visit_Initializer(self, node: jast.Initializer): ...
    def visit_StaticInitializer(self, node: jast.StaticInitializer): ...
    def visit_ConstructorDeclaration(self, node: jast.ConstructorDeclaration): ...
    def visit_CompactConstructorDeclaration(self, node: jast.CompactConstructorDeclaration): ...
    def visit_ConstantDeclaration(self, node: jast.ConstantDeclaration): ...
    def visit_AnnotationConstantDeclaration(self, node: jast.AnnotationConstantDeclaration): ...
    def visit_InterfaceDeclaration(self, node: jast.InterfaceDeclaration): ...
    def visit_AnnotationDeclaration(self, node: jast.AnnotationDeclaration): ...
    def visit_ClassDeclaration(self, node: jast.ClassDeclaration): ...
    def visit_EnumDeclaration(self, node: jast.EnumDeclaration): ...
    def visit_RecordDeclaration(self, node: jast.RecordDeclaration): ...


    # Module Directives
    def visit_RequiresDirective(self, node: jast.RequiresDirective): ...
    def visit_ExportsDirective(self, node: jast.ExportsDirective): ...
    def visit_OpensDirective(self, node: jast.OpensDirective): ...
    def visit_UsesDirective(self, node: jast.UsesDirective): ...
    def visit_ProvidesDirective(self, node: jast.ProvidesDirective): ...

    # Variables
    def visit_VariableDeclarator(self, node: jast.VariableDeclarator): ...
    def visit_VariableDeclaratorId(self, node: jast.VariableDeclaratorId): ...

    # Enums
    def visit_EnumConstant(self, node: jast.EnumConstant): ...

    # Records
    def visit_RecordComponent(self, node: jast.RecordComponent): ...

    # Compilation Units
    def visit_OrdinaryCompilationUnit(self, node: jast.OrdinaryCompilationUnit): ...
    def visit_ModularCompilationUnit(self, node: jast.ModularCompilationUnit): ...


class JNodeTransformer(JNodeVisitor):
    pass
